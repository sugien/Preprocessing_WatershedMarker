// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="make_marker,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.785000,HLS_SYN_LAT=841523,HLS_SYN_TPT=none,HLS_SYN_MEM=68,HLS_SYN_DSP=11,HLS_SYN_FF=4261,HLS_SYN_LUT=5370}" *)

module make_marker (
        ap_clk,
        ap_rst_n,
        inputStream_TDATA,
        inputStream_TVALID,
        inputStream_TREADY,
        inputStream_TKEEP,
        inputStream_TSTRB,
        inputStream_TUSER,
        inputStream_TLAST,
        inputStream_TID,
        inputStream_TDEST,
        outputStream_TDATA,
        outputStream_TVALID,
        outputStream_TREADY,
        outputStream_TKEEP,
        outputStream_TSTRB,
        outputStream_TUSER,
        outputStream_TLAST,
        outputStream_TID,
        outputStream_TDEST,
        s_axi_ctrl_bus_AWVALID,
        s_axi_ctrl_bus_AWREADY,
        s_axi_ctrl_bus_AWADDR,
        s_axi_ctrl_bus_WVALID,
        s_axi_ctrl_bus_WREADY,
        s_axi_ctrl_bus_WDATA,
        s_axi_ctrl_bus_WSTRB,
        s_axi_ctrl_bus_ARVALID,
        s_axi_ctrl_bus_ARREADY,
        s_axi_ctrl_bus_ARADDR,
        s_axi_ctrl_bus_RVALID,
        s_axi_ctrl_bus_RREADY,
        s_axi_ctrl_bus_RDATA,
        s_axi_ctrl_bus_RRESP,
        s_axi_ctrl_bus_BVALID,
        s_axi_ctrl_bus_BREADY,
        s_axi_ctrl_bus_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_state4 = 18'd8;
parameter    ap_ST_fsm_state5 = 18'd16;
parameter    ap_ST_fsm_state6 = 18'd32;
parameter    ap_ST_fsm_state7 = 18'd64;
parameter    ap_ST_fsm_state8 = 18'd128;
parameter    ap_ST_fsm_state9 = 18'd256;
parameter    ap_ST_fsm_state10 = 18'd512;
parameter    ap_ST_fsm_pp0_stage0 = 18'd1024;
parameter    ap_ST_fsm_pp0_stage1 = 18'd2048;
parameter    ap_ST_fsm_pp0_stage2 = 18'd4096;
parameter    ap_ST_fsm_pp0_stage3 = 18'd8192;
parameter    ap_ST_fsm_pp0_stage4 = 18'd16384;
parameter    ap_ST_fsm_state20 = 18'd32768;
parameter    ap_ST_fsm_pp1_stage0 = 18'd65536;
parameter    ap_ST_fsm_state25 = 18'd131072;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [7:0] inputStream_TDATA;
input   inputStream_TVALID;
output   inputStream_TREADY;
input  [0:0] inputStream_TKEEP;
input  [0:0] inputStream_TSTRB;
input  [4:0] inputStream_TUSER;
input  [0:0] inputStream_TLAST;
input  [1:0] inputStream_TID;
input  [5:0] inputStream_TDEST;
output  [7:0] outputStream_TDATA;
output   outputStream_TVALID;
input   outputStream_TREADY;
output  [0:0] outputStream_TKEEP;
output  [0:0] outputStream_TSTRB;
output  [4:0] outputStream_TUSER;
output  [0:0] outputStream_TLAST;
output  [1:0] outputStream_TID;
output  [5:0] outputStream_TDEST;
input   s_axi_ctrl_bus_AWVALID;
output   s_axi_ctrl_bus_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_ctrl_bus_AWADDR;
input   s_axi_ctrl_bus_WVALID;
output   s_axi_ctrl_bus_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_ctrl_bus_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_ctrl_bus_WSTRB;
input   s_axi_ctrl_bus_ARVALID;
output   s_axi_ctrl_bus_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_ctrl_bus_ARADDR;
output   s_axi_ctrl_bus_RVALID;
input   s_axi_ctrl_bus_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_ctrl_bus_RDATA;
output  [1:0] s_axi_ctrl_bus_RRESP;
output   s_axi_ctrl_bus_BVALID;
input   s_axi_ctrl_bus_BREADY;
output  [1:0] s_axi_ctrl_bus_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [7:0] inputStream_V_data_V_0_data_out;
wire    inputStream_V_data_V_0_vld_in;
wire    inputStream_V_data_V_0_vld_out;
wire    inputStream_V_data_V_0_ack_in;
reg    inputStream_V_data_V_0_ack_out;
reg   [7:0] inputStream_V_data_V_0_payload_A;
reg   [7:0] inputStream_V_data_V_0_payload_B;
reg    inputStream_V_data_V_0_sel_rd;
reg    inputStream_V_data_V_0_sel_wr;
wire    inputStream_V_data_V_0_sel;
wire    inputStream_V_data_V_0_load_A;
wire    inputStream_V_data_V_0_load_B;
reg   [1:0] inputStream_V_data_V_0_state;
wire    inputStream_V_data_V_0_state_cmp_full;
wire    inputStream_V_dest_V_0_vld_in;
reg    inputStream_V_dest_V_0_ack_out;
reg   [1:0] inputStream_V_dest_V_0_state;
reg   [7:0] outputStream_V_data_V_1_data_in;
reg   [7:0] outputStream_V_data_V_1_data_out;
reg    outputStream_V_data_V_1_vld_in;
wire    outputStream_V_data_V_1_vld_out;
wire    outputStream_V_data_V_1_ack_in;
wire    outputStream_V_data_V_1_ack_out;
reg   [7:0] outputStream_V_data_V_1_payload_A;
reg   [7:0] outputStream_V_data_V_1_payload_B;
reg    outputStream_V_data_V_1_sel_rd;
reg    outputStream_V_data_V_1_sel_wr;
wire    outputStream_V_data_V_1_sel;
wire    outputStream_V_data_V_1_load_A;
wire    outputStream_V_data_V_1_load_B;
reg   [1:0] outputStream_V_data_V_1_state;
wire    outputStream_V_data_V_1_state_cmp_full;
wire   [0:0] outputStream_V_keep_V_1_data_out;
reg    outputStream_V_keep_V_1_vld_in;
wire    outputStream_V_keep_V_1_vld_out;
wire    outputStream_V_keep_V_1_ack_in;
wire    outputStream_V_keep_V_1_ack_out;
reg    outputStream_V_keep_V_1_sel_rd;
wire    outputStream_V_keep_V_1_sel;
reg   [1:0] outputStream_V_keep_V_1_state;
wire   [0:0] outputStream_V_strb_V_1_data_out;
reg    outputStream_V_strb_V_1_vld_in;
wire    outputStream_V_strb_V_1_vld_out;
wire    outputStream_V_strb_V_1_ack_in;
wire    outputStream_V_strb_V_1_ack_out;
reg    outputStream_V_strb_V_1_sel_rd;
wire    outputStream_V_strb_V_1_sel;
reg   [1:0] outputStream_V_strb_V_1_state;
wire   [4:0] outputStream_V_user_V_1_data_out;
reg    outputStream_V_user_V_1_vld_in;
wire    outputStream_V_user_V_1_vld_out;
wire    outputStream_V_user_V_1_ack_in;
wire    outputStream_V_user_V_1_ack_out;
reg    outputStream_V_user_V_1_sel_rd;
wire    outputStream_V_user_V_1_sel;
reg   [1:0] outputStream_V_user_V_1_state;
wire   [0:0] outputStream_V_last_V_1_data_out;
reg    outputStream_V_last_V_1_vld_in;
wire    outputStream_V_last_V_1_vld_out;
wire    outputStream_V_last_V_1_ack_in;
wire    outputStream_V_last_V_1_ack_out;
reg    outputStream_V_last_V_1_sel_rd;
wire    outputStream_V_last_V_1_sel;
reg   [1:0] outputStream_V_last_V_1_state;
wire   [1:0] outputStream_V_id_V_1_data_out;
reg    outputStream_V_id_V_1_vld_in;
wire    outputStream_V_id_V_1_vld_out;
wire    outputStream_V_id_V_1_ack_in;
wire    outputStream_V_id_V_1_ack_out;
reg    outputStream_V_id_V_1_sel_rd;
wire    outputStream_V_id_V_1_sel;
reg   [1:0] outputStream_V_id_V_1_state;
wire   [5:0] outputStream_V_dest_V_1_data_out;
reg    outputStream_V_dest_V_1_vld_in;
wire    outputStream_V_dest_V_1_vld_out;
wire    outputStream_V_dest_V_1_ack_in;
wire    outputStream_V_dest_V_1_ack_out;
reg    outputStream_V_dest_V_1_sel_rd;
wire    outputStream_V_dest_V_1_sel;
reg   [1:0] outputStream_V_dest_V_1_state;
reg    inputStream_TDATA_blk_n;
wire    ap_CS_fsm_state4;
reg    outputStream_TDATA_blk_n;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_pp1_stage0;
reg   [0:0] tmp_25_reg_1279;
reg    ap_enable_reg_pp1_iter3;
reg   [0:0] tmp_25_reg_1279_pp1_iter2_reg;
reg   [31:0] idxRow_reg_432;
reg   [31:0] col_assign_reg_443;
reg   [31:0] pixProcessed_reg_454;
reg   [15:0] i3_reg_466;
reg   [15:0] i4_reg_477;
wire   [8:0] idxHist_1_fu_499_p2;
wire    ap_CS_fsm_state2;
wire   [15:0] i_1_fu_516_p2;
reg   [15:0] i_1_reg_982;
wire    ap_CS_fsm_state3;
reg   [7:0] histogram_addr_1_reg_987;
wire   [31:0] histogram_q0;
reg   [31:0] histogram_load_reg_992;
wire    ap_CS_fsm_state5;
wire   [31:0] grp_otsu_fu_488_ap_return;
reg   [31:0] t_reg_997;
wire    ap_CS_fsm_state7;
wire    grp_otsu_fu_488_ap_idle;
wire    grp_otsu_fu_488_ap_ready;
wire    grp_otsu_fu_488_ap_done;
wire   [0:0] exitcond3_fu_543_p2;
wire    ap_CS_fsm_state8;
wire   [15:0] i_2_fu_549_p2;
reg   [15:0] i_2_reg_1006;
reg   [15:0] img_fifo_addr_1_reg_1011;
wire   [0:0] tmp_18_fu_564_p2;
reg   [0:0] tmp_18_reg_1016;
wire    ap_CS_fsm_state9;
wire   [0:0] exitcond4_fu_577_p2;
reg   [0:0] exitcond4_reg_1021;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state11_pp0_stage0_iter0;
wire    ap_block_state16_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond4_reg_1021_pp0_iter1_reg;
wire   [15:0] i_4_fu_583_p2;
reg   [15:0] i_4_reg_1025;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] tmp_19_fu_589_p1;
reg   [63:0] tmp_19_reg_1030;
reg   [63:0] tmp_19_reg_1030_pp0_iter1_reg;
reg   [15:0] img_fifo_addr_2_reg_1035;
reg   [15:0] img_fifo_addr_2_reg_1035_pp0_iter1_reg;
wire   [63:0] tmp_20_fu_594_p1;
reg   [63:0] tmp_20_reg_1040;
reg   [8:0] lineBuff_val_1_addr_reg_1045;
reg   [8:0] lineBuff_val_2_addr_reg_1050;
wire   [0:0] or_cond_fu_632_p2;
reg   [0:0] or_cond_reg_1055;
reg   [0:0] or_cond_reg_1055_pp0_iter1_reg;
wire   [0:0] tmp_26_fu_638_p2;
reg   [0:0] tmp_26_reg_1062;
wire   [31:0] idxCol_fu_644_p2;
reg   [31:0] idxCol_reg_1068;
wire   [31:0] idxRow_1_fu_656_p3;
reg   [31:0] idxRow_1_reg_1073;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state13_pp0_stage2_iter0;
wire    ap_block_state18_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire   [31:0] pixProcessed_3_fu_671_p2;
reg   [31:0] pixProcessed_3_reg_1083;
wire   [31:0] col_assign_1_0_2_fu_684_p2;
reg   [31:0] col_assign_1_0_2_reg_1115;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state14_pp0_stage3_iter0;
wire    ap_block_state19_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire   [7:0] lineBuff_val_1_q0;
reg   [7:0] lineBuff_val_1_load_1_reg_1126;
wire   [7:0] lineBuff_val_1_q1;
reg   [7:0] lineBuff_val_1_load_2_reg_1134;
wire   [7:0] lineBuff_val_2_q0;
reg   [7:0] lineBuff_val_2_load_1_reg_1147;
wire   [7:0] lineBuff_val_2_q1;
reg   [7:0] lineBuff_val_2_load_2_reg_1155;
wire   [31:0] valInWindow_0_minVal_fu_703_p3;
reg   [31:0] valInWindow_0_minVal_reg_1168;
wire   [31:0] valInWindow_0_maxVal_fu_721_p3;
reg   [31:0] valInWindow_0_maxVal_reg_1178;
wire   [31:0] idxCol_1_fu_734_p3;
reg   [31:0] idxCol_1_reg_1184;
wire   [31:0] pixProcessed_2_fu_740_p3;
reg   [31:0] pixProcessed_2_reg_1189;
wire   [7:0] lineBuff_val_0_q1;
reg   [7:0] lineBuff_val_0_load_2_reg_1194;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state15_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
reg   [7:0] lineBuff_val_1_load_3_reg_1200;
reg   [7:0] lineBuff_val_2_load_3_reg_1208;
wire   [7:0] lineBuff_val_0_q0;
reg   [7:0] lineBuff_val_0_load_3_reg_1216;
wire   [7:0] valInWindow_0_minVal_5_fu_799_p3;
reg   [7:0] valInWindow_0_minVal_5_reg_1236;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state12_pp0_stage1_iter0;
wire    ap_block_state17_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire   [7:0] valInWindow_0_maxVal_5_fu_823_p3;
reg   [7:0] valInWindow_0_maxVal_5_reg_1242;
wire   [7:0] valInWindow_0_minVal_8_fu_857_p3;
reg   [7:0] valInWindow_0_minVal_8_reg_1248;
wire   [7:0] valInWindow_0_maxVal_8_fu_891_p3;
reg   [7:0] valInWindow_0_maxVal_8_reg_1254;
wire   [0:0] exitcond_fu_948_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state21_pp1_stage0_iter0;
wire    ap_block_state22_pp1_stage0_iter1;
wire    ap_block_state23_pp1_stage0_iter2;
reg    ap_block_state23_io;
wire    ap_block_state24_pp1_stage0_iter3;
reg    ap_block_state24_io;
reg    ap_block_pp1_stage0_11001;
wire   [15:0] i_3_fu_954_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [63:0] tmp_24_fu_960_p1;
reg   [63:0] tmp_24_reg_1269;
wire   [0:0] tmp_25_fu_965_p2;
wire   [7:0] backimg_q0;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state11;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_CS_fsm_state20;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state21;
reg    ap_enable_reg_pp1_iter1;
reg   [7:0] histogram_address0;
reg    histogram_ce0;
reg    histogram_we0;
reg   [31:0] histogram_d0;
reg   [15:0] img_fifo_address0;
reg    img_fifo_ce0;
reg    img_fifo_we0;
reg   [7:0] img_fifo_d0;
wire   [7:0] img_fifo_q0;
reg   [15:0] backimg_address0;
reg    backimg_ce0;
reg    backimg_we0;
wire   [7:0] backimg_d0;
reg   [8:0] lineBuff_val_0_address0;
reg    lineBuff_val_0_ce0;
reg    lineBuff_val_0_we0;
reg   [8:0] lineBuff_val_0_address1;
reg    lineBuff_val_0_ce1;
reg   [8:0] lineBuff_val_1_address0;
reg    lineBuff_val_1_ce0;
reg    lineBuff_val_1_we0;
reg   [8:0] lineBuff_val_1_address1;
reg    lineBuff_val_1_ce1;
reg   [8:0] lineBuff_val_2_address0;
reg    lineBuff_val_2_ce0;
reg    lineBuff_val_2_we0;
reg   [8:0] lineBuff_val_2_address1;
reg    lineBuff_val_2_ce1;
wire    grp_otsu_fu_488_ap_start;
wire   [7:0] grp_otsu_fu_488_histData_address0;
wire    grp_otsu_fu_488_histData_ce0;
reg   [8:0] idxHist_reg_398;
wire   [0:0] exitcond1_fu_493_p2;
reg   [15:0] i_reg_409;
wire    ap_CS_fsm_state6;
reg   [15:0] i2_reg_421;
wire    ap_CS_fsm_state10;
reg   [31:0] ap_phi_mux_idxRow_phi_fu_436_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_col_assign_phi_fu_447_p4;
reg   [31:0] ap_phi_mux_pixProcessed_phi_fu_458_p4;
wire    ap_block_pp0_stage2;
reg   [15:0] ap_phi_mux_i3_phi_fu_470_p4;
reg    grp_otsu_fu_488_ap_start_reg;
wire   [0:0] exitcond2_fu_510_p2;
wire   [63:0] tmp_fu_505_p1;
wire   [63:0] tmp_s_fu_527_p1;
wire   [63:0] tmp_15_fu_532_p1;
wire   [63:0] tmp_16_fu_555_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] tmp_21_fu_664_p1;
wire   [63:0] tmp_47_0_1_fu_677_p1;
wire   [63:0] tmp_47_0_2_fu_690_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] valInWindow_0_minVal_1_fu_710_p1;
wire   [63:0] valInWindow_0_maxVal_1_fu_747_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] valInWindow_0_minVal_3_fu_761_p1;
wire   [63:0] valInWindow_0_maxVal_3_fu_777_p1;
wire    ap_block_pp1_stage0_01001;
wire   [31:0] tmp_14_fu_537_p2;
wire   [7:0] storemerge_fu_569_p3;
wire   [7:0] valOutputFg1_fu_932_p3;
wire   [31:0] tmp_17_fu_560_p1;
wire   [30:0] tmp_22_fu_600_p4;
wire   [30:0] tmp_23_fu_616_p4;
wire   [0:0] icmp_fu_610_p2;
wire   [0:0] icmp3_fu_626_p2;
wire   [31:0] idxRow_2_fu_650_p2;
wire   [0:0] tmp_19_0_1_i_fu_697_p2;
wire   [0:0] tmp_24_0_1_i_fu_715_p2;
wire   [31:0] pixProcessed_1_fu_728_p3;
wire   [0:0] tmp_19_0_2_i_fu_751_p2;
wire   [31:0] valInWindow_0_minVal_2_fu_755_p3;
wire   [0:0] tmp_24_0_2_i_fu_766_p2;
wire   [31:0] valInWindow_0_maxVal_2_fu_771_p3;
wire   [0:0] tmp_19_1_i_fu_782_p2;
wire   [7:0] valInWindow_0_minVal_4_fu_787_p3;
wire   [0:0] tmp_19_1_1_i_fu_794_p2;
wire   [0:0] tmp_24_1_i_fu_806_p2;
wire   [7:0] valInWindow_0_maxVal_4_fu_811_p3;
wire   [0:0] tmp_24_1_1_i_fu_818_p2;
wire   [0:0] tmp_19_1_2_i_fu_830_p2;
wire   [7:0] valInWindow_0_minVal_6_fu_834_p3;
wire   [0:0] tmp_19_2_i_fu_840_p2;
wire   [7:0] valInWindow_0_minVal_7_fu_845_p3;
wire   [0:0] tmp_19_2_1_i_fu_852_p2;
wire   [0:0] tmp_24_1_2_i_fu_864_p2;
wire   [7:0] valInWindow_0_maxVal_6_fu_868_p3;
wire   [0:0] tmp_24_2_i_fu_874_p2;
wire   [7:0] valInWindow_0_maxVal_7_fu_879_p3;
wire   [0:0] tmp_24_2_1_i_fu_886_p2;
wire   [0:0] tmp_19_2_2_i_fu_898_p2;
wire   [0:0] tmp_24_2_2_i_fu_908_p2;
wire   [7:0] valOutputBg_fu_912_p3;
wire   [0:0] phitmp_fu_918_p2;
wire   [7:0] valOutputFg_fu_902_p3;
wire   [7:0] phitmp1_fu_924_p3;
wire    ap_CS_fsm_state25;
reg    ap_block_state25;
reg   [17:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'd1;
#0 inputStream_V_data_V_0_sel_rd = 1'b0;
#0 inputStream_V_data_V_0_sel_wr = 1'b0;
#0 inputStream_V_data_V_0_state = 2'd0;
#0 inputStream_V_dest_V_0_state = 2'd0;
#0 outputStream_V_data_V_1_sel_rd = 1'b0;
#0 outputStream_V_data_V_1_sel_wr = 1'b0;
#0 outputStream_V_data_V_1_state = 2'd0;
#0 outputStream_V_keep_V_1_sel_rd = 1'b0;
#0 outputStream_V_keep_V_1_state = 2'd0;
#0 outputStream_V_strb_V_1_sel_rd = 1'b0;
#0 outputStream_V_strb_V_1_state = 2'd0;
#0 outputStream_V_user_V_1_sel_rd = 1'b0;
#0 outputStream_V_user_V_1_state = 2'd0;
#0 outputStream_V_last_V_1_sel_rd = 1'b0;
#0 outputStream_V_last_V_1_state = 2'd0;
#0 outputStream_V_id_V_1_sel_rd = 1'b0;
#0 outputStream_V_id_V_1_state = 2'd0;
#0 outputStream_V_dest_V_1_sel_rd = 1'b0;
#0 outputStream_V_dest_V_1_state = 2'd0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 grp_otsu_fu_488_ap_start_reg = 1'b0;
end

make_marker_ctrl_bus_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
make_marker_ctrl_bus_s_axi_U(
    .AWVALID(s_axi_ctrl_bus_AWVALID),
    .AWREADY(s_axi_ctrl_bus_AWREADY),
    .AWADDR(s_axi_ctrl_bus_AWADDR),
    .WVALID(s_axi_ctrl_bus_WVALID),
    .WREADY(s_axi_ctrl_bus_WREADY),
    .WDATA(s_axi_ctrl_bus_WDATA),
    .WSTRB(s_axi_ctrl_bus_WSTRB),
    .ARVALID(s_axi_ctrl_bus_ARVALID),
    .ARREADY(s_axi_ctrl_bus_ARREADY),
    .ARADDR(s_axi_ctrl_bus_ARADDR),
    .RVALID(s_axi_ctrl_bus_RVALID),
    .RREADY(s_axi_ctrl_bus_RREADY),
    .RDATA(s_axi_ctrl_bus_RDATA),
    .RRESP(s_axi_ctrl_bus_RRESP),
    .BVALID(s_axi_ctrl_bus_BVALID),
    .BREADY(s_axi_ctrl_bus_BREADY),
    .BRESP(s_axi_ctrl_bus_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

make_marker_histog8j #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
histogram_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(histogram_address0),
    .ce0(histogram_ce0),
    .we0(histogram_we0),
    .d0(histogram_d0),
    .q0(histogram_q0)
);

make_marker_img_fhbi #(
    .DataWidth( 8 ),
    .AddressRange( 64170 ),
    .AddressWidth( 16 ))
img_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(img_fifo_address0),
    .ce0(img_fifo_ce0),
    .we0(img_fifo_we0),
    .d0(img_fifo_d0),
    .q0(img_fifo_q0)
);

make_marker_img_fhbi #(
    .DataWidth( 8 ),
    .AddressRange( 64170 ),
    .AddressWidth( 16 ))
backimg_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(backimg_address0),
    .ce0(backimg_ce0),
    .we0(backimg_we0),
    .d0(backimg_d0),
    .q0(backimg_q0)
);

make_marker_lineBibs #(
    .DataWidth( 8 ),
    .AddressRange( 310 ),
    .AddressWidth( 9 ))
lineBuff_val_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lineBuff_val_0_address0),
    .ce0(lineBuff_val_0_ce0),
    .we0(lineBuff_val_0_we0),
    .d0(lineBuff_val_1_q0),
    .q0(lineBuff_val_0_q0),
    .address1(lineBuff_val_0_address1),
    .ce1(lineBuff_val_0_ce1),
    .q1(lineBuff_val_0_q1)
);

make_marker_lineBibs #(
    .DataWidth( 8 ),
    .AddressRange( 310 ),
    .AddressWidth( 9 ))
lineBuff_val_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lineBuff_val_1_address0),
    .ce0(lineBuff_val_1_ce0),
    .we0(lineBuff_val_1_we0),
    .d0(lineBuff_val_2_q0),
    .q0(lineBuff_val_1_q0),
    .address1(lineBuff_val_1_address1),
    .ce1(lineBuff_val_1_ce1),
    .q1(lineBuff_val_1_q1)
);

make_marker_lineBibs #(
    .DataWidth( 8 ),
    .AddressRange( 310 ),
    .AddressWidth( 9 ))
lineBuff_val_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lineBuff_val_2_address0),
    .ce0(lineBuff_val_2_ce0),
    .we0(lineBuff_val_2_we0),
    .d0(img_fifo_q0),
    .q0(lineBuff_val_2_q0),
    .address1(lineBuff_val_2_address1),
    .ce1(lineBuff_val_2_ce1),
    .q1(lineBuff_val_2_q1)
);

otsu grp_otsu_fu_488(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_otsu_fu_488_ap_start),
    .ap_done(grp_otsu_fu_488_ap_done),
    .ap_idle(grp_otsu_fu_488_ap_idle),
    .ap_ready(grp_otsu_fu_488_ap_ready),
    .histData_address0(grp_otsu_fu_488_histData_address0),
    .histData_ce0(grp_otsu_fu_488_histData_ce0),
    .histData_q0(histogram_q0),
    .ap_return(grp_otsu_fu_488_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state11) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((exitcond3_fu_543_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state11) & (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state11);
        end else if ((((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((exitcond3_fu_543_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state21) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state21)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state21);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp1_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_otsu_fu_488_ap_start_reg <= 1'b0;
    end else begin
        if (((exitcond2_fu_510_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_otsu_fu_488_ap_start_reg <= 1'b1;
        end else if ((grp_otsu_fu_488_ap_ready == 1'b1)) begin
            grp_otsu_fu_488_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inputStream_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inputStream_V_data_V_0_ack_out == 1'b1) & (inputStream_V_data_V_0_vld_out == 1'b1))) begin
            inputStream_V_data_V_0_sel_rd <= ~inputStream_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inputStream_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inputStream_V_data_V_0_ack_in == 1'b1) & (inputStream_V_data_V_0_vld_in == 1'b1))) begin
            inputStream_V_data_V_0_sel_wr <= ~inputStream_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inputStream_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((inputStream_V_data_V_0_state == 2'd2) & (inputStream_V_data_V_0_vld_in == 1'b0)) | ((inputStream_V_data_V_0_state == 2'd3) & (inputStream_V_data_V_0_vld_in == 1'b0) & (inputStream_V_data_V_0_ack_out == 1'b1)))) begin
            inputStream_V_data_V_0_state <= 2'd2;
        end else if ((((inputStream_V_data_V_0_state == 2'd1) & (inputStream_V_data_V_0_ack_out == 1'b0)) | ((inputStream_V_data_V_0_state == 2'd3) & (inputStream_V_data_V_0_ack_out == 1'b0) & (inputStream_V_data_V_0_vld_in == 1'b1)))) begin
            inputStream_V_data_V_0_state <= 2'd1;
        end else if (((~((inputStream_V_data_V_0_vld_in == 1'b0) & (inputStream_V_data_V_0_ack_out == 1'b1)) & ~((inputStream_V_data_V_0_ack_out == 1'b0) & (inputStream_V_data_V_0_vld_in == 1'b1)) & (inputStream_V_data_V_0_state == 2'd3)) | ((inputStream_V_data_V_0_state == 2'd1) & (inputStream_V_data_V_0_ack_out == 1'b1)) | ((inputStream_V_data_V_0_state == 2'd2) & (inputStream_V_data_V_0_vld_in == 1'b1)))) begin
            inputStream_V_data_V_0_state <= 2'd3;
        end else begin
            inputStream_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inputStream_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((inputStream_V_dest_V_0_state == 2'd2) & (inputStream_V_dest_V_0_vld_in == 1'b0)) | ((inputStream_V_dest_V_0_state == 2'd3) & (inputStream_V_dest_V_0_vld_in == 1'b0) & (inputStream_V_dest_V_0_ack_out == 1'b1)))) begin
            inputStream_V_dest_V_0_state <= 2'd2;
        end else if ((((inputStream_V_dest_V_0_state == 2'd1) & (inputStream_V_dest_V_0_ack_out == 1'b0)) | ((inputStream_V_dest_V_0_state == 2'd3) & (inputStream_V_dest_V_0_ack_out == 1'b0) & (inputStream_V_dest_V_0_vld_in == 1'b1)))) begin
            inputStream_V_dest_V_0_state <= 2'd1;
        end else if (((~((inputStream_V_dest_V_0_vld_in == 1'b0) & (inputStream_V_dest_V_0_ack_out == 1'b1)) & ~((inputStream_V_dest_V_0_ack_out == 1'b0) & (inputStream_V_dest_V_0_vld_in == 1'b1)) & (inputStream_V_dest_V_0_state == 2'd3)) | ((inputStream_V_dest_V_0_state == 2'd1) & (inputStream_V_dest_V_0_ack_out == 1'b1)) | ((inputStream_V_dest_V_0_state == 2'd2) & (inputStream_V_dest_V_0_vld_in == 1'b1)))) begin
            inputStream_V_dest_V_0_state <= 2'd3;
        end else begin
            inputStream_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outputStream_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outputStream_V_data_V_1_ack_out == 1'b1) & (outputStream_V_data_V_1_vld_out == 1'b1))) begin
            outputStream_V_data_V_1_sel_rd <= ~outputStream_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outputStream_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outputStream_V_data_V_1_ack_in == 1'b1) & (outputStream_V_data_V_1_vld_in == 1'b1))) begin
            outputStream_V_data_V_1_sel_wr <= ~outputStream_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outputStream_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((outputStream_V_data_V_1_state == 2'd2) & (outputStream_V_data_V_1_vld_in == 1'b0)) | ((outputStream_V_data_V_1_state == 2'd3) & (outputStream_V_data_V_1_vld_in == 1'b0) & (outputStream_V_data_V_1_ack_out == 1'b1)))) begin
            outputStream_V_data_V_1_state <= 2'd2;
        end else if ((((outputStream_V_data_V_1_state == 2'd1) & (outputStream_V_data_V_1_ack_out == 1'b0)) | ((outputStream_V_data_V_1_state == 2'd3) & (outputStream_V_data_V_1_ack_out == 1'b0) & (outputStream_V_data_V_1_vld_in == 1'b1)))) begin
            outputStream_V_data_V_1_state <= 2'd1;
        end else if (((~((outputStream_V_data_V_1_vld_in == 1'b0) & (outputStream_V_data_V_1_ack_out == 1'b1)) & ~((outputStream_V_data_V_1_ack_out == 1'b0) & (outputStream_V_data_V_1_vld_in == 1'b1)) & (outputStream_V_data_V_1_state == 2'd3)) | ((outputStream_V_data_V_1_state == 2'd1) & (outputStream_V_data_V_1_ack_out == 1'b1)) | ((outputStream_V_data_V_1_state == 2'd2) & (outputStream_V_data_V_1_vld_in == 1'b1)))) begin
            outputStream_V_data_V_1_state <= 2'd3;
        end else begin
            outputStream_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outputStream_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outputStream_V_dest_V_1_ack_out == 1'b1) & (outputStream_V_dest_V_1_vld_out == 1'b1))) begin
            outputStream_V_dest_V_1_sel_rd <= ~outputStream_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outputStream_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((outputStream_V_dest_V_1_state == 2'd2) & (outputStream_V_dest_V_1_vld_in == 1'b0)) | ((outputStream_V_dest_V_1_state == 2'd3) & (outputStream_V_dest_V_1_vld_in == 1'b0) & (outputStream_V_dest_V_1_ack_out == 1'b1)))) begin
            outputStream_V_dest_V_1_state <= 2'd2;
        end else if ((((outputStream_V_dest_V_1_state == 2'd1) & (outputStream_V_dest_V_1_ack_out == 1'b0)) | ((outputStream_V_dest_V_1_state == 2'd3) & (outputStream_V_dest_V_1_ack_out == 1'b0) & (outputStream_V_dest_V_1_vld_in == 1'b1)))) begin
            outputStream_V_dest_V_1_state <= 2'd1;
        end else if (((~((outputStream_V_dest_V_1_vld_in == 1'b0) & (outputStream_V_dest_V_1_ack_out == 1'b1)) & ~((outputStream_V_dest_V_1_ack_out == 1'b0) & (outputStream_V_dest_V_1_vld_in == 1'b1)) & (outputStream_V_dest_V_1_state == 2'd3)) | ((outputStream_V_dest_V_1_state == 2'd1) & (outputStream_V_dest_V_1_ack_out == 1'b1)) | ((outputStream_V_dest_V_1_state == 2'd2) & (outputStream_V_dest_V_1_vld_in == 1'b1)))) begin
            outputStream_V_dest_V_1_state <= 2'd3;
        end else begin
            outputStream_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outputStream_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outputStream_V_id_V_1_ack_out == 1'b1) & (outputStream_V_id_V_1_vld_out == 1'b1))) begin
            outputStream_V_id_V_1_sel_rd <= ~outputStream_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outputStream_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((outputStream_V_id_V_1_state == 2'd2) & (outputStream_V_id_V_1_vld_in == 1'b0)) | ((outputStream_V_id_V_1_state == 2'd3) & (outputStream_V_id_V_1_vld_in == 1'b0) & (outputStream_V_id_V_1_ack_out == 1'b1)))) begin
            outputStream_V_id_V_1_state <= 2'd2;
        end else if ((((outputStream_V_id_V_1_state == 2'd1) & (outputStream_V_id_V_1_ack_out == 1'b0)) | ((outputStream_V_id_V_1_state == 2'd3) & (outputStream_V_id_V_1_ack_out == 1'b0) & (outputStream_V_id_V_1_vld_in == 1'b1)))) begin
            outputStream_V_id_V_1_state <= 2'd1;
        end else if (((~((outputStream_V_id_V_1_vld_in == 1'b0) & (outputStream_V_id_V_1_ack_out == 1'b1)) & ~((outputStream_V_id_V_1_ack_out == 1'b0) & (outputStream_V_id_V_1_vld_in == 1'b1)) & (outputStream_V_id_V_1_state == 2'd3)) | ((outputStream_V_id_V_1_state == 2'd1) & (outputStream_V_id_V_1_ack_out == 1'b1)) | ((outputStream_V_id_V_1_state == 2'd2) & (outputStream_V_id_V_1_vld_in == 1'b1)))) begin
            outputStream_V_id_V_1_state <= 2'd3;
        end else begin
            outputStream_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outputStream_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outputStream_V_keep_V_1_ack_out == 1'b1) & (outputStream_V_keep_V_1_vld_out == 1'b1))) begin
            outputStream_V_keep_V_1_sel_rd <= ~outputStream_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outputStream_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((outputStream_V_keep_V_1_state == 2'd2) & (outputStream_V_keep_V_1_vld_in == 1'b0)) | ((outputStream_V_keep_V_1_state == 2'd3) & (outputStream_V_keep_V_1_vld_in == 1'b0) & (outputStream_V_keep_V_1_ack_out == 1'b1)))) begin
            outputStream_V_keep_V_1_state <= 2'd2;
        end else if ((((outputStream_V_keep_V_1_state == 2'd1) & (outputStream_V_keep_V_1_ack_out == 1'b0)) | ((outputStream_V_keep_V_1_state == 2'd3) & (outputStream_V_keep_V_1_ack_out == 1'b0) & (outputStream_V_keep_V_1_vld_in == 1'b1)))) begin
            outputStream_V_keep_V_1_state <= 2'd1;
        end else if (((~((outputStream_V_keep_V_1_vld_in == 1'b0) & (outputStream_V_keep_V_1_ack_out == 1'b1)) & ~((outputStream_V_keep_V_1_ack_out == 1'b0) & (outputStream_V_keep_V_1_vld_in == 1'b1)) & (outputStream_V_keep_V_1_state == 2'd3)) | ((outputStream_V_keep_V_1_state == 2'd1) & (outputStream_V_keep_V_1_ack_out == 1'b1)) | ((outputStream_V_keep_V_1_state == 2'd2) & (outputStream_V_keep_V_1_vld_in == 1'b1)))) begin
            outputStream_V_keep_V_1_state <= 2'd3;
        end else begin
            outputStream_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outputStream_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outputStream_V_last_V_1_ack_out == 1'b1) & (outputStream_V_last_V_1_vld_out == 1'b1))) begin
            outputStream_V_last_V_1_sel_rd <= ~outputStream_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outputStream_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((outputStream_V_last_V_1_state == 2'd2) & (outputStream_V_last_V_1_vld_in == 1'b0)) | ((outputStream_V_last_V_1_state == 2'd3) & (outputStream_V_last_V_1_vld_in == 1'b0) & (outputStream_V_last_V_1_ack_out == 1'b1)))) begin
            outputStream_V_last_V_1_state <= 2'd2;
        end else if ((((outputStream_V_last_V_1_state == 2'd1) & (outputStream_V_last_V_1_ack_out == 1'b0)) | ((outputStream_V_last_V_1_state == 2'd3) & (outputStream_V_last_V_1_ack_out == 1'b0) & (outputStream_V_last_V_1_vld_in == 1'b1)))) begin
            outputStream_V_last_V_1_state <= 2'd1;
        end else if (((~((outputStream_V_last_V_1_vld_in == 1'b0) & (outputStream_V_last_V_1_ack_out == 1'b1)) & ~((outputStream_V_last_V_1_ack_out == 1'b0) & (outputStream_V_last_V_1_vld_in == 1'b1)) & (outputStream_V_last_V_1_state == 2'd3)) | ((outputStream_V_last_V_1_state == 2'd1) & (outputStream_V_last_V_1_ack_out == 1'b1)) | ((outputStream_V_last_V_1_state == 2'd2) & (outputStream_V_last_V_1_vld_in == 1'b1)))) begin
            outputStream_V_last_V_1_state <= 2'd3;
        end else begin
            outputStream_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outputStream_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outputStream_V_strb_V_1_ack_out == 1'b1) & (outputStream_V_strb_V_1_vld_out == 1'b1))) begin
            outputStream_V_strb_V_1_sel_rd <= ~outputStream_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outputStream_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((outputStream_V_strb_V_1_state == 2'd2) & (outputStream_V_strb_V_1_vld_in == 1'b0)) | ((outputStream_V_strb_V_1_state == 2'd3) & (outputStream_V_strb_V_1_vld_in == 1'b0) & (outputStream_V_strb_V_1_ack_out == 1'b1)))) begin
            outputStream_V_strb_V_1_state <= 2'd2;
        end else if ((((outputStream_V_strb_V_1_state == 2'd1) & (outputStream_V_strb_V_1_ack_out == 1'b0)) | ((outputStream_V_strb_V_1_state == 2'd3) & (outputStream_V_strb_V_1_ack_out == 1'b0) & (outputStream_V_strb_V_1_vld_in == 1'b1)))) begin
            outputStream_V_strb_V_1_state <= 2'd1;
        end else if (((~((outputStream_V_strb_V_1_vld_in == 1'b0) & (outputStream_V_strb_V_1_ack_out == 1'b1)) & ~((outputStream_V_strb_V_1_ack_out == 1'b0) & (outputStream_V_strb_V_1_vld_in == 1'b1)) & (outputStream_V_strb_V_1_state == 2'd3)) | ((outputStream_V_strb_V_1_state == 2'd1) & (outputStream_V_strb_V_1_ack_out == 1'b1)) | ((outputStream_V_strb_V_1_state == 2'd2) & (outputStream_V_strb_V_1_vld_in == 1'b1)))) begin
            outputStream_V_strb_V_1_state <= 2'd3;
        end else begin
            outputStream_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outputStream_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outputStream_V_user_V_1_ack_out == 1'b1) & (outputStream_V_user_V_1_vld_out == 1'b1))) begin
            outputStream_V_user_V_1_sel_rd <= ~outputStream_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outputStream_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((outputStream_V_user_V_1_state == 2'd2) & (outputStream_V_user_V_1_vld_in == 1'b0)) | ((outputStream_V_user_V_1_state == 2'd3) & (outputStream_V_user_V_1_vld_in == 1'b0) & (outputStream_V_user_V_1_ack_out == 1'b1)))) begin
            outputStream_V_user_V_1_state <= 2'd2;
        end else if ((((outputStream_V_user_V_1_state == 2'd1) & (outputStream_V_user_V_1_ack_out == 1'b0)) | ((outputStream_V_user_V_1_state == 2'd3) & (outputStream_V_user_V_1_ack_out == 1'b0) & (outputStream_V_user_V_1_vld_in == 1'b1)))) begin
            outputStream_V_user_V_1_state <= 2'd1;
        end else if (((~((outputStream_V_user_V_1_vld_in == 1'b0) & (outputStream_V_user_V_1_ack_out == 1'b1)) & ~((outputStream_V_user_V_1_ack_out == 1'b0) & (outputStream_V_user_V_1_vld_in == 1'b1)) & (outputStream_V_user_V_1_state == 2'd3)) | ((outputStream_V_user_V_1_state == 2'd1) & (outputStream_V_user_V_1_ack_out == 1'b1)) | ((outputStream_V_user_V_1_state == 2'd2) & (outputStream_V_user_V_1_vld_in == 1'b1)))) begin
            outputStream_V_user_V_1_state <= 2'd3;
        end else begin
            outputStream_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_543_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        col_assign_reg_443 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond4_reg_1021 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        col_assign_reg_443 <= idxCol_1_reg_1184;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i2_reg_421 <= i_2_reg_1006;
    end else if (((grp_otsu_fu_488_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        i2_reg_421 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_543_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        i3_reg_466 <= 16'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond4_reg_1021 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i3_reg_466 <= i_4_reg_1025;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        i4_reg_477 <= 16'd0;
    end else if (((exitcond_fu_948_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i4_reg_477 <= i_3_fu_954_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_493_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_409 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        i_reg_409 <= i_1_reg_982;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_493_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        idxHist_reg_398 <= idxHist_1_fu_499_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        idxHist_reg_398 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_543_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        idxRow_reg_432 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond4_reg_1021 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        idxRow_reg_432 <= idxRow_1_reg_1073;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_543_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        pixProcessed_reg_454 <= 32'd0;
    end else if (((exitcond4_reg_1021_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        pixProcessed_reg_454 <= pixProcessed_2_reg_1189;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_reg_1021 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        col_assign_1_0_2_reg_1115 <= col_assign_1_0_2_fu_684_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond4_reg_1021 <= exitcond4_fu_577_p2;
        exitcond4_reg_1021_pp0_iter1_reg <= exitcond4_reg_1021;
        img_fifo_addr_2_reg_1035_pp0_iter1_reg <= img_fifo_addr_2_reg_1035;
        or_cond_reg_1055_pp0_iter1_reg <= or_cond_reg_1055;
        tmp_19_reg_1030_pp0_iter1_reg[15 : 0] <= tmp_19_reg_1030[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((inputStream_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        histogram_addr_1_reg_987 <= tmp_s_fu_527_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        histogram_load_reg_992 <= histogram_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_1_reg_982 <= i_1_fu_516_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_2_reg_1006 <= i_2_fu_549_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_4_reg_1025 <= i_4_fu_583_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_reg_1021 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        idxCol_1_reg_1184 <= idxCol_1_fu_734_p3;
        lineBuff_val_1_load_1_reg_1126 <= lineBuff_val_1_q0;
        lineBuff_val_1_load_2_reg_1134 <= lineBuff_val_1_q1;
        lineBuff_val_2_load_1_reg_1147 <= lineBuff_val_2_q0;
        lineBuff_val_2_load_2_reg_1155 <= lineBuff_val_2_q1;
        pixProcessed_2_reg_1189 <= pixProcessed_2_fu_740_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond4_fu_577_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        idxCol_reg_1068 <= idxCol_fu_644_p2;
        img_fifo_addr_2_reg_1035 <= tmp_19_fu_589_p1;
        lineBuff_val_1_addr_reg_1045 <= tmp_20_fu_594_p1;
        lineBuff_val_2_addr_reg_1050 <= tmp_20_fu_594_p1;
        or_cond_reg_1055 <= or_cond_fu_632_p2;
        tmp_19_reg_1030[15 : 0] <= tmp_19_fu_589_p1[15 : 0];
        tmp_20_reg_1040[31 : 0] <= tmp_20_fu_594_p1[31 : 0];
        tmp_26_reg_1062 <= tmp_26_fu_638_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond4_fu_577_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        idxRow_1_reg_1073 <= idxRow_1_fu_656_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_543_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        img_fifo_addr_1_reg_1011 <= tmp_16_fu_555_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((inputStream_V_data_V_0_load_A == 1'b1)) begin
        inputStream_V_data_V_0_payload_A <= inputStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inputStream_V_data_V_0_load_B == 1'b1)) begin
        inputStream_V_data_V_0_payload_B <= inputStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_reg_1021 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        lineBuff_val_0_load_2_reg_1194 <= lineBuff_val_0_q1;
        lineBuff_val_1_load_3_reg_1200 <= lineBuff_val_1_q1;
        lineBuff_val_2_load_3_reg_1208 <= lineBuff_val_2_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond_reg_1055 == 1'd1) & (exitcond4_reg_1021 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        lineBuff_val_0_load_3_reg_1216 <= lineBuff_val_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((outputStream_V_data_V_1_load_A == 1'b1)) begin
        outputStream_V_data_V_1_payload_A <= outputStream_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outputStream_V_data_V_1_load_B == 1'b1)) begin
        outputStream_V_data_V_1_payload_B <= outputStream_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_reg_1021 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        pixProcessed_3_reg_1083 <= pixProcessed_3_fu_671_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_otsu_fu_488_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        t_reg_997 <= grp_otsu_fu_488_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_18_reg_1016 <= tmp_18_fu_564_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_948_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tmp_24_reg_1269[15 : 0] <= tmp_24_fu_960_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tmp_25_reg_1279 <= tmp_25_fu_965_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        tmp_25_reg_1279_pp1_iter2_reg <= tmp_25_reg_1279;
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond_reg_1055_pp0_iter1_reg == 1'd1) & (exitcond4_reg_1021_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        valInWindow_0_maxVal_5_reg_1242 <= valInWindow_0_maxVal_5_fu_823_p3;
        valInWindow_0_minVal_5_reg_1236 <= valInWindow_0_minVal_5_fu_799_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond_reg_1055_pp0_iter1_reg == 1'd1) & (exitcond4_reg_1021_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        valInWindow_0_maxVal_8_reg_1254 <= valInWindow_0_maxVal_8_fu_891_p3;
        valInWindow_0_minVal_8_reg_1248 <= valInWindow_0_minVal_8_fu_857_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond_reg_1055 == 1'd1) & (exitcond4_reg_1021 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        valInWindow_0_maxVal_reg_1178 <= valInWindow_0_maxVal_fu_721_p3;
        valInWindow_0_minVal_reg_1168 <= valInWindow_0_minVal_fu_703_p3;
    end
end

always @ (*) begin
    if ((exitcond4_fu_577_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state11 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state11 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_fu_948_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state21 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state21 = 1'b0;
    end
end

always @ (*) begin
    if ((~((outputStream_V_dest_V_1_ack_in == 1'b0) | (outputStream_V_id_V_1_ack_in == 1'b0) | (outputStream_V_last_V_1_ack_in == 1'b0) | (outputStream_V_user_V_1_ack_in == 1'b0) | (outputStream_V_strb_V_1_ack_in == 1'b0) | (outputStream_V_keep_V_1_ack_in == 1'b0) | (outputStream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state25))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond4_reg_1021 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_col_assign_phi_fu_447_p4 = idxCol_1_reg_1184;
    end else begin
        ap_phi_mux_col_assign_phi_fu_447_p4 = col_assign_reg_443;
    end
end

always @ (*) begin
    if (((exitcond4_reg_1021 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i3_phi_fu_470_p4 = i_4_reg_1025;
    end else begin
        ap_phi_mux_i3_phi_fu_470_p4 = i3_reg_466;
    end
end

always @ (*) begin
    if (((exitcond4_reg_1021 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_idxRow_phi_fu_436_p4 = idxRow_1_reg_1073;
    end else begin
        ap_phi_mux_idxRow_phi_fu_436_p4 = idxRow_reg_432;
    end
end

always @ (*) begin
    if (((exitcond4_reg_1021_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        ap_phi_mux_pixProcessed_phi_fu_458_p4 = pixProcessed_2_reg_1189;
    end else begin
        ap_phi_mux_pixProcessed_phi_fu_458_p4 = pixProcessed_reg_454;
    end
end

always @ (*) begin
    if ((~((outputStream_V_dest_V_1_ack_in == 1'b0) | (outputStream_V_id_V_1_ack_in == 1'b0) | (outputStream_V_last_V_1_ack_in == 1'b0) | (outputStream_V_user_V_1_ack_in == 1'b0) | (outputStream_V_strb_V_1_ack_in == 1'b0) | (outputStream_V_keep_V_1_ack_in == 1'b0) | (outputStream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state25))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        backimg_address0 = tmp_24_reg_1269;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        backimg_address0 = tmp_19_reg_1030_pp0_iter1_reg;
    end else begin
        backimg_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        backimg_ce0 = 1'b1;
    end else begin
        backimg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond4_reg_1021_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        backimg_we0 = 1'b1;
    end else begin
        backimg_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        histogram_address0 = histogram_addr_1_reg_987;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        histogram_address0 = tmp_s_fu_527_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        histogram_address0 = tmp_fu_505_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        histogram_address0 = grp_otsu_fu_488_histData_address0;
    end else begin
        histogram_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | ((inputStream_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4)))) begin
        histogram_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        histogram_ce0 = grp_otsu_fu_488_histData_ce0;
    end else begin
        histogram_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        histogram_d0 = tmp_14_fu_537_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        histogram_d0 = 32'd0;
    end else begin
        histogram_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((exitcond1_fu_493_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        histogram_we0 = 1'b1;
    end else begin
        histogram_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        img_fifo_address0 = tmp_24_fu_960_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        img_fifo_address0 = img_fifo_addr_2_reg_1035_pp0_iter1_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        img_fifo_address0 = tmp_19_fu_589_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        img_fifo_address0 = img_fifo_addr_1_reg_1011;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        img_fifo_address0 = tmp_16_fu_555_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        img_fifo_address0 = tmp_15_fu_532_p1;
    end else begin
        img_fifo_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state10) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((inputStream_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        img_fifo_ce0 = 1'b1;
    end else begin
        img_fifo_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        img_fifo_d0 = valOutputFg1_fu_932_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        img_fifo_d0 = storemerge_fu_569_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        img_fifo_d0 = inputStream_V_data_V_0_data_out;
    end else begin
        img_fifo_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((inputStream_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((exitcond4_reg_1021_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        img_fifo_we0 = 1'b1;
    end else begin
        img_fifo_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        inputStream_TDATA_blk_n = inputStream_V_data_V_0_state[1'd0];
    end else begin
        inputStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((inputStream_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        inputStream_V_data_V_0_ack_out = 1'b1;
    end else begin
        inputStream_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inputStream_V_data_V_0_sel == 1'b1)) begin
        inputStream_V_data_V_0_data_out = inputStream_V_data_V_0_payload_B;
    end else begin
        inputStream_V_data_V_0_data_out = inputStream_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((inputStream_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        inputStream_V_dest_V_0_ack_out = 1'b1;
    end else begin
        inputStream_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        lineBuff_val_0_address0 = valInWindow_0_minVal_3_fu_761_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3))) begin
        lineBuff_val_0_address0 = valInWindow_0_minVal_1_fu_710_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2))) begin
        lineBuff_val_0_address0 = tmp_47_0_1_fu_677_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        lineBuff_val_0_address0 = tmp_20_reg_1040;
    end else begin
        lineBuff_val_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        lineBuff_val_0_address1 = valInWindow_0_maxVal_3_fu_777_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4))) begin
        lineBuff_val_0_address1 = valInWindow_0_maxVal_1_fu_747_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3))) begin
        lineBuff_val_0_address1 = tmp_47_0_2_fu_690_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2))) begin
        lineBuff_val_0_address1 = tmp_21_fu_664_p1;
    end else begin
        lineBuff_val_0_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        lineBuff_val_0_ce0 = 1'b1;
    end else begin
        lineBuff_val_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        lineBuff_val_0_ce1 = 1'b1;
    end else begin
        lineBuff_val_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond4_reg_1021 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        lineBuff_val_0_we0 = 1'b1;
    end else begin
        lineBuff_val_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            lineBuff_val_1_address0 = tmp_21_fu_664_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            lineBuff_val_1_address0 = lineBuff_val_1_addr_reg_1045;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            lineBuff_val_1_address0 = tmp_20_fu_594_p1;
        end else begin
            lineBuff_val_1_address0 = 'bx;
        end
    end else begin
        lineBuff_val_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            lineBuff_val_1_address1 = tmp_47_0_2_fu_690_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            lineBuff_val_1_address1 = tmp_47_0_1_fu_677_p1;
        end else begin
            lineBuff_val_1_address1 = 'bx;
        end
    end else begin
        lineBuff_val_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        lineBuff_val_1_ce0 = 1'b1;
    end else begin
        lineBuff_val_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        lineBuff_val_1_ce1 = 1'b1;
    end else begin
        lineBuff_val_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond4_reg_1021 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        lineBuff_val_1_we0 = 1'b1;
    end else begin
        lineBuff_val_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            lineBuff_val_2_address0 = tmp_21_fu_664_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            lineBuff_val_2_address0 = lineBuff_val_2_addr_reg_1050;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            lineBuff_val_2_address0 = tmp_20_fu_594_p1;
        end else begin
            lineBuff_val_2_address0 = 'bx;
        end
    end else begin
        lineBuff_val_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            lineBuff_val_2_address1 = tmp_47_0_2_fu_690_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            lineBuff_val_2_address1 = tmp_47_0_1_fu_677_p1;
        end else begin
            lineBuff_val_2_address1 = 'bx;
        end
    end else begin
        lineBuff_val_2_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        lineBuff_val_2_ce0 = 1'b1;
    end else begin
        lineBuff_val_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        lineBuff_val_2_ce1 = 1'b1;
    end else begin
        lineBuff_val_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond4_reg_1021 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        lineBuff_val_2_we0 = 1'b1;
    end else begin
        lineBuff_val_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0) & (tmp_25_reg_1279_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0) & (tmp_25_reg_1279_pp1_iter2_reg == 1'd1) & (ap_enable_reg_pp1_iter3 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0) & (tmp_25_reg_1279 == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0) & (tmp_25_reg_1279 == 1'd1) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        outputStream_TDATA_blk_n = outputStream_V_data_V_1_state[1'd1];
    end else begin
        outputStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_01001))) begin
        if ((tmp_25_reg_1279 == 1'd1)) begin
            outputStream_V_data_V_1_data_in = 8'd255;
        end else if ((tmp_25_reg_1279 == 1'd0)) begin
            outputStream_V_data_V_1_data_in = backimg_q0;
        end else begin
            outputStream_V_data_V_1_data_in = 'bx;
        end
    end else begin
        outputStream_V_data_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((outputStream_V_data_V_1_sel == 1'b1)) begin
        outputStream_V_data_V_1_data_out = outputStream_V_data_V_1_payload_B;
    end else begin
        outputStream_V_data_V_1_data_out = outputStream_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((tmp_25_reg_1279 == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((tmp_25_reg_1279 == 1'd1) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        outputStream_V_data_V_1_vld_in = 1'b1;
    end else begin
        outputStream_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_25_reg_1279 == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((tmp_25_reg_1279 == 1'd1) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        outputStream_V_dest_V_1_vld_in = 1'b1;
    end else begin
        outputStream_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_25_reg_1279 == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((tmp_25_reg_1279 == 1'd1) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        outputStream_V_id_V_1_vld_in = 1'b1;
    end else begin
        outputStream_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_25_reg_1279 == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((tmp_25_reg_1279 == 1'd1) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        outputStream_V_keep_V_1_vld_in = 1'b1;
    end else begin
        outputStream_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_25_reg_1279 == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((tmp_25_reg_1279 == 1'd1) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        outputStream_V_last_V_1_vld_in = 1'b1;
    end else begin
        outputStream_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_25_reg_1279 == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((tmp_25_reg_1279 == 1'd1) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        outputStream_V_strb_V_1_vld_in = 1'b1;
    end else begin
        outputStream_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_25_reg_1279 == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((tmp_25_reg_1279 == 1'd1) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        outputStream_V_user_V_1_vld_in = 1'b1;
    end else begin
        outputStream_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_493_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond2_fu_510_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((inputStream_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state7 : begin
            if (((grp_otsu_fu_488_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((exitcond3_fu_543_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond4_fu_577_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((exitcond4_fu_577_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((exitcond_fu_948_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((exitcond_fu_948_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state25 : begin
            if ((~((outputStream_V_dest_V_1_ack_in == 1'b0) | (outputStream_V_id_V_1_ack_in == 1'b0) | (outputStream_V_last_V_1_ack_in == 1'b0) | (outputStream_V_user_V_1_ack_in == 1'b0) | (outputStream_V_strb_V_1_ack_in == 1'b0) | (outputStream_V_keep_V_1_ack_in == 1'b0) | (outputStream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((1'b1 == ap_block_state24_io) & (ap_enable_reg_pp1_iter3 == 1'b1)) | ((1'b1 == ap_block_state23_io) & (ap_enable_reg_pp1_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((1'b1 == ap_block_state24_io) & (ap_enable_reg_pp1_iter3 == 1'b1)) | ((1'b1 == ap_block_state23_io) & (ap_enable_reg_pp1_iter2 == 1'b1)));
end

assign ap_block_state11_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state23_io = (((tmp_25_reg_1279 == 1'd0) & (outputStream_V_data_V_1_ack_in == 1'b0)) | ((tmp_25_reg_1279 == 1'd1) & (outputStream_V_data_V_1_ack_in == 1'b0)));
end

assign ap_block_state23_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state24_io = (((tmp_25_reg_1279_pp1_iter2_reg == 1'd0) & (outputStream_V_data_V_1_ack_in == 1'b0)) | ((tmp_25_reg_1279_pp1_iter2_reg == 1'd1) & (outputStream_V_data_V_1_ack_in == 1'b0)));
end

assign ap_block_state24_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state25 = ((outputStream_V_dest_V_1_ack_in == 1'b0) | (outputStream_V_id_V_1_ack_in == 1'b0) | (outputStream_V_last_V_1_ack_in == 1'b0) | (outputStream_V_user_V_1_ack_in == 1'b0) | (outputStream_V_strb_V_1_ack_in == 1'b0) | (outputStream_V_keep_V_1_ack_in == 1'b0) | (outputStream_V_data_V_1_ack_in == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign backimg_d0 = ((or_cond_reg_1055_pp0_iter1_reg[0:0] === 1'b1) ? phitmp1_fu_924_p3 : 8'd128);

assign col_assign_1_0_2_fu_684_p2 = (pixProcessed_reg_454 + 32'd2);

assign exitcond1_fu_493_p2 = ((idxHist_reg_398 == 9'd256) ? 1'b1 : 1'b0);

assign exitcond2_fu_510_p2 = ((i_reg_409 == 16'd64170) ? 1'b1 : 1'b0);

assign exitcond3_fu_543_p2 = ((i2_reg_421 == 16'd64170) ? 1'b1 : 1'b0);

assign exitcond4_fu_577_p2 = ((ap_phi_mux_i3_phi_fu_470_p4 == 16'd64170) ? 1'b1 : 1'b0);

assign exitcond_fu_948_p2 = ((i4_reg_477 == 16'd64170) ? 1'b1 : 1'b0);

assign grp_otsu_fu_488_ap_start = grp_otsu_fu_488_ap_start_reg;

assign i_1_fu_516_p2 = (i_reg_409 + 16'd1);

assign i_2_fu_549_p2 = (i2_reg_421 + 16'd1);

assign i_3_fu_954_p2 = (i4_reg_477 + 16'd1);

assign i_4_fu_583_p2 = (ap_phi_mux_i3_phi_fu_470_p4 + 16'd1);

assign icmp3_fu_626_p2 = (($signed(tmp_23_fu_616_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_fu_610_p2 = (($signed(tmp_22_fu_600_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign idxCol_1_fu_734_p3 = ((tmp_26_reg_1062[0:0] === 1'b1) ? idxCol_reg_1068 : 32'd0);

assign idxCol_fu_644_p2 = (ap_phi_mux_col_assign_phi_fu_447_p4 + 32'd1);

assign idxHist_1_fu_499_p2 = (idxHist_reg_398 + 9'd1);

assign idxRow_1_fu_656_p3 = ((tmp_26_fu_638_p2[0:0] === 1'b1) ? ap_phi_mux_idxRow_phi_fu_436_p4 : idxRow_2_fu_650_p2);

assign idxRow_2_fu_650_p2 = (ap_phi_mux_idxRow_phi_fu_436_p4 + 32'd1);

assign inputStream_TREADY = inputStream_V_dest_V_0_state[1'd1];

assign inputStream_V_data_V_0_ack_in = inputStream_V_data_V_0_state[1'd1];

assign inputStream_V_data_V_0_load_A = (inputStream_V_data_V_0_state_cmp_full & ~inputStream_V_data_V_0_sel_wr);

assign inputStream_V_data_V_0_load_B = (inputStream_V_data_V_0_state_cmp_full & inputStream_V_data_V_0_sel_wr);

assign inputStream_V_data_V_0_sel = inputStream_V_data_V_0_sel_rd;

assign inputStream_V_data_V_0_state_cmp_full = ((inputStream_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inputStream_V_data_V_0_vld_in = inputStream_TVALID;

assign inputStream_V_data_V_0_vld_out = inputStream_V_data_V_0_state[1'd0];

assign inputStream_V_dest_V_0_vld_in = inputStream_TVALID;

assign or_cond_fu_632_p2 = (icmp_fu_610_p2 & icmp3_fu_626_p2);

assign outputStream_TDATA = outputStream_V_data_V_1_data_out;

assign outputStream_TDEST = outputStream_V_dest_V_1_data_out;

assign outputStream_TID = outputStream_V_id_V_1_data_out;

assign outputStream_TKEEP = outputStream_V_keep_V_1_data_out;

assign outputStream_TLAST = outputStream_V_last_V_1_data_out;

assign outputStream_TSTRB = outputStream_V_strb_V_1_data_out;

assign outputStream_TUSER = outputStream_V_user_V_1_data_out;

assign outputStream_TVALID = outputStream_V_dest_V_1_state[1'd0];

assign outputStream_V_data_V_1_ack_in = outputStream_V_data_V_1_state[1'd1];

assign outputStream_V_data_V_1_ack_out = outputStream_TREADY;

assign outputStream_V_data_V_1_load_A = (outputStream_V_data_V_1_state_cmp_full & ~outputStream_V_data_V_1_sel_wr);

assign outputStream_V_data_V_1_load_B = (outputStream_V_data_V_1_state_cmp_full & outputStream_V_data_V_1_sel_wr);

assign outputStream_V_data_V_1_sel = outputStream_V_data_V_1_sel_rd;

assign outputStream_V_data_V_1_state_cmp_full = ((outputStream_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outputStream_V_data_V_1_vld_out = outputStream_V_data_V_1_state[1'd0];

assign outputStream_V_dest_V_1_ack_in = outputStream_V_dest_V_1_state[1'd1];

assign outputStream_V_dest_V_1_ack_out = outputStream_TREADY;

assign outputStream_V_dest_V_1_data_out = 6'd0;

assign outputStream_V_dest_V_1_sel = outputStream_V_dest_V_1_sel_rd;

assign outputStream_V_dest_V_1_vld_out = outputStream_V_dest_V_1_state[1'd0];

assign outputStream_V_id_V_1_ack_in = outputStream_V_id_V_1_state[1'd1];

assign outputStream_V_id_V_1_ack_out = outputStream_TREADY;

assign outputStream_V_id_V_1_data_out = 2'd0;

assign outputStream_V_id_V_1_sel = outputStream_V_id_V_1_sel_rd;

assign outputStream_V_id_V_1_vld_out = outputStream_V_id_V_1_state[1'd0];

assign outputStream_V_keep_V_1_ack_in = outputStream_V_keep_V_1_state[1'd1];

assign outputStream_V_keep_V_1_ack_out = outputStream_TREADY;

assign outputStream_V_keep_V_1_data_out = 1'd1;

assign outputStream_V_keep_V_1_sel = outputStream_V_keep_V_1_sel_rd;

assign outputStream_V_keep_V_1_vld_out = outputStream_V_keep_V_1_state[1'd0];

assign outputStream_V_last_V_1_ack_in = outputStream_V_last_V_1_state[1'd1];

assign outputStream_V_last_V_1_ack_out = outputStream_TREADY;

assign outputStream_V_last_V_1_data_out = 1'd0;

assign outputStream_V_last_V_1_sel = outputStream_V_last_V_1_sel_rd;

assign outputStream_V_last_V_1_vld_out = outputStream_V_last_V_1_state[1'd0];

assign outputStream_V_strb_V_1_ack_in = outputStream_V_strb_V_1_state[1'd1];

assign outputStream_V_strb_V_1_ack_out = outputStream_TREADY;

assign outputStream_V_strb_V_1_data_out = 1'd1;

assign outputStream_V_strb_V_1_sel = outputStream_V_strb_V_1_sel_rd;

assign outputStream_V_strb_V_1_vld_out = outputStream_V_strb_V_1_state[1'd0];

assign outputStream_V_user_V_1_ack_in = outputStream_V_user_V_1_state[1'd1];

assign outputStream_V_user_V_1_ack_out = outputStream_TREADY;

assign outputStream_V_user_V_1_data_out = 5'd1;

assign outputStream_V_user_V_1_sel = outputStream_V_user_V_1_sel_rd;

assign outputStream_V_user_V_1_vld_out = outputStream_V_user_V_1_state[1'd0];

assign phitmp1_fu_924_p3 = ((phitmp_fu_918_p2[0:0] === 1'b1) ? 8'd128 : 8'd0);

assign phitmp_fu_918_p2 = ((valOutputBg_fu_912_p3 == 8'd0) ? 1'b1 : 1'b0);

assign pixProcessed_1_fu_728_p3 = ((or_cond_reg_1055[0:0] === 1'b1) ? pixProcessed_3_reg_1083 : pixProcessed_reg_454);

assign pixProcessed_2_fu_740_p3 = ((tmp_26_reg_1062[0:0] === 1'b1) ? pixProcessed_1_fu_728_p3 : 32'd0);

assign pixProcessed_3_fu_671_p2 = (ap_phi_mux_pixProcessed_phi_fu_458_p4 + 32'd1);

assign storemerge_fu_569_p3 = ((tmp_18_reg_1016[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign tmp_14_fu_537_p2 = (histogram_load_reg_992 + 32'd1);

assign tmp_15_fu_532_p1 = i_reg_409;

assign tmp_16_fu_555_p1 = i2_reg_421;

assign tmp_17_fu_560_p1 = img_fifo_q0;

assign tmp_18_fu_564_p2 = (($signed(tmp_17_fu_560_p1) > $signed(t_reg_997)) ? 1'b1 : 1'b0);

assign tmp_19_0_1_i_fu_697_p2 = ((lineBuff_val_0_q0 < lineBuff_val_0_q1) ? 1'b1 : 1'b0);

assign tmp_19_0_2_i_fu_751_p2 = ((lineBuff_val_0_load_2_reg_1194 < lineBuff_val_0_load_3_reg_1216) ? 1'b1 : 1'b0);

assign tmp_19_1_1_i_fu_794_p2 = ((lineBuff_val_1_load_2_reg_1134 < valInWindow_0_minVal_4_fu_787_p3) ? 1'b1 : 1'b0);

assign tmp_19_1_2_i_fu_830_p2 = ((lineBuff_val_1_load_3_reg_1200 < valInWindow_0_minVal_5_reg_1236) ? 1'b1 : 1'b0);

assign tmp_19_1_i_fu_782_p2 = ((lineBuff_val_1_load_1_reg_1126 < lineBuff_val_0_q0) ? 1'b1 : 1'b0);

assign tmp_19_2_1_i_fu_852_p2 = ((lineBuff_val_2_load_2_reg_1155 < valInWindow_0_minVal_7_fu_845_p3) ? 1'b1 : 1'b0);

assign tmp_19_2_2_i_fu_898_p2 = ((lineBuff_val_2_load_3_reg_1208 < valInWindow_0_minVal_8_reg_1248) ? 1'b1 : 1'b0);

assign tmp_19_2_i_fu_840_p2 = ((lineBuff_val_2_load_1_reg_1147 < valInWindow_0_minVal_6_fu_834_p3) ? 1'b1 : 1'b0);

assign tmp_19_fu_589_p1 = ap_phi_mux_i3_phi_fu_470_p4;

assign tmp_20_fu_594_p1 = ap_phi_mux_col_assign_phi_fu_447_p4;

assign tmp_21_fu_664_p1 = ap_phi_mux_pixProcessed_phi_fu_458_p4;

assign tmp_22_fu_600_p4 = {{ap_phi_mux_idxRow_phi_fu_436_p4[31:1]}};

assign tmp_23_fu_616_p4 = {{ap_phi_mux_col_assign_phi_fu_447_p4[31:1]}};

assign tmp_24_0_1_i_fu_715_p2 = ((lineBuff_val_0_q0 > lineBuff_val_0_q1) ? 1'b1 : 1'b0);

assign tmp_24_0_2_i_fu_766_p2 = ((lineBuff_val_0_load_2_reg_1194 > lineBuff_val_0_q1) ? 1'b1 : 1'b0);

assign tmp_24_1_1_i_fu_818_p2 = ((lineBuff_val_1_load_2_reg_1134 > valInWindow_0_maxVal_4_fu_811_p3) ? 1'b1 : 1'b0);

assign tmp_24_1_2_i_fu_864_p2 = ((lineBuff_val_1_load_3_reg_1200 > valInWindow_0_maxVal_5_reg_1242) ? 1'b1 : 1'b0);

assign tmp_24_1_i_fu_806_p2 = ((lineBuff_val_1_load_1_reg_1126 > lineBuff_val_0_q1) ? 1'b1 : 1'b0);

assign tmp_24_2_1_i_fu_886_p2 = ((lineBuff_val_2_load_2_reg_1155 > valInWindow_0_maxVal_7_fu_879_p3) ? 1'b1 : 1'b0);

assign tmp_24_2_2_i_fu_908_p2 = ((lineBuff_val_2_load_3_reg_1208 > valInWindow_0_maxVal_8_reg_1254) ? 1'b1 : 1'b0);

assign tmp_24_2_i_fu_874_p2 = ((lineBuff_val_2_load_1_reg_1147 > valInWindow_0_maxVal_6_fu_868_p3) ? 1'b1 : 1'b0);

assign tmp_24_fu_960_p1 = i4_reg_477;

assign tmp_25_fu_965_p2 = ((img_fifo_q0 == 8'd255) ? 1'b1 : 1'b0);

assign tmp_26_fu_638_p2 = (($signed(ap_phi_mux_col_assign_phi_fu_447_p4) < $signed(32'd309)) ? 1'b1 : 1'b0);

assign tmp_47_0_1_fu_677_p1 = pixProcessed_3_fu_671_p2;

assign tmp_47_0_2_fu_690_p1 = col_assign_1_0_2_fu_684_p2;

assign tmp_fu_505_p1 = idxHist_reg_398;

assign tmp_s_fu_527_p1 = inputStream_V_data_V_0_data_out;

assign valInWindow_0_maxVal_1_fu_747_p1 = valInWindow_0_maxVal_reg_1178;

assign valInWindow_0_maxVal_2_fu_771_p3 = ((tmp_24_0_2_i_fu_766_p2[0:0] === 1'b1) ? col_assign_1_0_2_reg_1115 : valInWindow_0_maxVal_reg_1178);

assign valInWindow_0_maxVal_3_fu_777_p1 = valInWindow_0_maxVal_2_fu_771_p3;

assign valInWindow_0_maxVal_4_fu_811_p3 = ((tmp_24_1_i_fu_806_p2[0:0] === 1'b1) ? lineBuff_val_1_load_1_reg_1126 : lineBuff_val_0_q1);

assign valInWindow_0_maxVal_5_fu_823_p3 = ((tmp_24_1_1_i_fu_818_p2[0:0] === 1'b1) ? lineBuff_val_1_load_2_reg_1134 : valInWindow_0_maxVal_4_fu_811_p3);

assign valInWindow_0_maxVal_6_fu_868_p3 = ((tmp_24_1_2_i_fu_864_p2[0:0] === 1'b1) ? lineBuff_val_1_load_3_reg_1200 : valInWindow_0_maxVal_5_reg_1242);

assign valInWindow_0_maxVal_7_fu_879_p3 = ((tmp_24_2_i_fu_874_p2[0:0] === 1'b1) ? lineBuff_val_2_load_1_reg_1147 : valInWindow_0_maxVal_6_fu_868_p3);

assign valInWindow_0_maxVal_8_fu_891_p3 = ((tmp_24_2_1_i_fu_886_p2[0:0] === 1'b1) ? lineBuff_val_2_load_2_reg_1155 : valInWindow_0_maxVal_7_fu_879_p3);

assign valInWindow_0_maxVal_fu_721_p3 = ((tmp_24_0_1_i_fu_715_p2[0:0] === 1'b1) ? pixProcessed_3_reg_1083 : pixProcessed_reg_454);

assign valInWindow_0_minVal_1_fu_710_p1 = valInWindow_0_minVal_fu_703_p3;

assign valInWindow_0_minVal_2_fu_755_p3 = ((tmp_19_0_2_i_fu_751_p2[0:0] === 1'b1) ? col_assign_1_0_2_reg_1115 : valInWindow_0_minVal_reg_1168);

assign valInWindow_0_minVal_3_fu_761_p1 = valInWindow_0_minVal_2_fu_755_p3;

assign valInWindow_0_minVal_4_fu_787_p3 = ((tmp_19_1_i_fu_782_p2[0:0] === 1'b1) ? lineBuff_val_1_load_1_reg_1126 : lineBuff_val_0_q0);

assign valInWindow_0_minVal_5_fu_799_p3 = ((tmp_19_1_1_i_fu_794_p2[0:0] === 1'b1) ? lineBuff_val_1_load_2_reg_1134 : valInWindow_0_minVal_4_fu_787_p3);

assign valInWindow_0_minVal_6_fu_834_p3 = ((tmp_19_1_2_i_fu_830_p2[0:0] === 1'b1) ? lineBuff_val_1_load_3_reg_1200 : valInWindow_0_minVal_5_reg_1236);

assign valInWindow_0_minVal_7_fu_845_p3 = ((tmp_19_2_i_fu_840_p2[0:0] === 1'b1) ? lineBuff_val_2_load_1_reg_1147 : valInWindow_0_minVal_6_fu_834_p3);

assign valInWindow_0_minVal_8_fu_857_p3 = ((tmp_19_2_1_i_fu_852_p2[0:0] === 1'b1) ? lineBuff_val_2_load_2_reg_1155 : valInWindow_0_minVal_7_fu_845_p3);

assign valInWindow_0_minVal_fu_703_p3 = ((tmp_19_0_1_i_fu_697_p2[0:0] === 1'b1) ? pixProcessed_3_reg_1083 : pixProcessed_reg_454);

assign valOutputBg_fu_912_p3 = ((tmp_24_2_2_i_fu_908_p2[0:0] === 1'b1) ? lineBuff_val_2_load_3_reg_1208 : valInWindow_0_maxVal_8_reg_1254);

assign valOutputFg1_fu_932_p3 = ((or_cond_reg_1055_pp0_iter1_reg[0:0] === 1'b1) ? valOutputFg_fu_902_p3 : 8'd0);

assign valOutputFg_fu_902_p3 = ((tmp_19_2_2_i_fu_898_p2[0:0] === 1'b1) ? lineBuff_val_2_load_3_reg_1208 : valInWindow_0_minVal_8_reg_1248);

always @ (posedge ap_clk) begin
    tmp_19_reg_1030[63:16] <= 48'b000000000000000000000000000000000000000000000000;
    tmp_19_reg_1030_pp0_iter1_reg[63:16] <= 48'b000000000000000000000000000000000000000000000000;
    tmp_20_reg_1040[63:32] <= 32'b00000000000000000000000000000000;
    tmp_24_reg_1269[63:16] <= 48'b000000000000000000000000000000000000000000000000;
end

endmodule //make_marker
