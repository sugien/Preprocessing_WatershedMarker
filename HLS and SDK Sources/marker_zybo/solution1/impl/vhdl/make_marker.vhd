-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity make_marker is
generic (
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    inputStream_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    inputStream_TVALID : IN STD_LOGIC;
    inputStream_TREADY : OUT STD_LOGIC;
    inputStream_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    inputStream_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    inputStream_TUSER : IN STD_LOGIC_VECTOR (4 downto 0);
    inputStream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    inputStream_TID : IN STD_LOGIC_VECTOR (1 downto 0);
    inputStream_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    outputStream_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    outputStream_TVALID : OUT STD_LOGIC;
    outputStream_TREADY : IN STD_LOGIC;
    outputStream_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    outputStream_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    outputStream_TUSER : OUT STD_LOGIC_VECTOR (4 downto 0);
    outputStream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    outputStream_TID : OUT STD_LOGIC_VECTOR (1 downto 0);
    outputStream_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    s_axi_ctrl_bus_AWVALID : IN STD_LOGIC;
    s_axi_ctrl_bus_AWREADY : OUT STD_LOGIC;
    s_axi_ctrl_bus_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_bus_WVALID : IN STD_LOGIC;
    s_axi_ctrl_bus_WREADY : OUT STD_LOGIC;
    s_axi_ctrl_bus_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_bus_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_ctrl_bus_ARVALID : IN STD_LOGIC;
    s_axi_ctrl_bus_ARREADY : OUT STD_LOGIC;
    s_axi_ctrl_bus_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_bus_RVALID : OUT STD_LOGIC;
    s_axi_ctrl_bus_RREADY : IN STD_LOGIC;
    s_axi_ctrl_bus_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_bus_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_ctrl_bus_BVALID : OUT STD_LOGIC;
    s_axi_ctrl_bus_BREADY : IN STD_LOGIC;
    s_axi_ctrl_bus_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of make_marker is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "make_marker,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.785000,HLS_SYN_LAT=841523,HLS_SYN_TPT=none,HLS_SYN_MEM=68,HLS_SYN_DSP=11,HLS_SYN_FF=4261,HLS_SYN_LUT=5370}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv16_FAAA : STD_LOGIC_VECTOR (15 downto 0) := "1111101010101010";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_135 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110101";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal inputStream_V_data_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal inputStream_V_data_V_0_vld_in : STD_LOGIC;
    signal inputStream_V_data_V_0_vld_out : STD_LOGIC;
    signal inputStream_V_data_V_0_ack_in : STD_LOGIC;
    signal inputStream_V_data_V_0_ack_out : STD_LOGIC;
    signal inputStream_V_data_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal inputStream_V_data_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal inputStream_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal inputStream_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal inputStream_V_data_V_0_sel : STD_LOGIC;
    signal inputStream_V_data_V_0_load_A : STD_LOGIC;
    signal inputStream_V_data_V_0_load_B : STD_LOGIC;
    signal inputStream_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inputStream_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal inputStream_V_dest_V_0_vld_in : STD_LOGIC;
    signal inputStream_V_dest_V_0_ack_out : STD_LOGIC;
    signal inputStream_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outputStream_V_data_V_1_data_in : STD_LOGIC_VECTOR (7 downto 0);
    signal outputStream_V_data_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal outputStream_V_data_V_1_vld_in : STD_LOGIC;
    signal outputStream_V_data_V_1_vld_out : STD_LOGIC;
    signal outputStream_V_data_V_1_ack_in : STD_LOGIC;
    signal outputStream_V_data_V_1_ack_out : STD_LOGIC;
    signal outputStream_V_data_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal outputStream_V_data_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal outputStream_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal outputStream_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal outputStream_V_data_V_1_sel : STD_LOGIC;
    signal outputStream_V_data_V_1_load_A : STD_LOGIC;
    signal outputStream_V_data_V_1_load_B : STD_LOGIC;
    signal outputStream_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outputStream_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal outputStream_V_keep_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal outputStream_V_keep_V_1_vld_in : STD_LOGIC;
    signal outputStream_V_keep_V_1_vld_out : STD_LOGIC;
    signal outputStream_V_keep_V_1_ack_in : STD_LOGIC;
    signal outputStream_V_keep_V_1_ack_out : STD_LOGIC;
    signal outputStream_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal outputStream_V_keep_V_1_sel : STD_LOGIC;
    signal outputStream_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outputStream_V_strb_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal outputStream_V_strb_V_1_vld_in : STD_LOGIC;
    signal outputStream_V_strb_V_1_vld_out : STD_LOGIC;
    signal outputStream_V_strb_V_1_ack_in : STD_LOGIC;
    signal outputStream_V_strb_V_1_ack_out : STD_LOGIC;
    signal outputStream_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal outputStream_V_strb_V_1_sel : STD_LOGIC;
    signal outputStream_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outputStream_V_user_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal outputStream_V_user_V_1_vld_in : STD_LOGIC;
    signal outputStream_V_user_V_1_vld_out : STD_LOGIC;
    signal outputStream_V_user_V_1_ack_in : STD_LOGIC;
    signal outputStream_V_user_V_1_ack_out : STD_LOGIC;
    signal outputStream_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal outputStream_V_user_V_1_sel : STD_LOGIC;
    signal outputStream_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outputStream_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal outputStream_V_last_V_1_vld_in : STD_LOGIC;
    signal outputStream_V_last_V_1_vld_out : STD_LOGIC;
    signal outputStream_V_last_V_1_ack_in : STD_LOGIC;
    signal outputStream_V_last_V_1_ack_out : STD_LOGIC;
    signal outputStream_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal outputStream_V_last_V_1_sel : STD_LOGIC;
    signal outputStream_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outputStream_V_id_V_1_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal outputStream_V_id_V_1_vld_in : STD_LOGIC;
    signal outputStream_V_id_V_1_vld_out : STD_LOGIC;
    signal outputStream_V_id_V_1_ack_in : STD_LOGIC;
    signal outputStream_V_id_V_1_ack_out : STD_LOGIC;
    signal outputStream_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal outputStream_V_id_V_1_sel : STD_LOGIC;
    signal outputStream_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outputStream_V_dest_V_1_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal outputStream_V_dest_V_1_vld_in : STD_LOGIC;
    signal outputStream_V_dest_V_1_vld_out : STD_LOGIC;
    signal outputStream_V_dest_V_1_ack_in : STD_LOGIC;
    signal outputStream_V_dest_V_1_ack_out : STD_LOGIC;
    signal outputStream_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal outputStream_V_dest_V_1_sel : STD_LOGIC;
    signal outputStream_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inputStream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal outputStream_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal tmp_25_reg_1279 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal tmp_25_reg_1279_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal idxRow_reg_432 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_assign_reg_443 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixProcessed_reg_454 : STD_LOGIC_VECTOR (31 downto 0);
    signal i3_reg_466 : STD_LOGIC_VECTOR (15 downto 0);
    signal i4_reg_477 : STD_LOGIC_VECTOR (15 downto 0);
    signal idxHist_1_fu_499_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_1_fu_516_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_1_reg_982 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal histogram_addr_1_reg_987 : STD_LOGIC_VECTOR (7 downto 0);
    signal histogram_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal histogram_load_reg_992 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_otsu_fu_488_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal t_reg_997 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_otsu_fu_488_ap_idle : STD_LOGIC;
    signal grp_otsu_fu_488_ap_ready : STD_LOGIC;
    signal grp_otsu_fu_488_ap_done : STD_LOGIC;
    signal exitcond3_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_2_fu_549_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_2_reg_1006 : STD_LOGIC_VECTOR (15 downto 0);
    signal img_fifo_addr_1_reg_1011 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_reg_1016 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal exitcond4_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_reg_1021 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state11_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond4_reg_1021_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_583_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_4_reg_1025 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_19_fu_589_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_reg_1030 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_reg_1030_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal img_fifo_addr_2_reg_1035 : STD_LOGIC_VECTOR (15 downto 0);
    signal img_fifo_addr_2_reg_1035_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_20_fu_594_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_reg_1040 : STD_LOGIC_VECTOR (63 downto 0);
    signal lineBuff_val_1_addr_reg_1045 : STD_LOGIC_VECTOR (8 downto 0);
    signal lineBuff_val_2_addr_reg_1050 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_cond_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_1055 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_1055_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_reg_1062 : STD_LOGIC_VECTOR (0 downto 0);
    signal idxCol_fu_644_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxCol_reg_1068 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxRow_1_fu_656_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxRow_1_reg_1073 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state13_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state18_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal pixProcessed_3_fu_671_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixProcessed_3_reg_1083 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_assign_1_0_2_fu_684_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_assign_1_0_2_reg_1115 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state14_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state19_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal lineBuff_val_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_1_load_1_reg_1126 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_1_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_1_load_2_reg_1134 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_2_load_1_reg_1147 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_2_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_2_load_2_reg_1155 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_minVal_fu_703_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal valInWindow_0_minVal_reg_1168 : STD_LOGIC_VECTOR (31 downto 0);
    signal valInWindow_0_maxVal_fu_721_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal valInWindow_0_maxVal_reg_1178 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxCol_1_fu_734_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxCol_1_reg_1184 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixProcessed_2_fu_740_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixProcessed_2_reg_1189 : STD_LOGIC_VECTOR (31 downto 0);
    signal lineBuff_val_0_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_0_load_2_reg_1194 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state15_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal lineBuff_val_1_load_3_reg_1200 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_2_load_3_reg_1208 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_0_load_3_reg_1216 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_minVal_5_fu_799_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_minVal_5_reg_1236 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state12_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state17_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal valInWindow_0_maxVal_5_fu_823_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_maxVal_5_reg_1242 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_minVal_8_fu_857_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_minVal_8_reg_1248 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_maxVal_8_fu_891_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valInWindow_0_maxVal_8_reg_1254 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_fu_948_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state21_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state22_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state23_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state23_io : BOOLEAN;
    signal ap_block_state24_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state24_io : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal i_3_fu_954_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal tmp_24_fu_960_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_reg_1269 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_fu_965_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal backimg_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state11 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state21 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal histogram_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal histogram_ce0 : STD_LOGIC;
    signal histogram_we0 : STD_LOGIC;
    signal histogram_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal img_fifo_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal img_fifo_ce0 : STD_LOGIC;
    signal img_fifo_we0 : STD_LOGIC;
    signal img_fifo_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal img_fifo_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal backimg_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal backimg_ce0 : STD_LOGIC;
    signal backimg_we0 : STD_LOGIC;
    signal backimg_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lineBuff_val_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal lineBuff_val_0_ce0 : STD_LOGIC;
    signal lineBuff_val_0_we0 : STD_LOGIC;
    signal lineBuff_val_0_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal lineBuff_val_0_ce1 : STD_LOGIC;
    signal lineBuff_val_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal lineBuff_val_1_ce0 : STD_LOGIC;
    signal lineBuff_val_1_we0 : STD_LOGIC;
    signal lineBuff_val_1_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal lineBuff_val_1_ce1 : STD_LOGIC;
    signal lineBuff_val_2_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal lineBuff_val_2_ce0 : STD_LOGIC;
    signal lineBuff_val_2_we0 : STD_LOGIC;
    signal lineBuff_val_2_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal lineBuff_val_2_ce1 : STD_LOGIC;
    signal grp_otsu_fu_488_ap_start : STD_LOGIC;
    signal grp_otsu_fu_488_histData_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_otsu_fu_488_histData_ce0 : STD_LOGIC;
    signal idxHist_reg_398 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond1_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_409 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i2_reg_421 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_phi_mux_idxRow_phi_fu_436_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_col_assign_phi_fu_447_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_pixProcessed_phi_fu_458_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_phi_mux_i3_phi_fu_470_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_otsu_fu_488_ap_start_reg : STD_LOGIC := '0';
    signal exitcond2_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_527_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_532_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_555_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal tmp_21_fu_664_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_0_1_fu_677_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_0_2_fu_690_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal valInWindow_0_minVal_1_fu_710_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal valInWindow_0_maxVal_1_fu_747_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal valInWindow_0_minVal_3_fu_761_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal valInWindow_0_maxVal_3_fu_777_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal tmp_14_fu_537_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge_fu_569_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal valOutputFg1_fu_932_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_560_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_600_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_23_fu_616_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp3_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idxRow_2_fu_650_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_0_1_i_fu_697_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_0_1_i_fu_715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pixProcessed_1_fu_728_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_0_2_i_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal valInWindow_0_minVal_2_fu_755_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_0_2_i_fu_766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal valInWindow_0_maxVal_2_fu_771_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_1_i_fu_782_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal valInWindow_0_minVal_4_fu_787_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_1_1_i_fu_794_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_1_i_fu_806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal valInWindow_0_maxVal_4_fu_811_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_1_1_i_fu_818_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_1_2_i_fu_830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal valInWindow_0_minVal_6_fu_834_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_2_i_fu_840_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal valInWindow_0_minVal_7_fu_845_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_2_1_i_fu_852_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_1_2_i_fu_864_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal valInWindow_0_maxVal_6_fu_868_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_2_i_fu_874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal valInWindow_0_maxVal_7_fu_879_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_2_1_i_fu_886_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_2_2_i_fu_898_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_2_2_i_fu_908_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal valOutputBg_fu_912_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp_fu_918_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal valOutputFg_fu_902_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp1_fu_924_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_block_state25 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component otsu IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        histData_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        histData_ce0 : OUT STD_LOGIC;
        histData_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component make_marker_histog8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component make_marker_img_fhbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component make_marker_lineBibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component make_marker_ctrl_bus_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    make_marker_ctrl_bus_s_axi_U : component make_marker_ctrl_bus_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_ctrl_bus_AWVALID,
        AWREADY => s_axi_ctrl_bus_AWREADY,
        AWADDR => s_axi_ctrl_bus_AWADDR,
        WVALID => s_axi_ctrl_bus_WVALID,
        WREADY => s_axi_ctrl_bus_WREADY,
        WDATA => s_axi_ctrl_bus_WDATA,
        WSTRB => s_axi_ctrl_bus_WSTRB,
        ARVALID => s_axi_ctrl_bus_ARVALID,
        ARREADY => s_axi_ctrl_bus_ARREADY,
        ARADDR => s_axi_ctrl_bus_ARADDR,
        RVALID => s_axi_ctrl_bus_RVALID,
        RREADY => s_axi_ctrl_bus_RREADY,
        RDATA => s_axi_ctrl_bus_RDATA,
        RRESP => s_axi_ctrl_bus_RRESP,
        BVALID => s_axi_ctrl_bus_BVALID,
        BREADY => s_axi_ctrl_bus_BREADY,
        BRESP => s_axi_ctrl_bus_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    histogram_U : component make_marker_histog8j
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => histogram_address0,
        ce0 => histogram_ce0,
        we0 => histogram_we0,
        d0 => histogram_d0,
        q0 => histogram_q0);

    img_fifo_U : component make_marker_img_fhbi
    generic map (
        DataWidth => 8,
        AddressRange => 64170,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => img_fifo_address0,
        ce0 => img_fifo_ce0,
        we0 => img_fifo_we0,
        d0 => img_fifo_d0,
        q0 => img_fifo_q0);

    backimg_U : component make_marker_img_fhbi
    generic map (
        DataWidth => 8,
        AddressRange => 64170,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => backimg_address0,
        ce0 => backimg_ce0,
        we0 => backimg_we0,
        d0 => backimg_d0,
        q0 => backimg_q0);

    lineBuff_val_0_U : component make_marker_lineBibs
    generic map (
        DataWidth => 8,
        AddressRange => 310,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lineBuff_val_0_address0,
        ce0 => lineBuff_val_0_ce0,
        we0 => lineBuff_val_0_we0,
        d0 => lineBuff_val_1_q0,
        q0 => lineBuff_val_0_q0,
        address1 => lineBuff_val_0_address1,
        ce1 => lineBuff_val_0_ce1,
        q1 => lineBuff_val_0_q1);

    lineBuff_val_1_U : component make_marker_lineBibs
    generic map (
        DataWidth => 8,
        AddressRange => 310,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lineBuff_val_1_address0,
        ce0 => lineBuff_val_1_ce0,
        we0 => lineBuff_val_1_we0,
        d0 => lineBuff_val_2_q0,
        q0 => lineBuff_val_1_q0,
        address1 => lineBuff_val_1_address1,
        ce1 => lineBuff_val_1_ce1,
        q1 => lineBuff_val_1_q1);

    lineBuff_val_2_U : component make_marker_lineBibs
    generic map (
        DataWidth => 8,
        AddressRange => 310,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lineBuff_val_2_address0,
        ce0 => lineBuff_val_2_ce0,
        we0 => lineBuff_val_2_we0,
        d0 => img_fifo_q0,
        q0 => lineBuff_val_2_q0,
        address1 => lineBuff_val_2_address1,
        ce1 => lineBuff_val_2_ce1,
        q1 => lineBuff_val_2_q1);

    grp_otsu_fu_488 : component otsu
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_otsu_fu_488_ap_start,
        ap_done => grp_otsu_fu_488_ap_done,
        ap_idle => grp_otsu_fu_488_ap_idle,
        ap_ready => grp_otsu_fu_488_ap_ready,
        histData_address0 => grp_otsu_fu_488_histData_address0,
        histData_ce0 => grp_otsu_fu_488_histData_ce0,
        histData_q0 => histogram_q0,
        ap_return => grp_otsu_fu_488_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state11) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((exitcond3_fu_543_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state11) and (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state11);
                elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((exitcond3_fu_543_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state21) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state21)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state21);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_otsu_fu_488_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_otsu_fu_488_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond2_fu_510_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_otsu_fu_488_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_otsu_fu_488_ap_ready = ap_const_logic_1)) then 
                    grp_otsu_fu_488_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    inputStream_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inputStream_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inputStream_V_data_V_0_ack_out = ap_const_logic_1) and (inputStream_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        inputStream_V_data_V_0_sel_rd <= not(inputStream_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inputStream_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inputStream_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inputStream_V_data_V_0_ack_in = ap_const_logic_1) and (inputStream_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        inputStream_V_data_V_0_sel_wr <= not(inputStream_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inputStream_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inputStream_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((inputStream_V_data_V_0_state = ap_const_lv2_2) and (inputStream_V_data_V_0_vld_in = ap_const_logic_0)) or ((inputStream_V_data_V_0_state = ap_const_lv2_3) and (inputStream_V_data_V_0_vld_in = ap_const_logic_0) and (inputStream_V_data_V_0_ack_out = ap_const_logic_1)))) then 
                    inputStream_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((inputStream_V_data_V_0_state = ap_const_lv2_1) and (inputStream_V_data_V_0_ack_out = ap_const_logic_0)) or ((inputStream_V_data_V_0_state = ap_const_lv2_3) and (inputStream_V_data_V_0_ack_out = ap_const_logic_0) and (inputStream_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    inputStream_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inputStream_V_data_V_0_vld_in = ap_const_logic_0) and (inputStream_V_data_V_0_ack_out = ap_const_logic_1))) and not(((inputStream_V_data_V_0_ack_out = ap_const_logic_0) and (inputStream_V_data_V_0_vld_in = ap_const_logic_1))) and (inputStream_V_data_V_0_state = ap_const_lv2_3)) or ((inputStream_V_data_V_0_state = ap_const_lv2_1) and (inputStream_V_data_V_0_ack_out = ap_const_logic_1)) or ((inputStream_V_data_V_0_state = ap_const_lv2_2) and (inputStream_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    inputStream_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    inputStream_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inputStream_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inputStream_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((inputStream_V_dest_V_0_state = ap_const_lv2_2) and (inputStream_V_dest_V_0_vld_in = ap_const_logic_0)) or ((inputStream_V_dest_V_0_state = ap_const_lv2_3) and (inputStream_V_dest_V_0_vld_in = ap_const_logic_0) and (inputStream_V_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    inputStream_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((inputStream_V_dest_V_0_state = ap_const_lv2_1) and (inputStream_V_dest_V_0_ack_out = ap_const_logic_0)) or ((inputStream_V_dest_V_0_state = ap_const_lv2_3) and (inputStream_V_dest_V_0_ack_out = ap_const_logic_0) and (inputStream_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    inputStream_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inputStream_V_dest_V_0_vld_in = ap_const_logic_0) and (inputStream_V_dest_V_0_ack_out = ap_const_logic_1))) and not(((inputStream_V_dest_V_0_ack_out = ap_const_logic_0) and (inputStream_V_dest_V_0_vld_in = ap_const_logic_1))) and (inputStream_V_dest_V_0_state = ap_const_lv2_3)) or ((inputStream_V_dest_V_0_state = ap_const_lv2_1) and (inputStream_V_dest_V_0_ack_out = ap_const_logic_1)) or ((inputStream_V_dest_V_0_state = ap_const_lv2_2) and (inputStream_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    inputStream_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    inputStream_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outputStream_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outputStream_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outputStream_V_data_V_1_ack_out = ap_const_logic_1) and (outputStream_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        outputStream_V_data_V_1_sel_rd <= not(outputStream_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outputStream_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outputStream_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outputStream_V_data_V_1_ack_in = ap_const_logic_1) and (outputStream_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        outputStream_V_data_V_1_sel_wr <= not(outputStream_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outputStream_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outputStream_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((outputStream_V_data_V_1_state = ap_const_lv2_2) and (outputStream_V_data_V_1_vld_in = ap_const_logic_0)) or ((outputStream_V_data_V_1_state = ap_const_lv2_3) and (outputStream_V_data_V_1_vld_in = ap_const_logic_0) and (outputStream_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    outputStream_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((outputStream_V_data_V_1_state = ap_const_lv2_1) and (outputStream_V_data_V_1_ack_out = ap_const_logic_0)) or ((outputStream_V_data_V_1_state = ap_const_lv2_3) and (outputStream_V_data_V_1_ack_out = ap_const_logic_0) and (outputStream_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    outputStream_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outputStream_V_data_V_1_vld_in = ap_const_logic_0) and (outputStream_V_data_V_1_ack_out = ap_const_logic_1))) and not(((outputStream_V_data_V_1_ack_out = ap_const_logic_0) and (outputStream_V_data_V_1_vld_in = ap_const_logic_1))) and (outputStream_V_data_V_1_state = ap_const_lv2_3)) or ((outputStream_V_data_V_1_state = ap_const_lv2_1) and (outputStream_V_data_V_1_ack_out = ap_const_logic_1)) or ((outputStream_V_data_V_1_state = ap_const_lv2_2) and (outputStream_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    outputStream_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    outputStream_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outputStream_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outputStream_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outputStream_V_dest_V_1_ack_out = ap_const_logic_1) and (outputStream_V_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        outputStream_V_dest_V_1_sel_rd <= not(outputStream_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outputStream_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outputStream_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((outputStream_V_dest_V_1_state = ap_const_lv2_2) and (outputStream_V_dest_V_1_vld_in = ap_const_logic_0)) or ((outputStream_V_dest_V_1_state = ap_const_lv2_3) and (outputStream_V_dest_V_1_vld_in = ap_const_logic_0) and (outputStream_V_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    outputStream_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((outputStream_V_dest_V_1_state = ap_const_lv2_1) and (outputStream_V_dest_V_1_ack_out = ap_const_logic_0)) or ((outputStream_V_dest_V_1_state = ap_const_lv2_3) and (outputStream_V_dest_V_1_ack_out = ap_const_logic_0) and (outputStream_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    outputStream_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outputStream_V_dest_V_1_vld_in = ap_const_logic_0) and (outputStream_V_dest_V_1_ack_out = ap_const_logic_1))) and not(((outputStream_V_dest_V_1_ack_out = ap_const_logic_0) and (outputStream_V_dest_V_1_vld_in = ap_const_logic_1))) and (outputStream_V_dest_V_1_state = ap_const_lv2_3)) or ((outputStream_V_dest_V_1_state = ap_const_lv2_1) and (outputStream_V_dest_V_1_ack_out = ap_const_logic_1)) or ((outputStream_V_dest_V_1_state = ap_const_lv2_2) and (outputStream_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    outputStream_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    outputStream_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outputStream_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outputStream_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outputStream_V_id_V_1_ack_out = ap_const_logic_1) and (outputStream_V_id_V_1_vld_out = ap_const_logic_1))) then 
                                        outputStream_V_id_V_1_sel_rd <= not(outputStream_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outputStream_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outputStream_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((outputStream_V_id_V_1_state = ap_const_lv2_2) and (outputStream_V_id_V_1_vld_in = ap_const_logic_0)) or ((outputStream_V_id_V_1_state = ap_const_lv2_3) and (outputStream_V_id_V_1_vld_in = ap_const_logic_0) and (outputStream_V_id_V_1_ack_out = ap_const_logic_1)))) then 
                    outputStream_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((outputStream_V_id_V_1_state = ap_const_lv2_1) and (outputStream_V_id_V_1_ack_out = ap_const_logic_0)) or ((outputStream_V_id_V_1_state = ap_const_lv2_3) and (outputStream_V_id_V_1_ack_out = ap_const_logic_0) and (outputStream_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    outputStream_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outputStream_V_id_V_1_vld_in = ap_const_logic_0) and (outputStream_V_id_V_1_ack_out = ap_const_logic_1))) and not(((outputStream_V_id_V_1_ack_out = ap_const_logic_0) and (outputStream_V_id_V_1_vld_in = ap_const_logic_1))) and (outputStream_V_id_V_1_state = ap_const_lv2_3)) or ((outputStream_V_id_V_1_state = ap_const_lv2_1) and (outputStream_V_id_V_1_ack_out = ap_const_logic_1)) or ((outputStream_V_id_V_1_state = ap_const_lv2_2) and (outputStream_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    outputStream_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    outputStream_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outputStream_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outputStream_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outputStream_V_keep_V_1_ack_out = ap_const_logic_1) and (outputStream_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        outputStream_V_keep_V_1_sel_rd <= not(outputStream_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outputStream_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outputStream_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((outputStream_V_keep_V_1_state = ap_const_lv2_2) and (outputStream_V_keep_V_1_vld_in = ap_const_logic_0)) or ((outputStream_V_keep_V_1_state = ap_const_lv2_3) and (outputStream_V_keep_V_1_vld_in = ap_const_logic_0) and (outputStream_V_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    outputStream_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((outputStream_V_keep_V_1_state = ap_const_lv2_1) and (outputStream_V_keep_V_1_ack_out = ap_const_logic_0)) or ((outputStream_V_keep_V_1_state = ap_const_lv2_3) and (outputStream_V_keep_V_1_ack_out = ap_const_logic_0) and (outputStream_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    outputStream_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outputStream_V_keep_V_1_vld_in = ap_const_logic_0) and (outputStream_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((outputStream_V_keep_V_1_ack_out = ap_const_logic_0) and (outputStream_V_keep_V_1_vld_in = ap_const_logic_1))) and (outputStream_V_keep_V_1_state = ap_const_lv2_3)) or ((outputStream_V_keep_V_1_state = ap_const_lv2_1) and (outputStream_V_keep_V_1_ack_out = ap_const_logic_1)) or ((outputStream_V_keep_V_1_state = ap_const_lv2_2) and (outputStream_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    outputStream_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    outputStream_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outputStream_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outputStream_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outputStream_V_last_V_1_ack_out = ap_const_logic_1) and (outputStream_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        outputStream_V_last_V_1_sel_rd <= not(outputStream_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outputStream_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outputStream_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((outputStream_V_last_V_1_state = ap_const_lv2_2) and (outputStream_V_last_V_1_vld_in = ap_const_logic_0)) or ((outputStream_V_last_V_1_state = ap_const_lv2_3) and (outputStream_V_last_V_1_vld_in = ap_const_logic_0) and (outputStream_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    outputStream_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((outputStream_V_last_V_1_state = ap_const_lv2_1) and (outputStream_V_last_V_1_ack_out = ap_const_logic_0)) or ((outputStream_V_last_V_1_state = ap_const_lv2_3) and (outputStream_V_last_V_1_ack_out = ap_const_logic_0) and (outputStream_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    outputStream_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outputStream_V_last_V_1_vld_in = ap_const_logic_0) and (outputStream_V_last_V_1_ack_out = ap_const_logic_1))) and not(((outputStream_V_last_V_1_ack_out = ap_const_logic_0) and (outputStream_V_last_V_1_vld_in = ap_const_logic_1))) and (outputStream_V_last_V_1_state = ap_const_lv2_3)) or ((outputStream_V_last_V_1_state = ap_const_lv2_1) and (outputStream_V_last_V_1_ack_out = ap_const_logic_1)) or ((outputStream_V_last_V_1_state = ap_const_lv2_2) and (outputStream_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    outputStream_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    outputStream_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outputStream_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outputStream_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outputStream_V_strb_V_1_ack_out = ap_const_logic_1) and (outputStream_V_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        outputStream_V_strb_V_1_sel_rd <= not(outputStream_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outputStream_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outputStream_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((outputStream_V_strb_V_1_state = ap_const_lv2_2) and (outputStream_V_strb_V_1_vld_in = ap_const_logic_0)) or ((outputStream_V_strb_V_1_state = ap_const_lv2_3) and (outputStream_V_strb_V_1_vld_in = ap_const_logic_0) and (outputStream_V_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    outputStream_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((outputStream_V_strb_V_1_state = ap_const_lv2_1) and (outputStream_V_strb_V_1_ack_out = ap_const_logic_0)) or ((outputStream_V_strb_V_1_state = ap_const_lv2_3) and (outputStream_V_strb_V_1_ack_out = ap_const_logic_0) and (outputStream_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    outputStream_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outputStream_V_strb_V_1_vld_in = ap_const_logic_0) and (outputStream_V_strb_V_1_ack_out = ap_const_logic_1))) and not(((outputStream_V_strb_V_1_ack_out = ap_const_logic_0) and (outputStream_V_strb_V_1_vld_in = ap_const_logic_1))) and (outputStream_V_strb_V_1_state = ap_const_lv2_3)) or ((outputStream_V_strb_V_1_state = ap_const_lv2_1) and (outputStream_V_strb_V_1_ack_out = ap_const_logic_1)) or ((outputStream_V_strb_V_1_state = ap_const_lv2_2) and (outputStream_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    outputStream_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    outputStream_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outputStream_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outputStream_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outputStream_V_user_V_1_ack_out = ap_const_logic_1) and (outputStream_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        outputStream_V_user_V_1_sel_rd <= not(outputStream_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outputStream_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outputStream_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((outputStream_V_user_V_1_state = ap_const_lv2_2) and (outputStream_V_user_V_1_vld_in = ap_const_logic_0)) or ((outputStream_V_user_V_1_state = ap_const_lv2_3) and (outputStream_V_user_V_1_vld_in = ap_const_logic_0) and (outputStream_V_user_V_1_ack_out = ap_const_logic_1)))) then 
                    outputStream_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((outputStream_V_user_V_1_state = ap_const_lv2_1) and (outputStream_V_user_V_1_ack_out = ap_const_logic_0)) or ((outputStream_V_user_V_1_state = ap_const_lv2_3) and (outputStream_V_user_V_1_ack_out = ap_const_logic_0) and (outputStream_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    outputStream_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outputStream_V_user_V_1_vld_in = ap_const_logic_0) and (outputStream_V_user_V_1_ack_out = ap_const_logic_1))) and not(((outputStream_V_user_V_1_ack_out = ap_const_logic_0) and (outputStream_V_user_V_1_vld_in = ap_const_logic_1))) and (outputStream_V_user_V_1_state = ap_const_lv2_3)) or ((outputStream_V_user_V_1_state = ap_const_lv2_1) and (outputStream_V_user_V_1_ack_out = ap_const_logic_1)) or ((outputStream_V_user_V_1_state = ap_const_lv2_2) and (outputStream_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    outputStream_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    outputStream_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    col_assign_reg_443_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_543_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                col_assign_reg_443 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond4_reg_1021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                col_assign_reg_443 <= idxCol_1_reg_1184;
            end if; 
        end if;
    end process;

    i2_reg_421_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i2_reg_421 <= i_2_reg_1006;
            elsif (((grp_otsu_fu_488_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i2_reg_421 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    i3_reg_466_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_543_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i3_reg_466 <= ap_const_lv16_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond4_reg_1021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i3_reg_466 <= i_4_reg_1025;
            end if; 
        end if;
    end process;

    i4_reg_477_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                i4_reg_477 <= ap_const_lv16_0;
            elsif (((exitcond_fu_948_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i4_reg_477 <= i_3_fu_954_p2;
            end if; 
        end if;
    end process;

    i_reg_409_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_493_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_409 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_reg_409 <= i_1_reg_982;
            end if; 
        end if;
    end process;

    idxHist_reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_493_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                idxHist_reg_398 <= idxHist_1_fu_499_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                idxHist_reg_398 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    idxRow_reg_432_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_543_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                idxRow_reg_432 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond4_reg_1021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                idxRow_reg_432 <= idxRow_1_reg_1073;
            end if; 
        end if;
    end process;

    pixProcessed_reg_454_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_543_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                pixProcessed_reg_454 <= ap_const_lv32_0;
            elsif (((exitcond4_reg_1021_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                pixProcessed_reg_454 <= pixProcessed_2_reg_1189;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_reg_1021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                col_assign_1_0_2_reg_1115 <= col_assign_1_0_2_fu_684_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond4_reg_1021 <= exitcond4_fu_577_p2;
                exitcond4_reg_1021_pp0_iter1_reg <= exitcond4_reg_1021;
                img_fifo_addr_2_reg_1035_pp0_iter1_reg <= img_fifo_addr_2_reg_1035;
                or_cond_reg_1055_pp0_iter1_reg <= or_cond_reg_1055;
                    tmp_19_reg_1030_pp0_iter1_reg(15 downto 0) <= tmp_19_reg_1030(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((inputStream_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                histogram_addr_1_reg_987 <= tmp_s_fu_527_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                histogram_load_reg_992 <= histogram_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_1_reg_982 <= i_1_fu_516_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_2_reg_1006 <= i_2_fu_549_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                i_4_reg_1025 <= i_4_fu_583_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_reg_1021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                idxCol_1_reg_1184 <= idxCol_1_fu_734_p3;
                lineBuff_val_1_load_1_reg_1126 <= lineBuff_val_1_q0;
                lineBuff_val_1_load_2_reg_1134 <= lineBuff_val_1_q1;
                lineBuff_val_2_load_1_reg_1147 <= lineBuff_val_2_q0;
                lineBuff_val_2_load_2_reg_1155 <= lineBuff_val_2_q1;
                pixProcessed_2_reg_1189 <= pixProcessed_2_fu_740_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond4_fu_577_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                idxCol_reg_1068 <= idxCol_fu_644_p2;
                img_fifo_addr_2_reg_1035 <= tmp_19_fu_589_p1(16 - 1 downto 0);
                lineBuff_val_1_addr_reg_1045 <= tmp_20_fu_594_p1(9 - 1 downto 0);
                lineBuff_val_2_addr_reg_1050 <= tmp_20_fu_594_p1(9 - 1 downto 0);
                or_cond_reg_1055 <= or_cond_fu_632_p2;
                    tmp_19_reg_1030(15 downto 0) <= tmp_19_fu_589_p1(15 downto 0);
                    tmp_20_reg_1040(31 downto 0) <= tmp_20_fu_594_p1(31 downto 0);
                tmp_26_reg_1062 <= tmp_26_fu_638_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond4_fu_577_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                idxRow_1_reg_1073 <= idxRow_1_fu_656_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_543_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                img_fifo_addr_1_reg_1011 <= tmp_16_fu_555_p1(16 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inputStream_V_data_V_0_load_A = ap_const_logic_1)) then
                inputStream_V_data_V_0_payload_A <= inputStream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inputStream_V_data_V_0_load_B = ap_const_logic_1)) then
                inputStream_V_data_V_0_payload_B <= inputStream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_reg_1021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                lineBuff_val_0_load_2_reg_1194 <= lineBuff_val_0_q1;
                lineBuff_val_1_load_3_reg_1200 <= lineBuff_val_1_q1;
                lineBuff_val_2_load_3_reg_1208 <= lineBuff_val_2_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_1055 = ap_const_lv1_1) and (exitcond4_reg_1021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                lineBuff_val_0_load_3_reg_1216 <= lineBuff_val_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outputStream_V_data_V_1_load_A = ap_const_logic_1)) then
                outputStream_V_data_V_1_payload_A <= outputStream_V_data_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outputStream_V_data_V_1_load_B = ap_const_logic_1)) then
                outputStream_V_data_V_1_payload_B <= outputStream_V_data_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_reg_1021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                pixProcessed_3_reg_1083 <= pixProcessed_3_fu_671_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_otsu_fu_488_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                t_reg_997 <= grp_otsu_fu_488_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_18_reg_1016 <= tmp_18_fu_564_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_948_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                    tmp_24_reg_1269(15 downto 0) <= tmp_24_fu_960_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                tmp_25_reg_1279 <= tmp_25_fu_965_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                tmp_25_reg_1279_pp1_iter2_reg <= tmp_25_reg_1279;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_1055_pp0_iter1_reg = ap_const_lv1_1) and (exitcond4_reg_1021_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                valInWindow_0_maxVal_5_reg_1242 <= valInWindow_0_maxVal_5_fu_823_p3;
                valInWindow_0_minVal_5_reg_1236 <= valInWindow_0_minVal_5_fu_799_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_1055_pp0_iter1_reg = ap_const_lv1_1) and (exitcond4_reg_1021_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                valInWindow_0_maxVal_8_reg_1254 <= valInWindow_0_maxVal_8_fu_891_p3;
                valInWindow_0_minVal_8_reg_1248 <= valInWindow_0_minVal_8_fu_857_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_reg_1055 = ap_const_lv1_1) and (exitcond4_reg_1021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                valInWindow_0_maxVal_reg_1178 <= valInWindow_0_maxVal_fu_721_p3;
                valInWindow_0_minVal_reg_1168 <= valInWindow_0_minVal_fu_703_p3;
            end if;
        end if;
    end process;
    tmp_19_reg_1030(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    tmp_19_reg_1030_pp0_iter1_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    tmp_20_reg_1040(63 downto 32) <= "00000000000000000000000000000000";
    tmp_24_reg_1269(63 downto 16) <= "000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, inputStream_V_data_V_0_vld_out, outputStream_V_data_V_1_ack_in, outputStream_V_keep_V_1_ack_in, outputStream_V_strb_V_1_ack_in, outputStream_V_user_V_1_ack_in, outputStream_V_last_V_1_ack_in, outputStream_V_id_V_1_ack_in, outputStream_V_dest_V_1_ack_in, ap_CS_fsm_state4, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state7, grp_otsu_fu_488_ap_done, exitcond3_fu_543_p2, ap_CS_fsm_state8, exitcond4_fu_577_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, exitcond_fu_948_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage4_subdone, ap_block_pp0_stage3_subdone, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, exitcond1_fu_493_p2, exitcond2_fu_510_p2, ap_CS_fsm_state25, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_493_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond2_fu_510_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((inputStream_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state7 => 
                if (((grp_otsu_fu_488_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((exitcond3_fu_543_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond4_fu_577_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((exitcond4_fu_577_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((exitcond_fu_948_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((exitcond_fu_948_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state25 => 
                if ((not(((outputStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outputStream_V_id_V_1_ack_in = ap_const_logic_0) or (outputStream_V_last_V_1_ack_in = ap_const_logic_0) or (outputStream_V_user_V_1_ack_in = ap_const_logic_0) or (outputStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outputStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outputStream_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(14);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(16);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(15);
    ap_CS_fsm_state25 <= ap_CS_fsm(17);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_block_state23_io, ap_block_state24_io)
    begin
                ap_block_pp1_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state24_io) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state23_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_block_state23_io, ap_block_state24_io)
    begin
                ap_block_pp1_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state24_io) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state23_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)));
    end process;

        ap_block_state11_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state23_io_assign_proc : process(outputStream_V_data_V_1_ack_in, tmp_25_reg_1279)
    begin
                ap_block_state23_io <= (((tmp_25_reg_1279 = ap_const_lv1_0) and (outputStream_V_data_V_1_ack_in = ap_const_logic_0)) or ((tmp_25_reg_1279 = ap_const_lv1_1) and (outputStream_V_data_V_1_ack_in = ap_const_logic_0)));
    end process;

        ap_block_state23_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state24_io_assign_proc : process(outputStream_V_data_V_1_ack_in, tmp_25_reg_1279_pp1_iter2_reg)
    begin
                ap_block_state24_io <= (((tmp_25_reg_1279_pp1_iter2_reg = ap_const_lv1_0) and (outputStream_V_data_V_1_ack_in = ap_const_logic_0)) or ((tmp_25_reg_1279_pp1_iter2_reg = ap_const_lv1_1) and (outputStream_V_data_V_1_ack_in = ap_const_logic_0)));
    end process;

        ap_block_state24_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state25_assign_proc : process(outputStream_V_data_V_1_ack_in, outputStream_V_keep_V_1_ack_in, outputStream_V_strb_V_1_ack_in, outputStream_V_user_V_1_ack_in, outputStream_V_last_V_1_ack_in, outputStream_V_id_V_1_ack_in, outputStream_V_dest_V_1_ack_in)
    begin
                ap_block_state25 <= ((outputStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outputStream_V_id_V_1_ack_in = ap_const_logic_0) or (outputStream_V_last_V_1_ack_in = ap_const_logic_0) or (outputStream_V_user_V_1_ack_in = ap_const_logic_0) or (outputStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outputStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outputStream_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state11_assign_proc : process(exitcond4_fu_577_p2)
    begin
        if ((exitcond4_fu_577_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state11 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state21_assign_proc : process(exitcond_fu_948_p2)
    begin
        if ((exitcond_fu_948_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state21 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(outputStream_V_data_V_1_ack_in, outputStream_V_keep_V_1_ack_in, outputStream_V_strb_V_1_ack_in, outputStream_V_user_V_1_ack_in, outputStream_V_last_V_1_ack_in, outputStream_V_id_V_1_ack_in, outputStream_V_dest_V_1_ack_in, ap_CS_fsm_state25)
    begin
        if ((not(((outputStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outputStream_V_id_V_1_ack_in = ap_const_logic_0) or (outputStream_V_last_V_1_ack_in = ap_const_logic_0) or (outputStream_V_user_V_1_ack_in = ap_const_logic_0) or (outputStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outputStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outputStream_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_col_assign_phi_fu_447_p4_assign_proc : process(col_assign_reg_443, exitcond4_reg_1021, ap_CS_fsm_pp0_stage0, idxCol_1_reg_1184, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond4_reg_1021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_col_assign_phi_fu_447_p4 <= idxCol_1_reg_1184;
        else 
            ap_phi_mux_col_assign_phi_fu_447_p4 <= col_assign_reg_443;
        end if; 
    end process;


    ap_phi_mux_i3_phi_fu_470_p4_assign_proc : process(i3_reg_466, exitcond4_reg_1021, ap_CS_fsm_pp0_stage0, i_4_reg_1025, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond4_reg_1021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i3_phi_fu_470_p4 <= i_4_reg_1025;
        else 
            ap_phi_mux_i3_phi_fu_470_p4 <= i3_reg_466;
        end if; 
    end process;


    ap_phi_mux_idxRow_phi_fu_436_p4_assign_proc : process(idxRow_reg_432, exitcond4_reg_1021, ap_CS_fsm_pp0_stage0, idxRow_1_reg_1073, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond4_reg_1021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_idxRow_phi_fu_436_p4 <= idxRow_1_reg_1073;
        else 
            ap_phi_mux_idxRow_phi_fu_436_p4 <= idxRow_reg_432;
        end if; 
    end process;


    ap_phi_mux_pixProcessed_phi_fu_458_p4_assign_proc : process(pixProcessed_reg_454, exitcond4_reg_1021_pp0_iter1_reg, ap_CS_fsm_pp0_stage2, pixProcessed_2_reg_1189, ap_enable_reg_pp0_iter1, ap_block_pp0_stage2)
    begin
        if (((exitcond4_reg_1021_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            ap_phi_mux_pixProcessed_phi_fu_458_p4 <= pixProcessed_2_reg_1189;
        else 
            ap_phi_mux_pixProcessed_phi_fu_458_p4 <= pixProcessed_reg_454;
        end if; 
    end process;


    ap_ready_assign_proc : process(outputStream_V_data_V_1_ack_in, outputStream_V_keep_V_1_ack_in, outputStream_V_strb_V_1_ack_in, outputStream_V_user_V_1_ack_in, outputStream_V_last_V_1_ack_in, outputStream_V_id_V_1_ack_in, outputStream_V_dest_V_1_ack_in, ap_CS_fsm_state25)
    begin
        if ((not(((outputStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outputStream_V_id_V_1_ack_in = ap_const_logic_0) or (outputStream_V_last_V_1_ack_in = ap_const_logic_0) or (outputStream_V_user_V_1_ack_in = ap_const_logic_0) or (outputStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outputStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outputStream_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    backimg_address0_assign_proc : process(ap_block_pp1_stage0, tmp_19_reg_1030_pp0_iter1_reg, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp1_stage0, tmp_24_reg_1269, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            backimg_address0 <= tmp_24_reg_1269(16 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            backimg_address0 <= tmp_19_reg_1030_pp0_iter1_reg(16 - 1 downto 0);
        else 
            backimg_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    backimg_ce0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then 
            backimg_ce0 <= ap_const_logic_1;
        else 
            backimg_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    backimg_d0 <= 
        phitmp1_fu_924_p3 when (or_cond_reg_1055_pp0_iter1_reg(0) = '1') else 
        ap_const_lv8_80;

    backimg_we0_assign_proc : process(exitcond4_reg_1021_pp0_iter1_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((exitcond4_reg_1021_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
            backimg_we0 <= ap_const_logic_1;
        else 
            backimg_we0 <= ap_const_logic_0;
        end if; 
    end process;

    col_assign_1_0_2_fu_684_p2 <= std_logic_vector(unsigned(pixProcessed_reg_454) + unsigned(ap_const_lv32_2));
    exitcond1_fu_493_p2 <= "1" when (idxHist_reg_398 = ap_const_lv9_100) else "0";
    exitcond2_fu_510_p2 <= "1" when (i_reg_409 = ap_const_lv16_FAAA) else "0";
    exitcond3_fu_543_p2 <= "1" when (i2_reg_421 = ap_const_lv16_FAAA) else "0";
    exitcond4_fu_577_p2 <= "1" when (ap_phi_mux_i3_phi_fu_470_p4 = ap_const_lv16_FAAA) else "0";
    exitcond_fu_948_p2 <= "1" when (i4_reg_477 = ap_const_lv16_FAAA) else "0";
    grp_otsu_fu_488_ap_start <= grp_otsu_fu_488_ap_start_reg;

    histogram_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state2, histogram_addr_1_reg_987, ap_CS_fsm_state7, grp_otsu_fu_488_histData_address0, ap_CS_fsm_state6, tmp_fu_505_p1, tmp_s_fu_527_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            histogram_address0 <= histogram_addr_1_reg_987;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            histogram_address0 <= tmp_s_fu_527_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            histogram_address0 <= tmp_fu_505_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            histogram_address0 <= grp_otsu_fu_488_histData_address0;
        else 
            histogram_address0 <= "XXXXXXXX";
        end if; 
    end process;


    histogram_ce0_assign_proc : process(inputStream_V_data_V_0_vld_out, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state7, grp_otsu_fu_488_histData_ce0, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((inputStream_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            histogram_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            histogram_ce0 <= grp_otsu_fu_488_histData_ce0;
        else 
            histogram_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    histogram_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, tmp_14_fu_537_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            histogram_d0 <= tmp_14_fu_537_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            histogram_d0 <= ap_const_lv32_0;
        else 
            histogram_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    histogram_we0_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_493_p2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((exitcond1_fu_493_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            histogram_we0 <= ap_const_logic_1;
        else 
            histogram_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_516_p2 <= std_logic_vector(unsigned(i_reg_409) + unsigned(ap_const_lv16_1));
    i_2_fu_549_p2 <= std_logic_vector(unsigned(i2_reg_421) + unsigned(ap_const_lv16_1));
    i_3_fu_954_p2 <= std_logic_vector(unsigned(i4_reg_477) + unsigned(ap_const_lv16_1));
    i_4_fu_583_p2 <= std_logic_vector(unsigned(ap_phi_mux_i3_phi_fu_470_p4) + unsigned(ap_const_lv16_1));
    icmp3_fu_626_p2 <= "1" when (signed(tmp_23_fu_616_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_fu_610_p2 <= "1" when (signed(tmp_22_fu_600_p4) > signed(ap_const_lv31_0)) else "0";
    idxCol_1_fu_734_p3 <= 
        idxCol_reg_1068 when (tmp_26_reg_1062(0) = '1') else 
        ap_const_lv32_0;
    idxCol_fu_644_p2 <= std_logic_vector(unsigned(ap_phi_mux_col_assign_phi_fu_447_p4) + unsigned(ap_const_lv32_1));
    idxHist_1_fu_499_p2 <= std_logic_vector(unsigned(idxHist_reg_398) + unsigned(ap_const_lv9_1));
    idxRow_1_fu_656_p3 <= 
        ap_phi_mux_idxRow_phi_fu_436_p4 when (tmp_26_fu_638_p2(0) = '1') else 
        idxRow_2_fu_650_p2;
    idxRow_2_fu_650_p2 <= std_logic_vector(unsigned(ap_phi_mux_idxRow_phi_fu_436_p4) + unsigned(ap_const_lv32_1));

    img_fifo_address0_assign_proc : process(ap_CS_fsm_state4, ap_block_pp1_stage0, ap_CS_fsm_state8, img_fifo_addr_1_reg_1011, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, tmp_19_fu_589_p1, img_fifo_addr_2_reg_1035_pp0_iter1_reg, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, tmp_24_fu_960_p1, ap_enable_reg_pp0_iter1, ap_CS_fsm_state10, ap_block_pp0_stage0, tmp_15_fu_532_p1, tmp_16_fu_555_p1, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            img_fifo_address0 <= tmp_24_fu_960_p1(16 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            img_fifo_address0 <= img_fifo_addr_2_reg_1035_pp0_iter1_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            img_fifo_address0 <= tmp_19_fu_589_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            img_fifo_address0 <= img_fifo_addr_1_reg_1011;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            img_fifo_address0 <= tmp_16_fu_555_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            img_fifo_address0 <= tmp_15_fu_532_p1(16 - 1 downto 0);
        else 
            img_fifo_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    img_fifo_ce0_assign_proc : process(inputStream_V_data_V_0_vld_out, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((inputStream_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then 
            img_fifo_ce0 <= ap_const_logic_1;
        else 
            img_fifo_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    img_fifo_d0_assign_proc : process(inputStream_V_data_V_0_data_out, ap_CS_fsm_state4, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_CS_fsm_state10, ap_block_pp0_stage3, storemerge_fu_569_p3, valOutputFg1_fu_932_p3)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            img_fifo_d0 <= valOutputFg1_fu_932_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            img_fifo_d0 <= storemerge_fu_569_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            img_fifo_d0 <= inputStream_V_data_V_0_data_out;
        else 
            img_fifo_d0 <= "XXXXXXXX";
        end if; 
    end process;


    img_fifo_we0_assign_proc : process(inputStream_V_data_V_0_vld_out, ap_CS_fsm_state4, exitcond4_reg_1021_pp0_iter1_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter1, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((inputStream_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((exitcond4_reg_1021_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then 
            img_fifo_we0 <= ap_const_logic_1;
        else 
            img_fifo_we0 <= ap_const_logic_0;
        end if; 
    end process;


    inputStream_TDATA_blk_n_assign_proc : process(inputStream_V_data_V_0_state, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            inputStream_TDATA_blk_n <= inputStream_V_data_V_0_state(0);
        else 
            inputStream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inputStream_TREADY <= inputStream_V_dest_V_0_state(1);
    inputStream_V_data_V_0_ack_in <= inputStream_V_data_V_0_state(1);

    inputStream_V_data_V_0_ack_out_assign_proc : process(inputStream_V_data_V_0_vld_out, ap_CS_fsm_state4)
    begin
        if (((inputStream_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            inputStream_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            inputStream_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inputStream_V_data_V_0_data_out_assign_proc : process(inputStream_V_data_V_0_payload_A, inputStream_V_data_V_0_payload_B, inputStream_V_data_V_0_sel)
    begin
        if ((inputStream_V_data_V_0_sel = ap_const_logic_1)) then 
            inputStream_V_data_V_0_data_out <= inputStream_V_data_V_0_payload_B;
        else 
            inputStream_V_data_V_0_data_out <= inputStream_V_data_V_0_payload_A;
        end if; 
    end process;

    inputStream_V_data_V_0_load_A <= (inputStream_V_data_V_0_state_cmp_full and not(inputStream_V_data_V_0_sel_wr));
    inputStream_V_data_V_0_load_B <= (inputStream_V_data_V_0_state_cmp_full and inputStream_V_data_V_0_sel_wr);
    inputStream_V_data_V_0_sel <= inputStream_V_data_V_0_sel_rd;
    inputStream_V_data_V_0_state_cmp_full <= '0' when (inputStream_V_data_V_0_state = ap_const_lv2_1) else '1';
    inputStream_V_data_V_0_vld_in <= inputStream_TVALID;
    inputStream_V_data_V_0_vld_out <= inputStream_V_data_V_0_state(0);

    inputStream_V_dest_V_0_ack_out_assign_proc : process(inputStream_V_data_V_0_vld_out, ap_CS_fsm_state4)
    begin
        if (((inputStream_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            inputStream_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            inputStream_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    inputStream_V_dest_V_0_vld_in <= inputStream_TVALID;

    lineBuff_val_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, tmp_20_reg_1040, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage1, tmp_47_0_1_fu_677_p1, ap_block_pp0_stage3, valInWindow_0_minVal_1_fu_710_p1, valInWindow_0_minVal_3_fu_761_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            lineBuff_val_0_address0 <= valInWindow_0_minVal_3_fu_761_p1(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            lineBuff_val_0_address0 <= valInWindow_0_minVal_1_fu_710_p1(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            lineBuff_val_0_address0 <= tmp_47_0_1_fu_677_p1(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            lineBuff_val_0_address0 <= tmp_20_reg_1040(9 - 1 downto 0);
        else 
            lineBuff_val_0_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    lineBuff_val_0_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage2, tmp_21_fu_664_p1, tmp_47_0_2_fu_690_p1, ap_block_pp0_stage3, valInWindow_0_maxVal_1_fu_747_p1, ap_block_pp0_stage4, valInWindow_0_maxVal_3_fu_777_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            lineBuff_val_0_address1 <= valInWindow_0_maxVal_3_fu_777_p1(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
            lineBuff_val_0_address1 <= valInWindow_0_maxVal_1_fu_747_p1(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            lineBuff_val_0_address1 <= tmp_47_0_2_fu_690_p1(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            lineBuff_val_0_address1 <= tmp_21_fu_664_p1(9 - 1 downto 0);
        else 
            lineBuff_val_0_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    lineBuff_val_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            lineBuff_val_0_ce0 <= ap_const_logic_1;
        else 
            lineBuff_val_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            lineBuff_val_0_ce1 <= ap_const_logic_1;
        else 
            lineBuff_val_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_0_we0_assign_proc : process(exitcond4_reg_1021, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((exitcond4_reg_1021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            lineBuff_val_0_we0 <= ap_const_logic_1;
        else 
            lineBuff_val_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, tmp_20_fu_594_p1, lineBuff_val_1_addr_reg_1045, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage1, tmp_21_fu_664_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
                lineBuff_val_1_address0 <= tmp_21_fu_664_p1(9 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                lineBuff_val_1_address0 <= lineBuff_val_1_addr_reg_1045;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                lineBuff_val_1_address0 <= tmp_20_fu_594_p1(9 - 1 downto 0);
            else 
                lineBuff_val_1_address0 <= "XXXXXXXXX";
            end if;
        else 
            lineBuff_val_1_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    lineBuff_val_1_address1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage2, tmp_47_0_1_fu_677_p1, tmp_47_0_2_fu_690_p1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
                lineBuff_val_1_address1 <= tmp_47_0_2_fu_690_p1(9 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
                lineBuff_val_1_address1 <= tmp_47_0_1_fu_677_p1(9 - 1 downto 0);
            else 
                lineBuff_val_1_address1 <= "XXXXXXXXX";
            end if;
        else 
            lineBuff_val_1_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    lineBuff_val_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            lineBuff_val_1_ce0 <= ap_const_logic_1;
        else 
            lineBuff_val_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            lineBuff_val_1_ce1 <= ap_const_logic_1;
        else 
            lineBuff_val_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_1_we0_assign_proc : process(exitcond4_reg_1021, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((exitcond4_reg_1021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            lineBuff_val_1_we0 <= ap_const_logic_1;
        else 
            lineBuff_val_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, tmp_20_fu_594_p1, lineBuff_val_2_addr_reg_1050, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage1, tmp_21_fu_664_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
                lineBuff_val_2_address0 <= tmp_21_fu_664_p1(9 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                lineBuff_val_2_address0 <= lineBuff_val_2_addr_reg_1050;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                lineBuff_val_2_address0 <= tmp_20_fu_594_p1(9 - 1 downto 0);
            else 
                lineBuff_val_2_address0 <= "XXXXXXXXX";
            end if;
        else 
            lineBuff_val_2_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    lineBuff_val_2_address1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage2, tmp_47_0_1_fu_677_p1, tmp_47_0_2_fu_690_p1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
                lineBuff_val_2_address1 <= tmp_47_0_2_fu_690_p1(9 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
                lineBuff_val_2_address1 <= tmp_47_0_1_fu_677_p1(9 - 1 downto 0);
            else 
                lineBuff_val_2_address1 <= "XXXXXXXXX";
            end if;
        else 
            lineBuff_val_2_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    lineBuff_val_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            lineBuff_val_2_ce0 <= ap_const_logic_1;
        else 
            lineBuff_val_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_2_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            lineBuff_val_2_ce1 <= ap_const_logic_1;
        else 
            lineBuff_val_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lineBuff_val_2_we0_assign_proc : process(exitcond4_reg_1021, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((exitcond4_reg_1021 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            lineBuff_val_2_we0 <= ap_const_logic_1;
        else 
            lineBuff_val_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_cond_fu_632_p2 <= (icmp_fu_610_p2 and icmp3_fu_626_p2);
    outputStream_TDATA <= outputStream_V_data_V_1_data_out;

    outputStream_TDATA_blk_n_assign_proc : process(outputStream_V_data_V_1_state, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, tmp_25_reg_1279, ap_enable_reg_pp1_iter3, tmp_25_reg_1279_pp1_iter2_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0) and (tmp_25_reg_1279_pp1_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0) and (tmp_25_reg_1279_pp1_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0) and (tmp_25_reg_1279 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0) and (tmp_25_reg_1279 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then 
            outputStream_TDATA_blk_n <= outputStream_V_data_V_1_state(1);
        else 
            outputStream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outputStream_TDEST <= outputStream_V_dest_V_1_data_out;
    outputStream_TID <= outputStream_V_id_V_1_data_out;
    outputStream_TKEEP <= outputStream_V_keep_V_1_data_out;
    outputStream_TLAST <= outputStream_V_last_V_1_data_out;
    outputStream_TSTRB <= outputStream_V_strb_V_1_data_out;
    outputStream_TUSER <= outputStream_V_user_V_1_data_out;
    outputStream_TVALID <= outputStream_V_dest_V_1_state(0);
    outputStream_V_data_V_1_ack_in <= outputStream_V_data_V_1_state(1);
    outputStream_V_data_V_1_ack_out <= outputStream_TREADY;

    outputStream_V_data_V_1_data_in_assign_proc : process(ap_enable_reg_pp1_iter2, tmp_25_reg_1279, backimg_q0, ap_block_pp1_stage0_01001)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_01001))) then
            if ((tmp_25_reg_1279 = ap_const_lv1_1)) then 
                outputStream_V_data_V_1_data_in <= ap_const_lv8_FF;
            elsif ((tmp_25_reg_1279 = ap_const_lv1_0)) then 
                outputStream_V_data_V_1_data_in <= backimg_q0;
            else 
                outputStream_V_data_V_1_data_in <= "XXXXXXXX";
            end if;
        else 
            outputStream_V_data_V_1_data_in <= "XXXXXXXX";
        end if; 
    end process;


    outputStream_V_data_V_1_data_out_assign_proc : process(outputStream_V_data_V_1_payload_A, outputStream_V_data_V_1_payload_B, outputStream_V_data_V_1_sel)
    begin
        if ((outputStream_V_data_V_1_sel = ap_const_logic_1)) then 
            outputStream_V_data_V_1_data_out <= outputStream_V_data_V_1_payload_B;
        else 
            outputStream_V_data_V_1_data_out <= outputStream_V_data_V_1_payload_A;
        end if; 
    end process;

    outputStream_V_data_V_1_load_A <= (outputStream_V_data_V_1_state_cmp_full and not(outputStream_V_data_V_1_sel_wr));
    outputStream_V_data_V_1_load_B <= (outputStream_V_data_V_1_state_cmp_full and outputStream_V_data_V_1_sel_wr);
    outputStream_V_data_V_1_sel <= outputStream_V_data_V_1_sel_rd;
    outputStream_V_data_V_1_state_cmp_full <= '0' when (outputStream_V_data_V_1_state = ap_const_lv2_1) else '1';

    outputStream_V_data_V_1_vld_in_assign_proc : process(ap_enable_reg_pp1_iter2, tmp_25_reg_1279, ap_block_pp1_stage0_11001)
    begin
        if ((((tmp_25_reg_1279 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((tmp_25_reg_1279 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            outputStream_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            outputStream_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outputStream_V_data_V_1_vld_out <= outputStream_V_data_V_1_state(0);
    outputStream_V_dest_V_1_ack_in <= outputStream_V_dest_V_1_state(1);
    outputStream_V_dest_V_1_ack_out <= outputStream_TREADY;
    outputStream_V_dest_V_1_data_out <= ap_const_lv6_0;
    outputStream_V_dest_V_1_sel <= outputStream_V_dest_V_1_sel_rd;

    outputStream_V_dest_V_1_vld_in_assign_proc : process(ap_enable_reg_pp1_iter2, tmp_25_reg_1279, ap_block_pp1_stage0_11001)
    begin
        if ((((tmp_25_reg_1279 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((tmp_25_reg_1279 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            outputStream_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            outputStream_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outputStream_V_dest_V_1_vld_out <= outputStream_V_dest_V_1_state(0);
    outputStream_V_id_V_1_ack_in <= outputStream_V_id_V_1_state(1);
    outputStream_V_id_V_1_ack_out <= outputStream_TREADY;
    outputStream_V_id_V_1_data_out <= ap_const_lv2_0;
    outputStream_V_id_V_1_sel <= outputStream_V_id_V_1_sel_rd;

    outputStream_V_id_V_1_vld_in_assign_proc : process(ap_enable_reg_pp1_iter2, tmp_25_reg_1279, ap_block_pp1_stage0_11001)
    begin
        if ((((tmp_25_reg_1279 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((tmp_25_reg_1279 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            outputStream_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            outputStream_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outputStream_V_id_V_1_vld_out <= outputStream_V_id_V_1_state(0);
    outputStream_V_keep_V_1_ack_in <= outputStream_V_keep_V_1_state(1);
    outputStream_V_keep_V_1_ack_out <= outputStream_TREADY;
    outputStream_V_keep_V_1_data_out <= ap_const_lv1_1;
    outputStream_V_keep_V_1_sel <= outputStream_V_keep_V_1_sel_rd;

    outputStream_V_keep_V_1_vld_in_assign_proc : process(ap_enable_reg_pp1_iter2, tmp_25_reg_1279, ap_block_pp1_stage0_11001)
    begin
        if ((((tmp_25_reg_1279 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((tmp_25_reg_1279 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            outputStream_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            outputStream_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outputStream_V_keep_V_1_vld_out <= outputStream_V_keep_V_1_state(0);
    outputStream_V_last_V_1_ack_in <= outputStream_V_last_V_1_state(1);
    outputStream_V_last_V_1_ack_out <= outputStream_TREADY;
    outputStream_V_last_V_1_data_out <= ap_const_lv1_0;
    outputStream_V_last_V_1_sel <= outputStream_V_last_V_1_sel_rd;

    outputStream_V_last_V_1_vld_in_assign_proc : process(ap_enable_reg_pp1_iter2, tmp_25_reg_1279, ap_block_pp1_stage0_11001)
    begin
        if ((((tmp_25_reg_1279 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((tmp_25_reg_1279 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            outputStream_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            outputStream_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outputStream_V_last_V_1_vld_out <= outputStream_V_last_V_1_state(0);
    outputStream_V_strb_V_1_ack_in <= outputStream_V_strb_V_1_state(1);
    outputStream_V_strb_V_1_ack_out <= outputStream_TREADY;
    outputStream_V_strb_V_1_data_out <= ap_const_lv1_1;
    outputStream_V_strb_V_1_sel <= outputStream_V_strb_V_1_sel_rd;

    outputStream_V_strb_V_1_vld_in_assign_proc : process(ap_enable_reg_pp1_iter2, tmp_25_reg_1279, ap_block_pp1_stage0_11001)
    begin
        if ((((tmp_25_reg_1279 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((tmp_25_reg_1279 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            outputStream_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            outputStream_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outputStream_V_strb_V_1_vld_out <= outputStream_V_strb_V_1_state(0);
    outputStream_V_user_V_1_ack_in <= outputStream_V_user_V_1_state(1);
    outputStream_V_user_V_1_ack_out <= outputStream_TREADY;
    outputStream_V_user_V_1_data_out <= ap_const_lv5_1;
    outputStream_V_user_V_1_sel <= outputStream_V_user_V_1_sel_rd;

    outputStream_V_user_V_1_vld_in_assign_proc : process(ap_enable_reg_pp1_iter2, tmp_25_reg_1279, ap_block_pp1_stage0_11001)
    begin
        if ((((tmp_25_reg_1279 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((tmp_25_reg_1279 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            outputStream_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            outputStream_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outputStream_V_user_V_1_vld_out <= outputStream_V_user_V_1_state(0);
    phitmp1_fu_924_p3 <= 
        ap_const_lv8_80 when (phitmp_fu_918_p2(0) = '1') else 
        ap_const_lv8_0;
    phitmp_fu_918_p2 <= "1" when (valOutputBg_fu_912_p3 = ap_const_lv8_0) else "0";
    pixProcessed_1_fu_728_p3 <= 
        pixProcessed_3_reg_1083 when (or_cond_reg_1055(0) = '1') else 
        pixProcessed_reg_454;
    pixProcessed_2_fu_740_p3 <= 
        pixProcessed_1_fu_728_p3 when (tmp_26_reg_1062(0) = '1') else 
        ap_const_lv32_0;
    pixProcessed_3_fu_671_p2 <= std_logic_vector(unsigned(ap_phi_mux_pixProcessed_phi_fu_458_p4) + unsigned(ap_const_lv32_1));
    storemerge_fu_569_p3 <= 
        ap_const_lv8_FF when (tmp_18_reg_1016(0) = '1') else 
        ap_const_lv8_0;
    tmp_14_fu_537_p2 <= std_logic_vector(unsigned(histogram_load_reg_992) + unsigned(ap_const_lv32_1));
    tmp_15_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_409),64));
    tmp_16_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_reg_421),64));
    tmp_17_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(img_fifo_q0),32));
    tmp_18_fu_564_p2 <= "1" when (signed(tmp_17_fu_560_p1) > signed(t_reg_997)) else "0";
    tmp_19_0_1_i_fu_697_p2 <= "1" when (unsigned(lineBuff_val_0_q0) < unsigned(lineBuff_val_0_q1)) else "0";
    tmp_19_0_2_i_fu_751_p2 <= "1" when (unsigned(lineBuff_val_0_load_2_reg_1194) < unsigned(lineBuff_val_0_load_3_reg_1216)) else "0";
    tmp_19_1_1_i_fu_794_p2 <= "1" when (unsigned(lineBuff_val_1_load_2_reg_1134) < unsigned(valInWindow_0_minVal_4_fu_787_p3)) else "0";
    tmp_19_1_2_i_fu_830_p2 <= "1" when (unsigned(lineBuff_val_1_load_3_reg_1200) < unsigned(valInWindow_0_minVal_5_reg_1236)) else "0";
    tmp_19_1_i_fu_782_p2 <= "1" when (unsigned(lineBuff_val_1_load_1_reg_1126) < unsigned(lineBuff_val_0_q0)) else "0";
    tmp_19_2_1_i_fu_852_p2 <= "1" when (unsigned(lineBuff_val_2_load_2_reg_1155) < unsigned(valInWindow_0_minVal_7_fu_845_p3)) else "0";
    tmp_19_2_2_i_fu_898_p2 <= "1" when (unsigned(lineBuff_val_2_load_3_reg_1208) < unsigned(valInWindow_0_minVal_8_reg_1248)) else "0";
    tmp_19_2_i_fu_840_p2 <= "1" when (unsigned(lineBuff_val_2_load_1_reg_1147) < unsigned(valInWindow_0_minVal_6_fu_834_p3)) else "0";
    tmp_19_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i3_phi_fu_470_p4),64));
    tmp_20_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_col_assign_phi_fu_447_p4),64));
    tmp_21_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_pixProcessed_phi_fu_458_p4),64));
    tmp_22_fu_600_p4 <= ap_phi_mux_idxRow_phi_fu_436_p4(31 downto 1);
    tmp_23_fu_616_p4 <= ap_phi_mux_col_assign_phi_fu_447_p4(31 downto 1);
    tmp_24_0_1_i_fu_715_p2 <= "1" when (unsigned(lineBuff_val_0_q0) > unsigned(lineBuff_val_0_q1)) else "0";
    tmp_24_0_2_i_fu_766_p2 <= "1" when (unsigned(lineBuff_val_0_load_2_reg_1194) > unsigned(lineBuff_val_0_q1)) else "0";
    tmp_24_1_1_i_fu_818_p2 <= "1" when (unsigned(lineBuff_val_1_load_2_reg_1134) > unsigned(valInWindow_0_maxVal_4_fu_811_p3)) else "0";
    tmp_24_1_2_i_fu_864_p2 <= "1" when (unsigned(lineBuff_val_1_load_3_reg_1200) > unsigned(valInWindow_0_maxVal_5_reg_1242)) else "0";
    tmp_24_1_i_fu_806_p2 <= "1" when (unsigned(lineBuff_val_1_load_1_reg_1126) > unsigned(lineBuff_val_0_q1)) else "0";
    tmp_24_2_1_i_fu_886_p2 <= "1" when (unsigned(lineBuff_val_2_load_2_reg_1155) > unsigned(valInWindow_0_maxVal_7_fu_879_p3)) else "0";
    tmp_24_2_2_i_fu_908_p2 <= "1" when (unsigned(lineBuff_val_2_load_3_reg_1208) > unsigned(valInWindow_0_maxVal_8_reg_1254)) else "0";
    tmp_24_2_i_fu_874_p2 <= "1" when (unsigned(lineBuff_val_2_load_1_reg_1147) > unsigned(valInWindow_0_maxVal_6_fu_868_p3)) else "0";
    tmp_24_fu_960_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_reg_477),64));
    tmp_25_fu_965_p2 <= "1" when (img_fifo_q0 = ap_const_lv8_FF) else "0";
    tmp_26_fu_638_p2 <= "1" when (signed(ap_phi_mux_col_assign_phi_fu_447_p4) < signed(ap_const_lv32_135)) else "0";
    tmp_47_0_1_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixProcessed_3_fu_671_p2),64));
    tmp_47_0_2_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_assign_1_0_2_fu_684_p2),64));
    tmp_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idxHist_reg_398),64));
    tmp_s_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inputStream_V_data_V_0_data_out),64));
    valInWindow_0_maxVal_1_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(valInWindow_0_maxVal_reg_1178),64));
    valInWindow_0_maxVal_2_fu_771_p3 <= 
        col_assign_1_0_2_reg_1115 when (tmp_24_0_2_i_fu_766_p2(0) = '1') else 
        valInWindow_0_maxVal_reg_1178;
    valInWindow_0_maxVal_3_fu_777_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(valInWindow_0_maxVal_2_fu_771_p3),64));
    valInWindow_0_maxVal_4_fu_811_p3 <= 
        lineBuff_val_1_load_1_reg_1126 when (tmp_24_1_i_fu_806_p2(0) = '1') else 
        lineBuff_val_0_q1;
    valInWindow_0_maxVal_5_fu_823_p3 <= 
        lineBuff_val_1_load_2_reg_1134 when (tmp_24_1_1_i_fu_818_p2(0) = '1') else 
        valInWindow_0_maxVal_4_fu_811_p3;
    valInWindow_0_maxVal_6_fu_868_p3 <= 
        lineBuff_val_1_load_3_reg_1200 when (tmp_24_1_2_i_fu_864_p2(0) = '1') else 
        valInWindow_0_maxVal_5_reg_1242;
    valInWindow_0_maxVal_7_fu_879_p3 <= 
        lineBuff_val_2_load_1_reg_1147 when (tmp_24_2_i_fu_874_p2(0) = '1') else 
        valInWindow_0_maxVal_6_fu_868_p3;
    valInWindow_0_maxVal_8_fu_891_p3 <= 
        lineBuff_val_2_load_2_reg_1155 when (tmp_24_2_1_i_fu_886_p2(0) = '1') else 
        valInWindow_0_maxVal_7_fu_879_p3;
    valInWindow_0_maxVal_fu_721_p3 <= 
        pixProcessed_3_reg_1083 when (tmp_24_0_1_i_fu_715_p2(0) = '1') else 
        pixProcessed_reg_454;
    valInWindow_0_minVal_1_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(valInWindow_0_minVal_fu_703_p3),64));
    valInWindow_0_minVal_2_fu_755_p3 <= 
        col_assign_1_0_2_reg_1115 when (tmp_19_0_2_i_fu_751_p2(0) = '1') else 
        valInWindow_0_minVal_reg_1168;
    valInWindow_0_minVal_3_fu_761_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(valInWindow_0_minVal_2_fu_755_p3),64));
    valInWindow_0_minVal_4_fu_787_p3 <= 
        lineBuff_val_1_load_1_reg_1126 when (tmp_19_1_i_fu_782_p2(0) = '1') else 
        lineBuff_val_0_q0;
    valInWindow_0_minVal_5_fu_799_p3 <= 
        lineBuff_val_1_load_2_reg_1134 when (tmp_19_1_1_i_fu_794_p2(0) = '1') else 
        valInWindow_0_minVal_4_fu_787_p3;
    valInWindow_0_minVal_6_fu_834_p3 <= 
        lineBuff_val_1_load_3_reg_1200 when (tmp_19_1_2_i_fu_830_p2(0) = '1') else 
        valInWindow_0_minVal_5_reg_1236;
    valInWindow_0_minVal_7_fu_845_p3 <= 
        lineBuff_val_2_load_1_reg_1147 when (tmp_19_2_i_fu_840_p2(0) = '1') else 
        valInWindow_0_minVal_6_fu_834_p3;
    valInWindow_0_minVal_8_fu_857_p3 <= 
        lineBuff_val_2_load_2_reg_1155 when (tmp_19_2_1_i_fu_852_p2(0) = '1') else 
        valInWindow_0_minVal_7_fu_845_p3;
    valInWindow_0_minVal_fu_703_p3 <= 
        pixProcessed_3_reg_1083 when (tmp_19_0_1_i_fu_697_p2(0) = '1') else 
        pixProcessed_reg_454;
    valOutputBg_fu_912_p3 <= 
        lineBuff_val_2_load_3_reg_1208 when (tmp_24_2_2_i_fu_908_p2(0) = '1') else 
        valInWindow_0_maxVal_8_reg_1254;
    valOutputFg1_fu_932_p3 <= 
        valOutputFg_fu_902_p3 when (or_cond_reg_1055_pp0_iter1_reg(0) = '1') else 
        ap_const_lv8_0;
    valOutputFg_fu_902_p3 <= 
        lineBuff_val_2_load_3_reg_1208 when (tmp_19_2_2_i_fu_898_p2(0) = '1') else 
        valInWindow_0_minVal_8_reg_1248;
end behav;
