-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity otsu is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    histData_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    histData_ce0 : OUT STD_LOGIC;
    histData_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of otsu is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (64 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (64 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (64 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (64 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (64 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (64 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (64 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (64 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (64 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (64 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (64 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_FAAA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001111101010101010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_148 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_5_reg_436 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_135_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_fu_118_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_159 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal grp_fu_123_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_167 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal t_cast2_fu_173_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_cast2_reg_386 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal t_1_fu_183_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal t_1_reg_394 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_209_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_425 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal threshold_3_cast1_fu_214_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal threshold_3_cast1_reg_430 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal t_2_fu_226_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal t_2_reg_440 : STD_LOGIC_VECTOR (8 downto 0);
    signal wB_1_fu_237_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal wB_1_reg_450 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_456 : STD_LOGIC_VECTOR (0 downto 0);
    signal wF_fu_249_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal wF_reg_460 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_261_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_468 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal tmp_9_reg_478 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_138_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_483 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_127_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mB_reg_489 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal grp_fu_131_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mF_reg_494 : STD_LOGIC_VECTOR (31 downto 0);
    signal varMax_1_fu_363_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal varMax_1_reg_499 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal threshold_1_fu_371_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal threshold_1_reg_504 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_reg_72 : STD_LOGIC_VECTOR (8 downto 0);
    signal sum_reg_83 : STD_LOGIC_VECTOR (31 downto 0);
    signal wB_reg_95 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal threshold_2_reg_107 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_189_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_232_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal threshold_fu_40 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sumB_fu_44 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal varMax_fu_48 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_118_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_118_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal grp_fu_123_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_123_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal grp_fu_135_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_1_fu_209_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal wB_1_fu_237_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_261_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal varBetween_to_int_fu_279_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal varMax_to_int_fu_297_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_283_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_293_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_301_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_311_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs4_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs3_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_118_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (64 downto 0);

    component make_marker_faddfbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component make_marker_fmul_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component make_marker_fdiv_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component make_marker_sitofeOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component make_marker_fcmp_fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    make_marker_faddfbkb_U1 : component make_marker_faddfbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_118_p0,
        din1 => grp_fu_118_p1,
        opcode => grp_fu_118_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_118_p2);

    make_marker_fmul_cud_U2 : component make_marker_fmul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_123_p0,
        din1 => grp_fu_123_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_123_p2);

    make_marker_fdiv_dEe_U3 : component make_marker_fdiv_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_159,
        din1 => reg_152,
        ce => ap_const_logic_1,
        dout => grp_fu_127_p2);

    make_marker_fdiv_dEe_U4 : component make_marker_fdiv_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_9_reg_478,
        din1 => tmp_10_reg_483,
        ce => ap_const_logic_1,
        dout => grp_fu_131_p2);

    make_marker_sitofeOg_U5 : component make_marker_sitofeOg
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_135_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_135_p1);

    make_marker_sitofeOg_U6 : component make_marker_sitofeOg
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => wF_reg_460,
        ce => ap_const_logic_1,
        dout => grp_fu_138_p1);

    make_marker_fcmp_fYi_U7 : component make_marker_fcmp_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => reg_167,
        din1 => varMax_fu_48,
        opcode => ap_const_lv5_2,
        dout => tmp_21_fu_141_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    sumB_fu_44_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                sumB_fu_44 <= reg_159;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_177_p2 = ap_const_lv1_1))) then 
                sumB_fu_44 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum_reg_83_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                sum_reg_83 <= grp_fu_118_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sum_reg_83 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    t_reg_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                t_reg_72 <= t_1_reg_394;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_reg_72 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    threshold_2_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
                threshold_2_reg_107 <= t_2_reg_440;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_177_p2 = ap_const_lv1_1))) then 
                threshold_2_reg_107 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    threshold_fu_40_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state65) and (tmp_8_reg_456 = ap_const_lv1_0))) then 
                threshold_fu_40 <= threshold_1_reg_504;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_177_p2 = ap_const_lv1_1))) then 
                threshold_fu_40 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    varMax_fu_48_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state65) and (tmp_8_reg_456 = ap_const_lv1_0))) then 
                varMax_fu_48 <= varMax_1_reg_499;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_177_p2 = ap_const_lv1_1))) then 
                varMax_fu_48 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    wB_reg_95_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
                wB_reg_95 <= wB_1_reg_450;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_177_p2 = ap_const_lv1_1))) then 
                wB_reg_95 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                mB_reg_489 <= grp_fu_127_p2;
                mF_reg_494 <= grp_fu_131_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_5_reg_436 = ap_const_lv1_0)))) then
                reg_148 <= histData_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_152 <= grp_fu_135_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state15))) then
                reg_159 <= grp_fu_118_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state38))) then
                reg_167 <= grp_fu_123_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                t_1_reg_394 <= t_1_fu_183_p2;
                    t_cast2_reg_386(8 downto 0) <= t_cast2_fu_173_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                t_2_reg_440 <= t_2_fu_226_p2;
                    threshold_3_cast1_reg_430(8 downto 0) <= threshold_3_cast1_fu_214_p1(8 downto 0);
                tmp_5_reg_436 <= threshold_2_reg_107(8 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then
                threshold_1_reg_504 <= threshold_1_fu_371_p3;
                varMax_1_reg_499 <= varMax_1_fu_363_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                tmp_10_reg_483 <= grp_fu_138_p1;
                tmp_9_reg_478 <= grp_fu_118_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_1_reg_425 <= tmp_1_fu_209_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                tmp_3_reg_468 <= tmp_3_fu_261_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_5_reg_436 = ap_const_lv1_0))) then
                tmp_8_reg_456 <= tmp_8_fu_243_p2;
                wB_1_reg_450 <= wB_1_fu_237_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_8_fu_243_p2 = ap_const_lv1_0) and (tmp_5_reg_436 = ap_const_lv1_0))) then
                wF_reg_460 <= wF_fu_249_p2;
            end if;
        end if;
    end process;
    t_cast2_reg_386(31 downto 9) <= "00000000000000000000000";
    threshold_3_cast1_reg_430(31 downto 9) <= "00000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state17, tmp_5_reg_436, ap_CS_fsm_state2, exitcond_fu_177_p2, tmp_8_fu_243_p2, tmp_s_fu_255_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_177_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and ((tmp_5_reg_436 = ap_const_lv1_1) or ((tmp_s_fu_255_p2 = ap_const_lv1_1) and (tmp_8_fu_243_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_s_fu_255_p2 = ap_const_lv1_0) and (tmp_8_fu_243_p2 = ap_const_lv1_0) and (tmp_5_reg_436 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state65;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state17, tmp_5_reg_436, tmp_8_fu_243_p2, tmp_s_fu_255_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state17) and ((tmp_5_reg_436 = ap_const_lv1_1) or ((tmp_s_fu_255_p2 = ap_const_lv1_1) and (tmp_8_fu_243_p2 = ap_const_lv1_0)))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state17, tmp_5_reg_436, tmp_8_fu_243_p2, tmp_s_fu_255_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) and ((tmp_5_reg_436 = ap_const_lv1_1) or ((tmp_s_fu_255_p2 = ap_const_lv1_1) and (tmp_8_fu_243_p2 = ap_const_lv1_0))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= threshold_fu_40;
    exitcond_fu_177_p2 <= "1" when (t_reg_72 = ap_const_lv9_100) else "0";

    grp_fu_118_opcode_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state11, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            grp_fu_118_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            grp_fu_118_opcode <= ap_const_lv2_0;
        else 
            grp_fu_118_opcode <= "XX";
        end if; 
    end process;


    grp_fu_118_p0_assign_proc : process(ap_CS_fsm_state25, mB_reg_489, sum_reg_83, sumB_fu_44, ap_CS_fsm_state30, ap_CS_fsm_state11, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_fu_118_p0 <= mB_reg_489;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_118_p0 <= sumB_fu_44;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            grp_fu_118_p0 <= sum_reg_83;
        else 
            grp_fu_118_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_118_p1_assign_proc : process(reg_152, reg_159, ap_CS_fsm_state25, mF_reg_494, ap_CS_fsm_state30, ap_CS_fsm_state11, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_fu_118_p1 <= mF_reg_494;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_118_p1 <= reg_159;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            grp_fu_118_p1 <= reg_152;
        else 
            grp_fu_118_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_123_p0_assign_proc : process(reg_152, reg_167, ap_CS_fsm_state35, ap_CS_fsm_state56, ap_CS_fsm_state60)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state56))) then 
            grp_fu_123_p0 <= reg_167;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_123_p0 <= reg_152;
        else 
            grp_fu_123_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_123_p1_assign_proc : process(reg_159, tmp_10_reg_483, ap_CS_fsm_state35, ap_CS_fsm_state56, ap_CS_fsm_state60)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state56))) then 
            grp_fu_123_p1 <= reg_159;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_123_p1 <= tmp_10_reg_483;
        else 
            grp_fu_123_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_135_p0_assign_proc : process(ap_CS_fsm_state29, tmp_1_reg_425, wB_1_reg_450, tmp_3_reg_468, ap_CS_fsm_state5, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_135_p0 <= wB_1_reg_450;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_135_p0 <= tmp_3_reg_468;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_135_p0 <= tmp_1_reg_425;
        else 
            grp_fu_135_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    histData_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state16, tmp_fu_189_p1, tmp_6_fu_232_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            histData_address0 <= tmp_6_fu_232_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            histData_address0 <= tmp_fu_189_p1(8 - 1 downto 0);
        else 
            histData_address0 <= "XXXXXXXX";
        end if; 
    end process;


    histData_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            histData_ce0 <= ap_const_logic_1;
        else 
            histData_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    notlhs3_fu_333_p2 <= "0" when (tmp_16_fu_301_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_315_p2 <= "0" when (tmp_14_fu_283_p4 = ap_const_lv8_FF) else "1";
    notrhs4_fu_339_p2 <= "1" when (tmp_17_fu_311_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_321_p2 <= "1" when (tmp_15_fu_293_p1 = ap_const_lv23_0) else "0";
    t_1_fu_183_p2 <= std_logic_vector(unsigned(t_reg_72) + unsigned(ap_const_lv9_1));
    t_2_fu_226_p2 <= std_logic_vector(unsigned(threshold_2_reg_107) + unsigned(ap_const_lv9_1));
    t_cast2_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_reg_72),32));
    threshold_1_fu_371_p3 <= 
        threshold_3_cast1_reg_430 when (tmp_22_fu_357_p2(0) = '1') else 
        threshold_fu_40;
    threshold_3_cast1_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(threshold_2_reg_107),32));
    tmp_14_fu_283_p4 <= varBetween_to_int_fu_279_p1(30 downto 23);
    tmp_15_fu_293_p1 <= varBetween_to_int_fu_279_p1(23 - 1 downto 0);
    tmp_16_fu_301_p4 <= varMax_to_int_fu_297_p1(30 downto 23);
    tmp_17_fu_311_p1 <= varMax_to_int_fu_297_p1(23 - 1 downto 0);
    tmp_18_fu_327_p2 <= (notrhs_fu_321_p2 or notlhs_fu_315_p2);
    tmp_19_fu_345_p2 <= (notrhs4_fu_339_p2 or notlhs3_fu_333_p2);
    tmp_1_fu_209_p1 <= t_cast2_reg_386(9 - 1 downto 0);
    tmp_1_fu_209_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_148) * signed('0' &tmp_1_fu_209_p1))), 32));
    tmp_20_fu_351_p2 <= (tmp_19_fu_345_p2 and tmp_18_fu_327_p2);
    tmp_22_fu_357_p2 <= (tmp_21_fu_141_p2 and tmp_20_fu_351_p2);
    tmp_3_fu_261_p1 <= threshold_3_cast1_reg_430(9 - 1 downto 0);
    tmp_3_fu_261_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_148) * signed('0' &tmp_3_fu_261_p1))), 32));
    tmp_6_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(threshold_2_reg_107),64));
    tmp_8_fu_243_p2 <= "1" when (wB_1_fu_237_p2 = ap_const_lv32_0) else "0";
    tmp_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_reg_72),64));
    tmp_s_fu_255_p2 <= "1" when (wB_1_fu_237_p2 = ap_const_lv32_FAAA) else "0";
    varBetween_to_int_fu_279_p1 <= reg_167;
    varMax_1_fu_363_p3 <= 
        reg_167 when (tmp_22_fu_357_p2(0) = '1') else 
        varMax_fu_48;
    varMax_to_int_fu_297_p1 <= varMax_fu_48;
    wB_1_fu_237_p0 <= histData_q0;
    wB_1_fu_237_p2 <= std_logic_vector(signed(wB_1_fu_237_p0) + signed(wB_reg_95));
    wF_fu_249_p2 <= std_logic_vector(unsigned(ap_const_lv32_FAAA) - unsigned(wB_1_fu_237_p2));
end behav;
