// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "make_marker.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic make_marker::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic make_marker::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<18> make_marker::ap_ST_fsm_state1 = "1";
const sc_lv<18> make_marker::ap_ST_fsm_state2 = "10";
const sc_lv<18> make_marker::ap_ST_fsm_state3 = "100";
const sc_lv<18> make_marker::ap_ST_fsm_state4 = "1000";
const sc_lv<18> make_marker::ap_ST_fsm_state5 = "10000";
const sc_lv<18> make_marker::ap_ST_fsm_state6 = "100000";
const sc_lv<18> make_marker::ap_ST_fsm_state7 = "1000000";
const sc_lv<18> make_marker::ap_ST_fsm_state8 = "10000000";
const sc_lv<18> make_marker::ap_ST_fsm_state9 = "100000000";
const sc_lv<18> make_marker::ap_ST_fsm_state10 = "1000000000";
const sc_lv<18> make_marker::ap_ST_fsm_pp0_stage0 = "10000000000";
const sc_lv<18> make_marker::ap_ST_fsm_pp0_stage1 = "100000000000";
const sc_lv<18> make_marker::ap_ST_fsm_pp0_stage2 = "1000000000000";
const sc_lv<18> make_marker::ap_ST_fsm_pp0_stage3 = "10000000000000";
const sc_lv<18> make_marker::ap_ST_fsm_pp0_stage4 = "100000000000000";
const sc_lv<18> make_marker::ap_ST_fsm_state20 = "1000000000000000";
const sc_lv<18> make_marker::ap_ST_fsm_pp1_stage0 = "10000000000000000";
const sc_lv<18> make_marker::ap_ST_fsm_state25 = "100000000000000000";
const sc_lv<32> make_marker::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool make_marker::ap_const_boolean_1 = true;
const sc_lv<1> make_marker::ap_const_lv1_0 = "0";
const sc_lv<1> make_marker::ap_const_lv1_1 = "1";
const sc_lv<2> make_marker::ap_const_lv2_0 = "00";
const sc_lv<2> make_marker::ap_const_lv2_2 = "10";
const sc_lv<2> make_marker::ap_const_lv2_3 = "11";
const sc_lv<2> make_marker::ap_const_lv2_1 = "1";
const sc_lv<32> make_marker::ap_const_lv32_3 = "11";
const bool make_marker::ap_const_boolean_0 = false;
const int make_marker::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> make_marker::ap_const_lv32_1 = "1";
const sc_lv<32> make_marker::ap_const_lv32_2 = "10";
const sc_lv<32> make_marker::ap_const_lv32_4 = "100";
const sc_lv<32> make_marker::ap_const_lv32_6 = "110";
const sc_lv<32> make_marker::ap_const_lv32_7 = "111";
const sc_lv<32> make_marker::ap_const_lv32_8 = "1000";
const sc_lv<32> make_marker::ap_const_lv32_A = "1010";
const sc_lv<32> make_marker::ap_const_lv32_C = "1100";
const sc_lv<32> make_marker::ap_const_lv32_D = "1101";
const sc_lv<32> make_marker::ap_const_lv32_E = "1110";
const sc_lv<32> make_marker::ap_const_lv32_B = "1011";
const sc_lv<32> make_marker::ap_const_lv32_10 = "10000";
const sc_lv<32> make_marker::ap_const_lv32_F = "1111";
const sc_lv<9> make_marker::ap_const_lv9_0 = "000000000";
const sc_lv<32> make_marker::ap_const_lv32_5 = "101";
const sc_lv<16> make_marker::ap_const_lv16_0 = "0000000000000000";
const sc_lv<32> make_marker::ap_const_lv32_9 = "1001";
const sc_lv<8> make_marker::ap_const_lv8_FF = "11111111";
const sc_lv<5> make_marker::ap_const_lv5_1 = "1";
const sc_lv<6> make_marker::ap_const_lv6_0 = "000000";
const sc_lv<9> make_marker::ap_const_lv9_100 = "100000000";
const sc_lv<9> make_marker::ap_const_lv9_1 = "1";
const sc_lv<16> make_marker::ap_const_lv16_FAAA = "1111101010101010";
const sc_lv<16> make_marker::ap_const_lv16_1 = "1";
const sc_lv<8> make_marker::ap_const_lv8_0 = "00000000";
const sc_lv<32> make_marker::ap_const_lv32_1F = "11111";
const sc_lv<31> make_marker::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<32> make_marker::ap_const_lv32_135 = "100110101";
const sc_lv<8> make_marker::ap_const_lv8_80 = "10000000";
const sc_lv<32> make_marker::ap_const_lv32_11 = "10001";

make_marker::make_marker(sc_module_name name) : sc_module(name), mVcdFile(0) {
    make_marker_ctrl_bus_s_axi_U = new make_marker_ctrl_bus_s_axi<C_S_AXI_CTRL_BUS_ADDR_WIDTH,C_S_AXI_CTRL_BUS_DATA_WIDTH>("make_marker_ctrl_bus_s_axi_U");
    make_marker_ctrl_bus_s_axi_U->AWVALID(s_axi_ctrl_bus_AWVALID);
    make_marker_ctrl_bus_s_axi_U->AWREADY(s_axi_ctrl_bus_AWREADY);
    make_marker_ctrl_bus_s_axi_U->AWADDR(s_axi_ctrl_bus_AWADDR);
    make_marker_ctrl_bus_s_axi_U->WVALID(s_axi_ctrl_bus_WVALID);
    make_marker_ctrl_bus_s_axi_U->WREADY(s_axi_ctrl_bus_WREADY);
    make_marker_ctrl_bus_s_axi_U->WDATA(s_axi_ctrl_bus_WDATA);
    make_marker_ctrl_bus_s_axi_U->WSTRB(s_axi_ctrl_bus_WSTRB);
    make_marker_ctrl_bus_s_axi_U->ARVALID(s_axi_ctrl_bus_ARVALID);
    make_marker_ctrl_bus_s_axi_U->ARREADY(s_axi_ctrl_bus_ARREADY);
    make_marker_ctrl_bus_s_axi_U->ARADDR(s_axi_ctrl_bus_ARADDR);
    make_marker_ctrl_bus_s_axi_U->RVALID(s_axi_ctrl_bus_RVALID);
    make_marker_ctrl_bus_s_axi_U->RREADY(s_axi_ctrl_bus_RREADY);
    make_marker_ctrl_bus_s_axi_U->RDATA(s_axi_ctrl_bus_RDATA);
    make_marker_ctrl_bus_s_axi_U->RRESP(s_axi_ctrl_bus_RRESP);
    make_marker_ctrl_bus_s_axi_U->BVALID(s_axi_ctrl_bus_BVALID);
    make_marker_ctrl_bus_s_axi_U->BREADY(s_axi_ctrl_bus_BREADY);
    make_marker_ctrl_bus_s_axi_U->BRESP(s_axi_ctrl_bus_BRESP);
    make_marker_ctrl_bus_s_axi_U->ACLK(ap_clk);
    make_marker_ctrl_bus_s_axi_U->ARESET(ap_rst_n_inv);
    make_marker_ctrl_bus_s_axi_U->ACLK_EN(ap_var_for_const0);
    make_marker_ctrl_bus_s_axi_U->ap_start(ap_start);
    make_marker_ctrl_bus_s_axi_U->interrupt(interrupt);
    make_marker_ctrl_bus_s_axi_U->ap_ready(ap_ready);
    make_marker_ctrl_bus_s_axi_U->ap_done(ap_done);
    make_marker_ctrl_bus_s_axi_U->ap_idle(ap_idle);
    histogram_U = new make_marker_histog8j("histogram_U");
    histogram_U->clk(ap_clk);
    histogram_U->reset(ap_rst_n_inv);
    histogram_U->address0(histogram_address0);
    histogram_U->ce0(histogram_ce0);
    histogram_U->we0(histogram_we0);
    histogram_U->d0(histogram_d0);
    histogram_U->q0(histogram_q0);
    img_fifo_U = new make_marker_img_fhbi("img_fifo_U");
    img_fifo_U->clk(ap_clk);
    img_fifo_U->reset(ap_rst_n_inv);
    img_fifo_U->address0(img_fifo_address0);
    img_fifo_U->ce0(img_fifo_ce0);
    img_fifo_U->we0(img_fifo_we0);
    img_fifo_U->d0(img_fifo_d0);
    img_fifo_U->q0(img_fifo_q0);
    backimg_U = new make_marker_img_fhbi("backimg_U");
    backimg_U->clk(ap_clk);
    backimg_U->reset(ap_rst_n_inv);
    backimg_U->address0(backimg_address0);
    backimg_U->ce0(backimg_ce0);
    backimg_U->we0(backimg_we0);
    backimg_U->d0(backimg_d0);
    backimg_U->q0(backimg_q0);
    lineBuff_val_0_U = new make_marker_lineBibs("lineBuff_val_0_U");
    lineBuff_val_0_U->clk(ap_clk);
    lineBuff_val_0_U->reset(ap_rst_n_inv);
    lineBuff_val_0_U->address0(lineBuff_val_0_address0);
    lineBuff_val_0_U->ce0(lineBuff_val_0_ce0);
    lineBuff_val_0_U->we0(lineBuff_val_0_we0);
    lineBuff_val_0_U->d0(lineBuff_val_1_q0);
    lineBuff_val_0_U->q0(lineBuff_val_0_q0);
    lineBuff_val_0_U->address1(lineBuff_val_0_address1);
    lineBuff_val_0_U->ce1(lineBuff_val_0_ce1);
    lineBuff_val_0_U->q1(lineBuff_val_0_q1);
    lineBuff_val_1_U = new make_marker_lineBibs("lineBuff_val_1_U");
    lineBuff_val_1_U->clk(ap_clk);
    lineBuff_val_1_U->reset(ap_rst_n_inv);
    lineBuff_val_1_U->address0(lineBuff_val_1_address0);
    lineBuff_val_1_U->ce0(lineBuff_val_1_ce0);
    lineBuff_val_1_U->we0(lineBuff_val_1_we0);
    lineBuff_val_1_U->d0(lineBuff_val_2_q0);
    lineBuff_val_1_U->q0(lineBuff_val_1_q0);
    lineBuff_val_1_U->address1(lineBuff_val_1_address1);
    lineBuff_val_1_U->ce1(lineBuff_val_1_ce1);
    lineBuff_val_1_U->q1(lineBuff_val_1_q1);
    lineBuff_val_2_U = new make_marker_lineBibs("lineBuff_val_2_U");
    lineBuff_val_2_U->clk(ap_clk);
    lineBuff_val_2_U->reset(ap_rst_n_inv);
    lineBuff_val_2_U->address0(lineBuff_val_2_address0);
    lineBuff_val_2_U->ce0(lineBuff_val_2_ce0);
    lineBuff_val_2_U->we0(lineBuff_val_2_we0);
    lineBuff_val_2_U->d0(img_fifo_q0);
    lineBuff_val_2_U->q0(lineBuff_val_2_q0);
    lineBuff_val_2_U->address1(lineBuff_val_2_address1);
    lineBuff_val_2_U->ce1(lineBuff_val_2_ce1);
    lineBuff_val_2_U->q1(lineBuff_val_2_q1);
    grp_otsu_fu_488 = new otsu("grp_otsu_fu_488");
    grp_otsu_fu_488->ap_clk(ap_clk);
    grp_otsu_fu_488->ap_rst(ap_rst_n_inv);
    grp_otsu_fu_488->ap_start(grp_otsu_fu_488_ap_start);
    grp_otsu_fu_488->ap_done(grp_otsu_fu_488_ap_done);
    grp_otsu_fu_488->ap_idle(grp_otsu_fu_488_ap_idle);
    grp_otsu_fu_488->ap_ready(grp_otsu_fu_488_ap_ready);
    grp_otsu_fu_488->histData_address0(grp_otsu_fu_488_histData_address0);
    grp_otsu_fu_488->histData_ce0(grp_otsu_fu_488_histData_ce0);
    grp_otsu_fu_488->histData_q0(histogram_q0);
    grp_otsu_fu_488->ap_return(grp_otsu_fu_488_ap_return);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);

    SC_METHOD(thread_ap_block_pp0_stage1);

    SC_METHOD(thread_ap_block_pp0_stage1_11001);

    SC_METHOD(thread_ap_block_pp0_stage1_subdone);

    SC_METHOD(thread_ap_block_pp0_stage2);

    SC_METHOD(thread_ap_block_pp0_stage2_11001);

    SC_METHOD(thread_ap_block_pp0_stage2_subdone);

    SC_METHOD(thread_ap_block_pp0_stage3);

    SC_METHOD(thread_ap_block_pp0_stage3_11001);

    SC_METHOD(thread_ap_block_pp0_stage3_subdone);

    SC_METHOD(thread_ap_block_pp0_stage4);

    SC_METHOD(thread_ap_block_pp0_stage4_11001);

    SC_METHOD(thread_ap_block_pp0_stage4_subdone);

    SC_METHOD(thread_ap_block_pp1_stage0);

    SC_METHOD(thread_ap_block_pp1_stage0_01001);

    SC_METHOD(thread_ap_block_pp1_stage0_11001);
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_enable_reg_pp1_iter3 );
    sensitive << ( ap_block_state23_io );
    sensitive << ( ap_block_state24_io );

    SC_METHOD(thread_ap_block_pp1_stage0_subdone);
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_enable_reg_pp1_iter3 );
    sensitive << ( ap_block_state23_io );
    sensitive << ( ap_block_state24_io );

    SC_METHOD(thread_ap_block_state11_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state12_pp0_stage1_iter0);

    SC_METHOD(thread_ap_block_state13_pp0_stage2_iter0);

    SC_METHOD(thread_ap_block_state14_pp0_stage3_iter0);

    SC_METHOD(thread_ap_block_state15_pp0_stage4_iter0);

    SC_METHOD(thread_ap_block_state16_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state17_pp0_stage1_iter1);

    SC_METHOD(thread_ap_block_state18_pp0_stage2_iter1);

    SC_METHOD(thread_ap_block_state19_pp0_stage3_iter1);

    SC_METHOD(thread_ap_block_state21_pp1_stage0_iter0);

    SC_METHOD(thread_ap_block_state22_pp1_stage0_iter1);

    SC_METHOD(thread_ap_block_state23_io);
    sensitive << ( outputStream_V_data_V_1_ack_in );
    sensitive << ( tmp_25_reg_1279 );

    SC_METHOD(thread_ap_block_state23_pp1_stage0_iter2);

    SC_METHOD(thread_ap_block_state24_io);
    sensitive << ( outputStream_V_data_V_1_ack_in );
    sensitive << ( tmp_25_reg_1279_pp1_iter2_reg );

    SC_METHOD(thread_ap_block_state24_pp1_stage0_iter3);

    SC_METHOD(thread_ap_block_state25);
    sensitive << ( outputStream_V_data_V_1_ack_in );
    sensitive << ( outputStream_V_keep_V_1_ack_in );
    sensitive << ( outputStream_V_strb_V_1_ack_in );
    sensitive << ( outputStream_V_user_V_1_ack_in );
    sensitive << ( outputStream_V_last_V_1_ack_in );
    sensitive << ( outputStream_V_id_V_1_ack_in );
    sensitive << ( outputStream_V_dest_V_1_ack_in );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state11);
    sensitive << ( exitcond4_fu_577_p2 );

    SC_METHOD(thread_ap_condition_pp1_exit_iter0_state21);
    sensitive << ( exitcond_fu_948_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( outputStream_V_data_V_1_ack_in );
    sensitive << ( outputStream_V_keep_V_1_ack_in );
    sensitive << ( outputStream_V_strb_V_1_ack_in );
    sensitive << ( outputStream_V_user_V_1_ack_in );
    sensitive << ( outputStream_V_last_V_1_ack_in );
    sensitive << ( outputStream_V_id_V_1_ack_in );
    sensitive << ( outputStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_pp1);
    sensitive << ( ap_idle_pp1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_idle_pp1);
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_enable_reg_pp1_iter3 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );

    SC_METHOD(thread_ap_phi_mux_col_assign_phi_fu_447_p4);
    sensitive << ( col_assign_reg_443 );
    sensitive << ( exitcond4_reg_1021 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( idxCol_1_reg_1184 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_i3_phi_fu_470_p4);
    sensitive << ( i3_reg_466 );
    sensitive << ( exitcond4_reg_1021 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( i_4_reg_1025 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_idxRow_phi_fu_436_p4);
    sensitive << ( idxRow_reg_432 );
    sensitive << ( exitcond4_reg_1021 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( idxRow_1_reg_1073 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_pixProcessed_phi_fu_458_p4);
    sensitive << ( pixProcessed_reg_454 );
    sensitive << ( exitcond4_reg_1021_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( pixProcessed_2_reg_1189 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage2 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( outputStream_V_data_V_1_ack_in );
    sensitive << ( outputStream_V_keep_V_1_ack_in );
    sensitive << ( outputStream_V_strb_V_1_ack_in );
    sensitive << ( outputStream_V_user_V_1_ack_in );
    sensitive << ( outputStream_V_last_V_1_ack_in );
    sensitive << ( outputStream_V_id_V_1_ack_in );
    sensitive << ( outputStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_backimg_address0);
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( tmp_19_reg_1030_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( tmp_24_reg_1269 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp0_stage3 );

    SC_METHOD(thread_backimg_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp1_iter1 );

    SC_METHOD(thread_backimg_d0);
    sensitive << ( or_cond_reg_1055_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( phitmp1_fu_924_p3 );

    SC_METHOD(thread_backimg_we0);
    sensitive << ( exitcond4_reg_1021_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_col_assign_1_0_2_fu_684_p2);
    sensitive << ( pixProcessed_reg_454 );

    SC_METHOD(thread_exitcond1_fu_493_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( idxHist_reg_398 );

    SC_METHOD(thread_exitcond2_fu_510_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i_reg_409 );

    SC_METHOD(thread_exitcond3_fu_543_p2);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( i2_reg_421 );

    SC_METHOD(thread_exitcond4_fu_577_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_phi_mux_i3_phi_fu_470_p4 );

    SC_METHOD(thread_exitcond_fu_948_p2);
    sensitive << ( i4_reg_477 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );

    SC_METHOD(thread_grp_otsu_fu_488_ap_start);
    sensitive << ( grp_otsu_fu_488_ap_start_reg );

    SC_METHOD(thread_histogram_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( histogram_addr_1_reg_987 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( grp_otsu_fu_488_histData_address0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_fu_505_p1 );
    sensitive << ( tmp_s_fu_527_p1 );

    SC_METHOD(thread_histogram_ce0);
    sensitive << ( inputStream_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( grp_otsu_fu_488_histData_ce0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_histogram_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_14_fu_537_p2 );

    SC_METHOD(thread_histogram_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_493_p2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_i_1_fu_516_p2);
    sensitive << ( i_reg_409 );

    SC_METHOD(thread_i_2_fu_549_p2);
    sensitive << ( i2_reg_421 );

    SC_METHOD(thread_i_3_fu_954_p2);
    sensitive << ( i4_reg_477 );

    SC_METHOD(thread_i_4_fu_583_p2);
    sensitive << ( ap_phi_mux_i3_phi_fu_470_p4 );

    SC_METHOD(thread_icmp3_fu_626_p2);
    sensitive << ( exitcond4_fu_577_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_23_fu_616_p4 );

    SC_METHOD(thread_icmp_fu_610_p2);
    sensitive << ( exitcond4_fu_577_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_22_fu_600_p4 );

    SC_METHOD(thread_idxCol_1_fu_734_p3);
    sensitive << ( tmp_26_reg_1062 );
    sensitive << ( idxCol_reg_1068 );

    SC_METHOD(thread_idxCol_fu_644_p2);
    sensitive << ( ap_phi_mux_col_assign_phi_fu_447_p4 );

    SC_METHOD(thread_idxHist_1_fu_499_p2);
    sensitive << ( idxHist_reg_398 );

    SC_METHOD(thread_idxRow_1_fu_656_p3);
    sensitive << ( tmp_26_fu_638_p2 );
    sensitive << ( ap_phi_mux_idxRow_phi_fu_436_p4 );
    sensitive << ( idxRow_2_fu_650_p2 );

    SC_METHOD(thread_idxRow_2_fu_650_p2);
    sensitive << ( ap_phi_mux_idxRow_phi_fu_436_p4 );

    SC_METHOD(thread_img_fifo_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( img_fifo_addr_1_reg_1011 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_19_fu_589_p1 );
    sensitive << ( img_fifo_addr_2_reg_1035_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( tmp_24_fu_960_p1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_15_fu_532_p1 );
    sensitive << ( tmp_16_fu_555_p1 );
    sensitive << ( ap_block_pp0_stage3 );

    SC_METHOD(thread_img_fifo_ce0);
    sensitive << ( inputStream_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_img_fifo_d0);
    sensitive << ( inputStream_V_data_V_0_data_out );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( storemerge_fu_569_p3 );
    sensitive << ( valOutputFg1_fu_932_p3 );

    SC_METHOD(thread_img_fifo_we0);
    sensitive << ( inputStream_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond4_reg_1021_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_inputStream_TDATA_blk_n);
    sensitive << ( inputStream_V_data_V_0_state );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_inputStream_TREADY);
    sensitive << ( inputStream_V_dest_V_0_state );

    SC_METHOD(thread_inputStream_V_data_V_0_ack_in);
    sensitive << ( inputStream_V_data_V_0_state );

    SC_METHOD(thread_inputStream_V_data_V_0_ack_out);
    sensitive << ( inputStream_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_inputStream_V_data_V_0_data_out);
    sensitive << ( inputStream_V_data_V_0_payload_A );
    sensitive << ( inputStream_V_data_V_0_payload_B );
    sensitive << ( inputStream_V_data_V_0_sel );

    SC_METHOD(thread_inputStream_V_data_V_0_load_A);
    sensitive << ( inputStream_V_data_V_0_sel_wr );
    sensitive << ( inputStream_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_inputStream_V_data_V_0_load_B);
    sensitive << ( inputStream_V_data_V_0_sel_wr );
    sensitive << ( inputStream_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_inputStream_V_data_V_0_sel);
    sensitive << ( inputStream_V_data_V_0_sel_rd );

    SC_METHOD(thread_inputStream_V_data_V_0_state_cmp_full);
    sensitive << ( inputStream_V_data_V_0_state );

    SC_METHOD(thread_inputStream_V_data_V_0_vld_in);
    sensitive << ( inputStream_TVALID );

    SC_METHOD(thread_inputStream_V_data_V_0_vld_out);
    sensitive << ( inputStream_V_data_V_0_state );

    SC_METHOD(thread_inputStream_V_dest_V_0_ack_out);
    sensitive << ( inputStream_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_inputStream_V_dest_V_0_vld_in);
    sensitive << ( inputStream_TVALID );

    SC_METHOD(thread_lineBuff_val_0_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_20_reg_1040 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( tmp_47_0_1_fu_677_p1 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( valInWindow_0_minVal_1_fu_710_p1 );
    sensitive << ( valInWindow_0_minVal_3_fu_761_p1 );

    SC_METHOD(thread_lineBuff_val_0_address1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( tmp_21_fu_664_p1 );
    sensitive << ( tmp_47_0_2_fu_690_p1 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( valInWindow_0_maxVal_1_fu_747_p1 );
    sensitive << ( ap_block_pp0_stage4 );
    sensitive << ( valInWindow_0_maxVal_3_fu_777_p1 );

    SC_METHOD(thread_lineBuff_val_0_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_lineBuff_val_0_ce1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_block_pp0_stage4_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_lineBuff_val_0_we0);
    sensitive << ( exitcond4_reg_1021 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_lineBuff_val_1_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_20_fu_594_p1 );
    sensitive << ( lineBuff_val_1_addr_reg_1045 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( tmp_21_fu_664_p1 );

    SC_METHOD(thread_lineBuff_val_1_address1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( tmp_47_0_1_fu_677_p1 );
    sensitive << ( tmp_47_0_2_fu_690_p1 );
    sensitive << ( ap_block_pp0_stage3 );

    SC_METHOD(thread_lineBuff_val_1_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_lineBuff_val_1_ce1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );

    SC_METHOD(thread_lineBuff_val_1_we0);
    sensitive << ( exitcond4_reg_1021 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_lineBuff_val_2_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_20_fu_594_p1 );
    sensitive << ( lineBuff_val_2_addr_reg_1050 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( tmp_21_fu_664_p1 );

    SC_METHOD(thread_lineBuff_val_2_address1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( tmp_47_0_1_fu_677_p1 );
    sensitive << ( tmp_47_0_2_fu_690_p1 );
    sensitive << ( ap_block_pp0_stage3 );

    SC_METHOD(thread_lineBuff_val_2_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_lineBuff_val_2_ce1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );

    SC_METHOD(thread_lineBuff_val_2_we0);
    sensitive << ( exitcond4_reg_1021 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_or_cond_fu_632_p2);
    sensitive << ( icmp_fu_610_p2 );
    sensitive << ( icmp3_fu_626_p2 );

    SC_METHOD(thread_outputStream_TDATA);
    sensitive << ( outputStream_V_data_V_1_data_out );

    SC_METHOD(thread_outputStream_TDATA_blk_n);
    sensitive << ( outputStream_V_data_V_1_state );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( tmp_25_reg_1279 );
    sensitive << ( ap_enable_reg_pp1_iter3 );
    sensitive << ( tmp_25_reg_1279_pp1_iter2_reg );

    SC_METHOD(thread_outputStream_TDEST);
    sensitive << ( outputStream_V_dest_V_1_data_out );

    SC_METHOD(thread_outputStream_TID);
    sensitive << ( outputStream_V_id_V_1_data_out );

    SC_METHOD(thread_outputStream_TKEEP);
    sensitive << ( outputStream_V_keep_V_1_data_out );

    SC_METHOD(thread_outputStream_TLAST);
    sensitive << ( outputStream_V_last_V_1_data_out );

    SC_METHOD(thread_outputStream_TSTRB);
    sensitive << ( outputStream_V_strb_V_1_data_out );

    SC_METHOD(thread_outputStream_TUSER);
    sensitive << ( outputStream_V_user_V_1_data_out );

    SC_METHOD(thread_outputStream_TVALID);
    sensitive << ( outputStream_V_dest_V_1_state );

    SC_METHOD(thread_outputStream_V_data_V_1_ack_in);
    sensitive << ( outputStream_V_data_V_1_state );

    SC_METHOD(thread_outputStream_V_data_V_1_ack_out);
    sensitive << ( outputStream_TREADY );

    SC_METHOD(thread_outputStream_V_data_V_1_data_in);
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( tmp_25_reg_1279 );
    sensitive << ( backimg_q0 );
    sensitive << ( ap_block_pp1_stage0_01001 );

    SC_METHOD(thread_outputStream_V_data_V_1_data_out);
    sensitive << ( outputStream_V_data_V_1_payload_A );
    sensitive << ( outputStream_V_data_V_1_payload_B );
    sensitive << ( outputStream_V_data_V_1_sel );

    SC_METHOD(thread_outputStream_V_data_V_1_load_A);
    sensitive << ( outputStream_V_data_V_1_sel_wr );
    sensitive << ( outputStream_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_outputStream_V_data_V_1_load_B);
    sensitive << ( outputStream_V_data_V_1_sel_wr );
    sensitive << ( outputStream_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_outputStream_V_data_V_1_sel);
    sensitive << ( outputStream_V_data_V_1_sel_rd );

    SC_METHOD(thread_outputStream_V_data_V_1_state_cmp_full);
    sensitive << ( outputStream_V_data_V_1_state );

    SC_METHOD(thread_outputStream_V_data_V_1_vld_in);
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( tmp_25_reg_1279 );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_outputStream_V_data_V_1_vld_out);
    sensitive << ( outputStream_V_data_V_1_state );

    SC_METHOD(thread_outputStream_V_dest_V_1_ack_in);
    sensitive << ( outputStream_V_dest_V_1_state );

    SC_METHOD(thread_outputStream_V_dest_V_1_ack_out);
    sensitive << ( outputStream_TREADY );

    SC_METHOD(thread_outputStream_V_dest_V_1_data_out);
    sensitive << ( outputStream_V_dest_V_1_sel );

    SC_METHOD(thread_outputStream_V_dest_V_1_sel);
    sensitive << ( outputStream_V_dest_V_1_sel_rd );

    SC_METHOD(thread_outputStream_V_dest_V_1_vld_in);
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( tmp_25_reg_1279 );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_outputStream_V_dest_V_1_vld_out);
    sensitive << ( outputStream_V_dest_V_1_state );

    SC_METHOD(thread_outputStream_V_id_V_1_ack_in);
    sensitive << ( outputStream_V_id_V_1_state );

    SC_METHOD(thread_outputStream_V_id_V_1_ack_out);
    sensitive << ( outputStream_TREADY );

    SC_METHOD(thread_outputStream_V_id_V_1_data_out);
    sensitive << ( outputStream_V_id_V_1_sel );

    SC_METHOD(thread_outputStream_V_id_V_1_sel);
    sensitive << ( outputStream_V_id_V_1_sel_rd );

    SC_METHOD(thread_outputStream_V_id_V_1_vld_in);
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( tmp_25_reg_1279 );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_outputStream_V_id_V_1_vld_out);
    sensitive << ( outputStream_V_id_V_1_state );

    SC_METHOD(thread_outputStream_V_keep_V_1_ack_in);
    sensitive << ( outputStream_V_keep_V_1_state );

    SC_METHOD(thread_outputStream_V_keep_V_1_ack_out);
    sensitive << ( outputStream_TREADY );

    SC_METHOD(thread_outputStream_V_keep_V_1_data_out);
    sensitive << ( outputStream_V_keep_V_1_sel );

    SC_METHOD(thread_outputStream_V_keep_V_1_sel);
    sensitive << ( outputStream_V_keep_V_1_sel_rd );

    SC_METHOD(thread_outputStream_V_keep_V_1_vld_in);
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( tmp_25_reg_1279 );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_outputStream_V_keep_V_1_vld_out);
    sensitive << ( outputStream_V_keep_V_1_state );

    SC_METHOD(thread_outputStream_V_last_V_1_ack_in);
    sensitive << ( outputStream_V_last_V_1_state );

    SC_METHOD(thread_outputStream_V_last_V_1_ack_out);
    sensitive << ( outputStream_TREADY );

    SC_METHOD(thread_outputStream_V_last_V_1_data_out);
    sensitive << ( outputStream_V_last_V_1_sel );

    SC_METHOD(thread_outputStream_V_last_V_1_sel);
    sensitive << ( outputStream_V_last_V_1_sel_rd );

    SC_METHOD(thread_outputStream_V_last_V_1_vld_in);
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( tmp_25_reg_1279 );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_outputStream_V_last_V_1_vld_out);
    sensitive << ( outputStream_V_last_V_1_state );

    SC_METHOD(thread_outputStream_V_strb_V_1_ack_in);
    sensitive << ( outputStream_V_strb_V_1_state );

    SC_METHOD(thread_outputStream_V_strb_V_1_ack_out);
    sensitive << ( outputStream_TREADY );

    SC_METHOD(thread_outputStream_V_strb_V_1_data_out);
    sensitive << ( outputStream_V_strb_V_1_sel );

    SC_METHOD(thread_outputStream_V_strb_V_1_sel);
    sensitive << ( outputStream_V_strb_V_1_sel_rd );

    SC_METHOD(thread_outputStream_V_strb_V_1_vld_in);
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( tmp_25_reg_1279 );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_outputStream_V_strb_V_1_vld_out);
    sensitive << ( outputStream_V_strb_V_1_state );

    SC_METHOD(thread_outputStream_V_user_V_1_ack_in);
    sensitive << ( outputStream_V_user_V_1_state );

    SC_METHOD(thread_outputStream_V_user_V_1_ack_out);
    sensitive << ( outputStream_TREADY );

    SC_METHOD(thread_outputStream_V_user_V_1_data_out);
    sensitive << ( outputStream_V_user_V_1_sel );

    SC_METHOD(thread_outputStream_V_user_V_1_sel);
    sensitive << ( outputStream_V_user_V_1_sel_rd );

    SC_METHOD(thread_outputStream_V_user_V_1_vld_in);
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( tmp_25_reg_1279 );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_outputStream_V_user_V_1_vld_out);
    sensitive << ( outputStream_V_user_V_1_state );

    SC_METHOD(thread_phitmp1_fu_924_p3);
    sensitive << ( phitmp_fu_918_p2 );

    SC_METHOD(thread_phitmp_fu_918_p2);
    sensitive << ( exitcond4_reg_1021_pp0_iter1_reg );
    sensitive << ( or_cond_reg_1055_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( valOutputBg_fu_912_p3 );

    SC_METHOD(thread_pixProcessed_1_fu_728_p3);
    sensitive << ( pixProcessed_reg_454 );
    sensitive << ( or_cond_reg_1055 );
    sensitive << ( pixProcessed_3_reg_1083 );

    SC_METHOD(thread_pixProcessed_2_fu_740_p3);
    sensitive << ( tmp_26_reg_1062 );
    sensitive << ( pixProcessed_1_fu_728_p3 );

    SC_METHOD(thread_pixProcessed_3_fu_671_p2);
    sensitive << ( ap_phi_mux_pixProcessed_phi_fu_458_p4 );

    SC_METHOD(thread_storemerge_fu_569_p3);
    sensitive << ( tmp_18_reg_1016 );

    SC_METHOD(thread_tmp_14_fu_537_p2);
    sensitive << ( histogram_load_reg_992 );

    SC_METHOD(thread_tmp_15_fu_532_p1);
    sensitive << ( i_reg_409 );

    SC_METHOD(thread_tmp_16_fu_555_p1);
    sensitive << ( i2_reg_421 );

    SC_METHOD(thread_tmp_17_fu_560_p1);
    sensitive << ( img_fifo_q0 );

    SC_METHOD(thread_tmp_18_fu_564_p2);
    sensitive << ( t_reg_997 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_17_fu_560_p1 );

    SC_METHOD(thread_tmp_19_0_1_i_fu_697_p2);
    sensitive << ( exitcond4_reg_1021 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( or_cond_reg_1055 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( lineBuff_val_0_q1 );
    sensitive << ( lineBuff_val_0_q0 );

    SC_METHOD(thread_tmp_19_0_2_i_fu_751_p2);
    sensitive << ( exitcond4_reg_1021 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( or_cond_reg_1055 );
    sensitive << ( lineBuff_val_0_load_2_reg_1194 );
    sensitive << ( lineBuff_val_0_load_3_reg_1216 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_tmp_19_1_1_i_fu_794_p2);
    sensitive << ( exitcond4_reg_1021_pp0_iter1_reg );
    sensitive << ( or_cond_reg_1055_pp0_iter1_reg );
    sensitive << ( lineBuff_val_1_load_2_reg_1134 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( valInWindow_0_minVal_4_fu_787_p3 );

    SC_METHOD(thread_tmp_19_1_2_i_fu_830_p2);
    sensitive << ( exitcond4_reg_1021_pp0_iter1_reg );
    sensitive << ( or_cond_reg_1055_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( lineBuff_val_1_load_3_reg_1200 );
    sensitive << ( valInWindow_0_minVal_5_reg_1236 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_tmp_19_1_i_fu_782_p2);
    sensitive << ( exitcond4_reg_1021_pp0_iter1_reg );
    sensitive << ( or_cond_reg_1055_pp0_iter1_reg );
    sensitive << ( lineBuff_val_1_load_1_reg_1126 );
    sensitive << ( lineBuff_val_0_q0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_tmp_19_2_1_i_fu_852_p2);
    sensitive << ( exitcond4_reg_1021_pp0_iter1_reg );
    sensitive << ( or_cond_reg_1055_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( lineBuff_val_2_load_2_reg_1155 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( valInWindow_0_minVal_7_fu_845_p3 );

    SC_METHOD(thread_tmp_19_2_2_i_fu_898_p2);
    sensitive << ( exitcond4_reg_1021_pp0_iter1_reg );
    sensitive << ( or_cond_reg_1055_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( lineBuff_val_2_load_3_reg_1208 );
    sensitive << ( valInWindow_0_minVal_8_reg_1248 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_tmp_19_2_i_fu_840_p2);
    sensitive << ( exitcond4_reg_1021_pp0_iter1_reg );
    sensitive << ( or_cond_reg_1055_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( lineBuff_val_2_load_1_reg_1147 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( valInWindow_0_minVal_6_fu_834_p3 );

    SC_METHOD(thread_tmp_19_fu_589_p1);
    sensitive << ( ap_phi_mux_i3_phi_fu_470_p4 );

    SC_METHOD(thread_tmp_20_fu_594_p1);
    sensitive << ( ap_phi_mux_col_assign_phi_fu_447_p4 );

    SC_METHOD(thread_tmp_21_fu_664_p1);
    sensitive << ( ap_phi_mux_pixProcessed_phi_fu_458_p4 );

    SC_METHOD(thread_tmp_22_fu_600_p4);
    sensitive << ( ap_phi_mux_idxRow_phi_fu_436_p4 );

    SC_METHOD(thread_tmp_23_fu_616_p4);
    sensitive << ( ap_phi_mux_col_assign_phi_fu_447_p4 );

    SC_METHOD(thread_tmp_24_0_1_i_fu_715_p2);
    sensitive << ( exitcond4_reg_1021 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( or_cond_reg_1055 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( lineBuff_val_0_q1 );
    sensitive << ( lineBuff_val_0_q0 );

    SC_METHOD(thread_tmp_24_0_2_i_fu_766_p2);
    sensitive << ( exitcond4_reg_1021 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( or_cond_reg_1055 );
    sensitive << ( lineBuff_val_0_q1 );
    sensitive << ( lineBuff_val_0_load_2_reg_1194 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_tmp_24_1_1_i_fu_818_p2);
    sensitive << ( exitcond4_reg_1021_pp0_iter1_reg );
    sensitive << ( or_cond_reg_1055_pp0_iter1_reg );
    sensitive << ( lineBuff_val_1_load_2_reg_1134 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( valInWindow_0_maxVal_4_fu_811_p3 );

    SC_METHOD(thread_tmp_24_1_2_i_fu_864_p2);
    sensitive << ( exitcond4_reg_1021_pp0_iter1_reg );
    sensitive << ( or_cond_reg_1055_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( lineBuff_val_1_load_3_reg_1200 );
    sensitive << ( valInWindow_0_maxVal_5_reg_1242 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_tmp_24_1_i_fu_806_p2);
    sensitive << ( exitcond4_reg_1021_pp0_iter1_reg );
    sensitive << ( or_cond_reg_1055_pp0_iter1_reg );
    sensitive << ( lineBuff_val_1_load_1_reg_1126 );
    sensitive << ( lineBuff_val_0_q1 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_tmp_24_2_1_i_fu_886_p2);
    sensitive << ( exitcond4_reg_1021_pp0_iter1_reg );
    sensitive << ( or_cond_reg_1055_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( lineBuff_val_2_load_2_reg_1155 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( valInWindow_0_maxVal_7_fu_879_p3 );

    SC_METHOD(thread_tmp_24_2_2_i_fu_908_p2);
    sensitive << ( exitcond4_reg_1021_pp0_iter1_reg );
    sensitive << ( or_cond_reg_1055_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( lineBuff_val_2_load_3_reg_1208 );
    sensitive << ( valInWindow_0_maxVal_8_reg_1254 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_tmp_24_2_i_fu_874_p2);
    sensitive << ( exitcond4_reg_1021_pp0_iter1_reg );
    sensitive << ( or_cond_reg_1055_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( lineBuff_val_2_load_1_reg_1147 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( valInWindow_0_maxVal_6_fu_868_p3 );

    SC_METHOD(thread_tmp_24_fu_960_p1);
    sensitive << ( i4_reg_477 );

    SC_METHOD(thread_tmp_25_fu_965_p2);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( img_fifo_q0 );

    SC_METHOD(thread_tmp_26_fu_638_p2);
    sensitive << ( exitcond4_fu_577_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_phi_mux_col_assign_phi_fu_447_p4 );

    SC_METHOD(thread_tmp_47_0_1_fu_677_p1);
    sensitive << ( pixProcessed_3_fu_671_p2 );

    SC_METHOD(thread_tmp_47_0_2_fu_690_p1);
    sensitive << ( col_assign_1_0_2_fu_684_p2 );

    SC_METHOD(thread_tmp_fu_505_p1);
    sensitive << ( idxHist_reg_398 );

    SC_METHOD(thread_tmp_s_fu_527_p1);
    sensitive << ( inputStream_V_data_V_0_data_out );

    SC_METHOD(thread_valInWindow_0_maxVal_1_fu_747_p1);
    sensitive << ( valInWindow_0_maxVal_reg_1178 );

    SC_METHOD(thread_valInWindow_0_maxVal_2_fu_771_p3);
    sensitive << ( col_assign_1_0_2_reg_1115 );
    sensitive << ( valInWindow_0_maxVal_reg_1178 );
    sensitive << ( tmp_24_0_2_i_fu_766_p2 );

    SC_METHOD(thread_valInWindow_0_maxVal_3_fu_777_p1);
    sensitive << ( valInWindow_0_maxVal_2_fu_771_p3 );

    SC_METHOD(thread_valInWindow_0_maxVal_4_fu_811_p3);
    sensitive << ( lineBuff_val_1_load_1_reg_1126 );
    sensitive << ( lineBuff_val_0_q1 );
    sensitive << ( tmp_24_1_i_fu_806_p2 );

    SC_METHOD(thread_valInWindow_0_maxVal_5_fu_823_p3);
    sensitive << ( lineBuff_val_1_load_2_reg_1134 );
    sensitive << ( valInWindow_0_maxVal_4_fu_811_p3 );
    sensitive << ( tmp_24_1_1_i_fu_818_p2 );

    SC_METHOD(thread_valInWindow_0_maxVal_6_fu_868_p3);
    sensitive << ( lineBuff_val_1_load_3_reg_1200 );
    sensitive << ( valInWindow_0_maxVal_5_reg_1242 );
    sensitive << ( tmp_24_1_2_i_fu_864_p2 );

    SC_METHOD(thread_valInWindow_0_maxVal_7_fu_879_p3);
    sensitive << ( lineBuff_val_2_load_1_reg_1147 );
    sensitive << ( valInWindow_0_maxVal_6_fu_868_p3 );
    sensitive << ( tmp_24_2_i_fu_874_p2 );

    SC_METHOD(thread_valInWindow_0_maxVal_8_fu_891_p3);
    sensitive << ( lineBuff_val_2_load_2_reg_1155 );
    sensitive << ( valInWindow_0_maxVal_7_fu_879_p3 );
    sensitive << ( tmp_24_2_1_i_fu_886_p2 );

    SC_METHOD(thread_valInWindow_0_maxVal_fu_721_p3);
    sensitive << ( pixProcessed_reg_454 );
    sensitive << ( pixProcessed_3_reg_1083 );
    sensitive << ( tmp_24_0_1_i_fu_715_p2 );

    SC_METHOD(thread_valInWindow_0_minVal_1_fu_710_p1);
    sensitive << ( valInWindow_0_minVal_fu_703_p3 );

    SC_METHOD(thread_valInWindow_0_minVal_2_fu_755_p3);
    sensitive << ( col_assign_1_0_2_reg_1115 );
    sensitive << ( valInWindow_0_minVal_reg_1168 );
    sensitive << ( tmp_19_0_2_i_fu_751_p2 );

    SC_METHOD(thread_valInWindow_0_minVal_3_fu_761_p1);
    sensitive << ( valInWindow_0_minVal_2_fu_755_p3 );

    SC_METHOD(thread_valInWindow_0_minVal_4_fu_787_p3);
    sensitive << ( lineBuff_val_1_load_1_reg_1126 );
    sensitive << ( lineBuff_val_0_q0 );
    sensitive << ( tmp_19_1_i_fu_782_p2 );

    SC_METHOD(thread_valInWindow_0_minVal_5_fu_799_p3);
    sensitive << ( lineBuff_val_1_load_2_reg_1134 );
    sensitive << ( valInWindow_0_minVal_4_fu_787_p3 );
    sensitive << ( tmp_19_1_1_i_fu_794_p2 );

    SC_METHOD(thread_valInWindow_0_minVal_6_fu_834_p3);
    sensitive << ( lineBuff_val_1_load_3_reg_1200 );
    sensitive << ( valInWindow_0_minVal_5_reg_1236 );
    sensitive << ( tmp_19_1_2_i_fu_830_p2 );

    SC_METHOD(thread_valInWindow_0_minVal_7_fu_845_p3);
    sensitive << ( lineBuff_val_2_load_1_reg_1147 );
    sensitive << ( valInWindow_0_minVal_6_fu_834_p3 );
    sensitive << ( tmp_19_2_i_fu_840_p2 );

    SC_METHOD(thread_valInWindow_0_minVal_8_fu_857_p3);
    sensitive << ( lineBuff_val_2_load_2_reg_1155 );
    sensitive << ( valInWindow_0_minVal_7_fu_845_p3 );
    sensitive << ( tmp_19_2_1_i_fu_852_p2 );

    SC_METHOD(thread_valInWindow_0_minVal_fu_703_p3);
    sensitive << ( pixProcessed_reg_454 );
    sensitive << ( pixProcessed_3_reg_1083 );
    sensitive << ( tmp_19_0_1_i_fu_697_p2 );

    SC_METHOD(thread_valOutputBg_fu_912_p3);
    sensitive << ( lineBuff_val_2_load_3_reg_1208 );
    sensitive << ( valInWindow_0_maxVal_8_reg_1254 );
    sensitive << ( tmp_24_2_2_i_fu_908_p2 );

    SC_METHOD(thread_valOutputFg1_fu_932_p3);
    sensitive << ( or_cond_reg_1055_pp0_iter1_reg );
    sensitive << ( valOutputFg_fu_902_p3 );

    SC_METHOD(thread_valOutputFg_fu_902_p3);
    sensitive << ( lineBuff_val_2_load_3_reg_1208 );
    sensitive << ( valInWindow_0_minVal_8_reg_1248 );
    sensitive << ( tmp_19_2_2_i_fu_898_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( inputStream_V_data_V_0_vld_out );
    sensitive << ( outputStream_V_data_V_1_ack_in );
    sensitive << ( outputStream_V_keep_V_1_ack_in );
    sensitive << ( outputStream_V_strb_V_1_ack_in );
    sensitive << ( outputStream_V_user_V_1_ack_in );
    sensitive << ( outputStream_V_last_V_1_ack_in );
    sensitive << ( outputStream_V_id_V_1_ack_in );
    sensitive << ( outputStream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_enable_reg_pp1_iter3 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( grp_otsu_fu_488_ap_done );
    sensitive << ( exitcond3_fu_543_p2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( exitcond4_fu_577_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( exitcond_fu_948_p2 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage4_subdone );
    sensitive << ( ap_block_pp0_stage3_subdone );
    sensitive << ( ap_block_pp1_stage0_subdone );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond1_fu_493_p2 );
    sensitive << ( exitcond2_fu_510_p2 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_block_pp0_stage1_subdone );
    sensitive << ( ap_block_pp0_stage2_subdone );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000000000000000001";
    inputStream_V_data_V_0_sel_rd = SC_LOGIC_0;
    inputStream_V_data_V_0_sel_wr = SC_LOGIC_0;
    inputStream_V_data_V_0_state = "00";
    inputStream_V_dest_V_0_state = "00";
    outputStream_V_data_V_1_sel_rd = SC_LOGIC_0;
    outputStream_V_data_V_1_sel_wr = SC_LOGIC_0;
    outputStream_V_data_V_1_state = "00";
    outputStream_V_keep_V_1_sel_rd = SC_LOGIC_0;
    outputStream_V_keep_V_1_state = "00";
    outputStream_V_strb_V_1_sel_rd = SC_LOGIC_0;
    outputStream_V_strb_V_1_state = "00";
    outputStream_V_user_V_1_sel_rd = SC_LOGIC_0;
    outputStream_V_user_V_1_state = "00";
    outputStream_V_last_V_1_sel_rd = SC_LOGIC_0;
    outputStream_V_last_V_1_state = "00";
    outputStream_V_id_V_1_sel_rd = SC_LOGIC_0;
    outputStream_V_id_V_1_state = "00";
    outputStream_V_dest_V_1_sel_rd = SC_LOGIC_0;
    outputStream_V_dest_V_1_state = "00";
    ap_enable_reg_pp1_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter1 = SC_LOGIC_0;
    grp_otsu_fu_488_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "make_marker_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, inputStream_TDATA, "(port)inputStream_TDATA");
    sc_trace(mVcdFile, inputStream_TVALID, "(port)inputStream_TVALID");
    sc_trace(mVcdFile, inputStream_TREADY, "(port)inputStream_TREADY");
    sc_trace(mVcdFile, inputStream_TKEEP, "(port)inputStream_TKEEP");
    sc_trace(mVcdFile, inputStream_TSTRB, "(port)inputStream_TSTRB");
    sc_trace(mVcdFile, inputStream_TUSER, "(port)inputStream_TUSER");
    sc_trace(mVcdFile, inputStream_TLAST, "(port)inputStream_TLAST");
    sc_trace(mVcdFile, inputStream_TID, "(port)inputStream_TID");
    sc_trace(mVcdFile, inputStream_TDEST, "(port)inputStream_TDEST");
    sc_trace(mVcdFile, outputStream_TDATA, "(port)outputStream_TDATA");
    sc_trace(mVcdFile, outputStream_TVALID, "(port)outputStream_TVALID");
    sc_trace(mVcdFile, outputStream_TREADY, "(port)outputStream_TREADY");
    sc_trace(mVcdFile, outputStream_TKEEP, "(port)outputStream_TKEEP");
    sc_trace(mVcdFile, outputStream_TSTRB, "(port)outputStream_TSTRB");
    sc_trace(mVcdFile, outputStream_TUSER, "(port)outputStream_TUSER");
    sc_trace(mVcdFile, outputStream_TLAST, "(port)outputStream_TLAST");
    sc_trace(mVcdFile, outputStream_TID, "(port)outputStream_TID");
    sc_trace(mVcdFile, outputStream_TDEST, "(port)outputStream_TDEST");
    sc_trace(mVcdFile, s_axi_ctrl_bus_AWVALID, "(port)s_axi_ctrl_bus_AWVALID");
    sc_trace(mVcdFile, s_axi_ctrl_bus_AWREADY, "(port)s_axi_ctrl_bus_AWREADY");
    sc_trace(mVcdFile, s_axi_ctrl_bus_AWADDR, "(port)s_axi_ctrl_bus_AWADDR");
    sc_trace(mVcdFile, s_axi_ctrl_bus_WVALID, "(port)s_axi_ctrl_bus_WVALID");
    sc_trace(mVcdFile, s_axi_ctrl_bus_WREADY, "(port)s_axi_ctrl_bus_WREADY");
    sc_trace(mVcdFile, s_axi_ctrl_bus_WDATA, "(port)s_axi_ctrl_bus_WDATA");
    sc_trace(mVcdFile, s_axi_ctrl_bus_WSTRB, "(port)s_axi_ctrl_bus_WSTRB");
    sc_trace(mVcdFile, s_axi_ctrl_bus_ARVALID, "(port)s_axi_ctrl_bus_ARVALID");
    sc_trace(mVcdFile, s_axi_ctrl_bus_ARREADY, "(port)s_axi_ctrl_bus_ARREADY");
    sc_trace(mVcdFile, s_axi_ctrl_bus_ARADDR, "(port)s_axi_ctrl_bus_ARADDR");
    sc_trace(mVcdFile, s_axi_ctrl_bus_RVALID, "(port)s_axi_ctrl_bus_RVALID");
    sc_trace(mVcdFile, s_axi_ctrl_bus_RREADY, "(port)s_axi_ctrl_bus_RREADY");
    sc_trace(mVcdFile, s_axi_ctrl_bus_RDATA, "(port)s_axi_ctrl_bus_RDATA");
    sc_trace(mVcdFile, s_axi_ctrl_bus_RRESP, "(port)s_axi_ctrl_bus_RRESP");
    sc_trace(mVcdFile, s_axi_ctrl_bus_BVALID, "(port)s_axi_ctrl_bus_BVALID");
    sc_trace(mVcdFile, s_axi_ctrl_bus_BREADY, "(port)s_axi_ctrl_bus_BREADY");
    sc_trace(mVcdFile, s_axi_ctrl_bus_BRESP, "(port)s_axi_ctrl_bus_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, inputStream_V_data_V_0_data_out, "inputStream_V_data_V_0_data_out");
    sc_trace(mVcdFile, inputStream_V_data_V_0_vld_in, "inputStream_V_data_V_0_vld_in");
    sc_trace(mVcdFile, inputStream_V_data_V_0_vld_out, "inputStream_V_data_V_0_vld_out");
    sc_trace(mVcdFile, inputStream_V_data_V_0_ack_in, "inputStream_V_data_V_0_ack_in");
    sc_trace(mVcdFile, inputStream_V_data_V_0_ack_out, "inputStream_V_data_V_0_ack_out");
    sc_trace(mVcdFile, inputStream_V_data_V_0_payload_A, "inputStream_V_data_V_0_payload_A");
    sc_trace(mVcdFile, inputStream_V_data_V_0_payload_B, "inputStream_V_data_V_0_payload_B");
    sc_trace(mVcdFile, inputStream_V_data_V_0_sel_rd, "inputStream_V_data_V_0_sel_rd");
    sc_trace(mVcdFile, inputStream_V_data_V_0_sel_wr, "inputStream_V_data_V_0_sel_wr");
    sc_trace(mVcdFile, inputStream_V_data_V_0_sel, "inputStream_V_data_V_0_sel");
    sc_trace(mVcdFile, inputStream_V_data_V_0_load_A, "inputStream_V_data_V_0_load_A");
    sc_trace(mVcdFile, inputStream_V_data_V_0_load_B, "inputStream_V_data_V_0_load_B");
    sc_trace(mVcdFile, inputStream_V_data_V_0_state, "inputStream_V_data_V_0_state");
    sc_trace(mVcdFile, inputStream_V_data_V_0_state_cmp_full, "inputStream_V_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, inputStream_V_dest_V_0_vld_in, "inputStream_V_dest_V_0_vld_in");
    sc_trace(mVcdFile, inputStream_V_dest_V_0_ack_out, "inputStream_V_dest_V_0_ack_out");
    sc_trace(mVcdFile, inputStream_V_dest_V_0_state, "inputStream_V_dest_V_0_state");
    sc_trace(mVcdFile, outputStream_V_data_V_1_data_in, "outputStream_V_data_V_1_data_in");
    sc_trace(mVcdFile, outputStream_V_data_V_1_data_out, "outputStream_V_data_V_1_data_out");
    sc_trace(mVcdFile, outputStream_V_data_V_1_vld_in, "outputStream_V_data_V_1_vld_in");
    sc_trace(mVcdFile, outputStream_V_data_V_1_vld_out, "outputStream_V_data_V_1_vld_out");
    sc_trace(mVcdFile, outputStream_V_data_V_1_ack_in, "outputStream_V_data_V_1_ack_in");
    sc_trace(mVcdFile, outputStream_V_data_V_1_ack_out, "outputStream_V_data_V_1_ack_out");
    sc_trace(mVcdFile, outputStream_V_data_V_1_payload_A, "outputStream_V_data_V_1_payload_A");
    sc_trace(mVcdFile, outputStream_V_data_V_1_payload_B, "outputStream_V_data_V_1_payload_B");
    sc_trace(mVcdFile, outputStream_V_data_V_1_sel_rd, "outputStream_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, outputStream_V_data_V_1_sel_wr, "outputStream_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, outputStream_V_data_V_1_sel, "outputStream_V_data_V_1_sel");
    sc_trace(mVcdFile, outputStream_V_data_V_1_load_A, "outputStream_V_data_V_1_load_A");
    sc_trace(mVcdFile, outputStream_V_data_V_1_load_B, "outputStream_V_data_V_1_load_B");
    sc_trace(mVcdFile, outputStream_V_data_V_1_state, "outputStream_V_data_V_1_state");
    sc_trace(mVcdFile, outputStream_V_data_V_1_state_cmp_full, "outputStream_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, outputStream_V_keep_V_1_data_out, "outputStream_V_keep_V_1_data_out");
    sc_trace(mVcdFile, outputStream_V_keep_V_1_vld_in, "outputStream_V_keep_V_1_vld_in");
    sc_trace(mVcdFile, outputStream_V_keep_V_1_vld_out, "outputStream_V_keep_V_1_vld_out");
    sc_trace(mVcdFile, outputStream_V_keep_V_1_ack_in, "outputStream_V_keep_V_1_ack_in");
    sc_trace(mVcdFile, outputStream_V_keep_V_1_ack_out, "outputStream_V_keep_V_1_ack_out");
    sc_trace(mVcdFile, outputStream_V_keep_V_1_sel_rd, "outputStream_V_keep_V_1_sel_rd");
    sc_trace(mVcdFile, outputStream_V_keep_V_1_sel, "outputStream_V_keep_V_1_sel");
    sc_trace(mVcdFile, outputStream_V_keep_V_1_state, "outputStream_V_keep_V_1_state");
    sc_trace(mVcdFile, outputStream_V_strb_V_1_data_out, "outputStream_V_strb_V_1_data_out");
    sc_trace(mVcdFile, outputStream_V_strb_V_1_vld_in, "outputStream_V_strb_V_1_vld_in");
    sc_trace(mVcdFile, outputStream_V_strb_V_1_vld_out, "outputStream_V_strb_V_1_vld_out");
    sc_trace(mVcdFile, outputStream_V_strb_V_1_ack_in, "outputStream_V_strb_V_1_ack_in");
    sc_trace(mVcdFile, outputStream_V_strb_V_1_ack_out, "outputStream_V_strb_V_1_ack_out");
    sc_trace(mVcdFile, outputStream_V_strb_V_1_sel_rd, "outputStream_V_strb_V_1_sel_rd");
    sc_trace(mVcdFile, outputStream_V_strb_V_1_sel, "outputStream_V_strb_V_1_sel");
    sc_trace(mVcdFile, outputStream_V_strb_V_1_state, "outputStream_V_strb_V_1_state");
    sc_trace(mVcdFile, outputStream_V_user_V_1_data_out, "outputStream_V_user_V_1_data_out");
    sc_trace(mVcdFile, outputStream_V_user_V_1_vld_in, "outputStream_V_user_V_1_vld_in");
    sc_trace(mVcdFile, outputStream_V_user_V_1_vld_out, "outputStream_V_user_V_1_vld_out");
    sc_trace(mVcdFile, outputStream_V_user_V_1_ack_in, "outputStream_V_user_V_1_ack_in");
    sc_trace(mVcdFile, outputStream_V_user_V_1_ack_out, "outputStream_V_user_V_1_ack_out");
    sc_trace(mVcdFile, outputStream_V_user_V_1_sel_rd, "outputStream_V_user_V_1_sel_rd");
    sc_trace(mVcdFile, outputStream_V_user_V_1_sel, "outputStream_V_user_V_1_sel");
    sc_trace(mVcdFile, outputStream_V_user_V_1_state, "outputStream_V_user_V_1_state");
    sc_trace(mVcdFile, outputStream_V_last_V_1_data_out, "outputStream_V_last_V_1_data_out");
    sc_trace(mVcdFile, outputStream_V_last_V_1_vld_in, "outputStream_V_last_V_1_vld_in");
    sc_trace(mVcdFile, outputStream_V_last_V_1_vld_out, "outputStream_V_last_V_1_vld_out");
    sc_trace(mVcdFile, outputStream_V_last_V_1_ack_in, "outputStream_V_last_V_1_ack_in");
    sc_trace(mVcdFile, outputStream_V_last_V_1_ack_out, "outputStream_V_last_V_1_ack_out");
    sc_trace(mVcdFile, outputStream_V_last_V_1_sel_rd, "outputStream_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, outputStream_V_last_V_1_sel, "outputStream_V_last_V_1_sel");
    sc_trace(mVcdFile, outputStream_V_last_V_1_state, "outputStream_V_last_V_1_state");
    sc_trace(mVcdFile, outputStream_V_id_V_1_data_out, "outputStream_V_id_V_1_data_out");
    sc_trace(mVcdFile, outputStream_V_id_V_1_vld_in, "outputStream_V_id_V_1_vld_in");
    sc_trace(mVcdFile, outputStream_V_id_V_1_vld_out, "outputStream_V_id_V_1_vld_out");
    sc_trace(mVcdFile, outputStream_V_id_V_1_ack_in, "outputStream_V_id_V_1_ack_in");
    sc_trace(mVcdFile, outputStream_V_id_V_1_ack_out, "outputStream_V_id_V_1_ack_out");
    sc_trace(mVcdFile, outputStream_V_id_V_1_sel_rd, "outputStream_V_id_V_1_sel_rd");
    sc_trace(mVcdFile, outputStream_V_id_V_1_sel, "outputStream_V_id_V_1_sel");
    sc_trace(mVcdFile, outputStream_V_id_V_1_state, "outputStream_V_id_V_1_state");
    sc_trace(mVcdFile, outputStream_V_dest_V_1_data_out, "outputStream_V_dest_V_1_data_out");
    sc_trace(mVcdFile, outputStream_V_dest_V_1_vld_in, "outputStream_V_dest_V_1_vld_in");
    sc_trace(mVcdFile, outputStream_V_dest_V_1_vld_out, "outputStream_V_dest_V_1_vld_out");
    sc_trace(mVcdFile, outputStream_V_dest_V_1_ack_in, "outputStream_V_dest_V_1_ack_in");
    sc_trace(mVcdFile, outputStream_V_dest_V_1_ack_out, "outputStream_V_dest_V_1_ack_out");
    sc_trace(mVcdFile, outputStream_V_dest_V_1_sel_rd, "outputStream_V_dest_V_1_sel_rd");
    sc_trace(mVcdFile, outputStream_V_dest_V_1_sel, "outputStream_V_dest_V_1_sel");
    sc_trace(mVcdFile, outputStream_V_dest_V_1_state, "outputStream_V_dest_V_1_state");
    sc_trace(mVcdFile, inputStream_TDATA_blk_n, "inputStream_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, outputStream_TDATA_blk_n, "outputStream_TDATA_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter2, "ap_enable_reg_pp1_iter2");
    sc_trace(mVcdFile, ap_block_pp1_stage0, "ap_block_pp1_stage0");
    sc_trace(mVcdFile, tmp_25_reg_1279, "tmp_25_reg_1279");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter3, "ap_enable_reg_pp1_iter3");
    sc_trace(mVcdFile, tmp_25_reg_1279_pp1_iter2_reg, "tmp_25_reg_1279_pp1_iter2_reg");
    sc_trace(mVcdFile, idxRow_reg_432, "idxRow_reg_432");
    sc_trace(mVcdFile, col_assign_reg_443, "col_assign_reg_443");
    sc_trace(mVcdFile, pixProcessed_reg_454, "pixProcessed_reg_454");
    sc_trace(mVcdFile, i3_reg_466, "i3_reg_466");
    sc_trace(mVcdFile, i4_reg_477, "i4_reg_477");
    sc_trace(mVcdFile, idxHist_1_fu_499_p2, "idxHist_1_fu_499_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_1_fu_516_p2, "i_1_fu_516_p2");
    sc_trace(mVcdFile, i_1_reg_982, "i_1_reg_982");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, histogram_addr_1_reg_987, "histogram_addr_1_reg_987");
    sc_trace(mVcdFile, histogram_q0, "histogram_q0");
    sc_trace(mVcdFile, histogram_load_reg_992, "histogram_load_reg_992");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, grp_otsu_fu_488_ap_return, "grp_otsu_fu_488_ap_return");
    sc_trace(mVcdFile, t_reg_997, "t_reg_997");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, grp_otsu_fu_488_ap_idle, "grp_otsu_fu_488_ap_idle");
    sc_trace(mVcdFile, grp_otsu_fu_488_ap_ready, "grp_otsu_fu_488_ap_ready");
    sc_trace(mVcdFile, grp_otsu_fu_488_ap_done, "grp_otsu_fu_488_ap_done");
    sc_trace(mVcdFile, exitcond3_fu_543_p2, "exitcond3_fu_543_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, i_2_fu_549_p2, "i_2_fu_549_p2");
    sc_trace(mVcdFile, i_2_reg_1006, "i_2_reg_1006");
    sc_trace(mVcdFile, img_fifo_addr_1_reg_1011, "img_fifo_addr_1_reg_1011");
    sc_trace(mVcdFile, tmp_18_fu_564_p2, "tmp_18_fu_564_p2");
    sc_trace(mVcdFile, tmp_18_reg_1016, "tmp_18_reg_1016");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, exitcond4_fu_577_p2, "exitcond4_fu_577_p2");
    sc_trace(mVcdFile, exitcond4_reg_1021, "exitcond4_reg_1021");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state11_pp0_stage0_iter0, "ap_block_state11_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state16_pp0_stage0_iter1, "ap_block_state16_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, exitcond4_reg_1021_pp0_iter1_reg, "exitcond4_reg_1021_pp0_iter1_reg");
    sc_trace(mVcdFile, i_4_fu_583_p2, "i_4_fu_583_p2");
    sc_trace(mVcdFile, i_4_reg_1025, "i_4_reg_1025");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, tmp_19_fu_589_p1, "tmp_19_fu_589_p1");
    sc_trace(mVcdFile, tmp_19_reg_1030, "tmp_19_reg_1030");
    sc_trace(mVcdFile, tmp_19_reg_1030_pp0_iter1_reg, "tmp_19_reg_1030_pp0_iter1_reg");
    sc_trace(mVcdFile, img_fifo_addr_2_reg_1035, "img_fifo_addr_2_reg_1035");
    sc_trace(mVcdFile, img_fifo_addr_2_reg_1035_pp0_iter1_reg, "img_fifo_addr_2_reg_1035_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_20_fu_594_p1, "tmp_20_fu_594_p1");
    sc_trace(mVcdFile, tmp_20_reg_1040, "tmp_20_reg_1040");
    sc_trace(mVcdFile, lineBuff_val_1_addr_reg_1045, "lineBuff_val_1_addr_reg_1045");
    sc_trace(mVcdFile, lineBuff_val_2_addr_reg_1050, "lineBuff_val_2_addr_reg_1050");
    sc_trace(mVcdFile, or_cond_fu_632_p2, "or_cond_fu_632_p2");
    sc_trace(mVcdFile, or_cond_reg_1055, "or_cond_reg_1055");
    sc_trace(mVcdFile, or_cond_reg_1055_pp0_iter1_reg, "or_cond_reg_1055_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_26_fu_638_p2, "tmp_26_fu_638_p2");
    sc_trace(mVcdFile, tmp_26_reg_1062, "tmp_26_reg_1062");
    sc_trace(mVcdFile, idxCol_fu_644_p2, "idxCol_fu_644_p2");
    sc_trace(mVcdFile, idxCol_reg_1068, "idxCol_reg_1068");
    sc_trace(mVcdFile, idxRow_1_fu_656_p3, "idxRow_1_fu_656_p3");
    sc_trace(mVcdFile, idxRow_1_reg_1073, "idxRow_1_reg_1073");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage2, "ap_CS_fsm_pp0_stage2");
    sc_trace(mVcdFile, ap_block_state13_pp0_stage2_iter0, "ap_block_state13_pp0_stage2_iter0");
    sc_trace(mVcdFile, ap_block_state18_pp0_stage2_iter1, "ap_block_state18_pp0_stage2_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage2_11001, "ap_block_pp0_stage2_11001");
    sc_trace(mVcdFile, pixProcessed_3_fu_671_p2, "pixProcessed_3_fu_671_p2");
    sc_trace(mVcdFile, pixProcessed_3_reg_1083, "pixProcessed_3_reg_1083");
    sc_trace(mVcdFile, col_assign_1_0_2_fu_684_p2, "col_assign_1_0_2_fu_684_p2");
    sc_trace(mVcdFile, col_assign_1_0_2_reg_1115, "col_assign_1_0_2_reg_1115");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage3, "ap_CS_fsm_pp0_stage3");
    sc_trace(mVcdFile, ap_block_state14_pp0_stage3_iter0, "ap_block_state14_pp0_stage3_iter0");
    sc_trace(mVcdFile, ap_block_state19_pp0_stage3_iter1, "ap_block_state19_pp0_stage3_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage3_11001, "ap_block_pp0_stage3_11001");
    sc_trace(mVcdFile, lineBuff_val_1_q0, "lineBuff_val_1_q0");
    sc_trace(mVcdFile, lineBuff_val_1_load_1_reg_1126, "lineBuff_val_1_load_1_reg_1126");
    sc_trace(mVcdFile, lineBuff_val_1_q1, "lineBuff_val_1_q1");
    sc_trace(mVcdFile, lineBuff_val_1_load_2_reg_1134, "lineBuff_val_1_load_2_reg_1134");
    sc_trace(mVcdFile, lineBuff_val_2_q0, "lineBuff_val_2_q0");
    sc_trace(mVcdFile, lineBuff_val_2_load_1_reg_1147, "lineBuff_val_2_load_1_reg_1147");
    sc_trace(mVcdFile, lineBuff_val_2_q1, "lineBuff_val_2_q1");
    sc_trace(mVcdFile, lineBuff_val_2_load_2_reg_1155, "lineBuff_val_2_load_2_reg_1155");
    sc_trace(mVcdFile, valInWindow_0_minVal_fu_703_p3, "valInWindow_0_minVal_fu_703_p3");
    sc_trace(mVcdFile, valInWindow_0_minVal_reg_1168, "valInWindow_0_minVal_reg_1168");
    sc_trace(mVcdFile, valInWindow_0_maxVal_fu_721_p3, "valInWindow_0_maxVal_fu_721_p3");
    sc_trace(mVcdFile, valInWindow_0_maxVal_reg_1178, "valInWindow_0_maxVal_reg_1178");
    sc_trace(mVcdFile, idxCol_1_fu_734_p3, "idxCol_1_fu_734_p3");
    sc_trace(mVcdFile, idxCol_1_reg_1184, "idxCol_1_reg_1184");
    sc_trace(mVcdFile, pixProcessed_2_fu_740_p3, "pixProcessed_2_fu_740_p3");
    sc_trace(mVcdFile, pixProcessed_2_reg_1189, "pixProcessed_2_reg_1189");
    sc_trace(mVcdFile, lineBuff_val_0_q1, "lineBuff_val_0_q1");
    sc_trace(mVcdFile, lineBuff_val_0_load_2_reg_1194, "lineBuff_val_0_load_2_reg_1194");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage4, "ap_CS_fsm_pp0_stage4");
    sc_trace(mVcdFile, ap_block_state15_pp0_stage4_iter0, "ap_block_state15_pp0_stage4_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage4_11001, "ap_block_pp0_stage4_11001");
    sc_trace(mVcdFile, lineBuff_val_1_load_3_reg_1200, "lineBuff_val_1_load_3_reg_1200");
    sc_trace(mVcdFile, lineBuff_val_2_load_3_reg_1208, "lineBuff_val_2_load_3_reg_1208");
    sc_trace(mVcdFile, lineBuff_val_0_q0, "lineBuff_val_0_q0");
    sc_trace(mVcdFile, lineBuff_val_0_load_3_reg_1216, "lineBuff_val_0_load_3_reg_1216");
    sc_trace(mVcdFile, valInWindow_0_minVal_5_fu_799_p3, "valInWindow_0_minVal_5_fu_799_p3");
    sc_trace(mVcdFile, valInWindow_0_minVal_5_reg_1236, "valInWindow_0_minVal_5_reg_1236");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage1, "ap_CS_fsm_pp0_stage1");
    sc_trace(mVcdFile, ap_block_state12_pp0_stage1_iter0, "ap_block_state12_pp0_stage1_iter0");
    sc_trace(mVcdFile, ap_block_state17_pp0_stage1_iter1, "ap_block_state17_pp0_stage1_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage1_11001, "ap_block_pp0_stage1_11001");
    sc_trace(mVcdFile, valInWindow_0_maxVal_5_fu_823_p3, "valInWindow_0_maxVal_5_fu_823_p3");
    sc_trace(mVcdFile, valInWindow_0_maxVal_5_reg_1242, "valInWindow_0_maxVal_5_reg_1242");
    sc_trace(mVcdFile, valInWindow_0_minVal_8_fu_857_p3, "valInWindow_0_minVal_8_fu_857_p3");
    sc_trace(mVcdFile, valInWindow_0_minVal_8_reg_1248, "valInWindow_0_minVal_8_reg_1248");
    sc_trace(mVcdFile, valInWindow_0_maxVal_8_fu_891_p3, "valInWindow_0_maxVal_8_fu_891_p3");
    sc_trace(mVcdFile, valInWindow_0_maxVal_8_reg_1254, "valInWindow_0_maxVal_8_reg_1254");
    sc_trace(mVcdFile, exitcond_fu_948_p2, "exitcond_fu_948_p2");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage0, "ap_CS_fsm_pp1_stage0");
    sc_trace(mVcdFile, ap_block_state21_pp1_stage0_iter0, "ap_block_state21_pp1_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state22_pp1_stage0_iter1, "ap_block_state22_pp1_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state23_pp1_stage0_iter2, "ap_block_state23_pp1_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state23_io, "ap_block_state23_io");
    sc_trace(mVcdFile, ap_block_state24_pp1_stage0_iter3, "ap_block_state24_pp1_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state24_io, "ap_block_state24_io");
    sc_trace(mVcdFile, ap_block_pp1_stage0_11001, "ap_block_pp1_stage0_11001");
    sc_trace(mVcdFile, i_3_fu_954_p2, "i_3_fu_954_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter0, "ap_enable_reg_pp1_iter0");
    sc_trace(mVcdFile, tmp_24_fu_960_p1, "tmp_24_fu_960_p1");
    sc_trace(mVcdFile, tmp_24_reg_1269, "tmp_24_reg_1269");
    sc_trace(mVcdFile, tmp_25_fu_965_p2, "tmp_25_fu_965_p2");
    sc_trace(mVcdFile, backimg_q0, "backimg_q0");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state11, "ap_condition_pp0_exit_iter0_state11");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage4_subdone, "ap_block_pp0_stage4_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage3_subdone, "ap_block_pp0_stage3_subdone");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, ap_block_pp1_stage0_subdone, "ap_block_pp1_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp1_exit_iter0_state21, "ap_condition_pp1_exit_iter0_state21");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter1, "ap_enable_reg_pp1_iter1");
    sc_trace(mVcdFile, histogram_address0, "histogram_address0");
    sc_trace(mVcdFile, histogram_ce0, "histogram_ce0");
    sc_trace(mVcdFile, histogram_we0, "histogram_we0");
    sc_trace(mVcdFile, histogram_d0, "histogram_d0");
    sc_trace(mVcdFile, img_fifo_address0, "img_fifo_address0");
    sc_trace(mVcdFile, img_fifo_ce0, "img_fifo_ce0");
    sc_trace(mVcdFile, img_fifo_we0, "img_fifo_we0");
    sc_trace(mVcdFile, img_fifo_d0, "img_fifo_d0");
    sc_trace(mVcdFile, img_fifo_q0, "img_fifo_q0");
    sc_trace(mVcdFile, backimg_address0, "backimg_address0");
    sc_trace(mVcdFile, backimg_ce0, "backimg_ce0");
    sc_trace(mVcdFile, backimg_we0, "backimg_we0");
    sc_trace(mVcdFile, backimg_d0, "backimg_d0");
    sc_trace(mVcdFile, lineBuff_val_0_address0, "lineBuff_val_0_address0");
    sc_trace(mVcdFile, lineBuff_val_0_ce0, "lineBuff_val_0_ce0");
    sc_trace(mVcdFile, lineBuff_val_0_we0, "lineBuff_val_0_we0");
    sc_trace(mVcdFile, lineBuff_val_0_address1, "lineBuff_val_0_address1");
    sc_trace(mVcdFile, lineBuff_val_0_ce1, "lineBuff_val_0_ce1");
    sc_trace(mVcdFile, lineBuff_val_1_address0, "lineBuff_val_1_address0");
    sc_trace(mVcdFile, lineBuff_val_1_ce0, "lineBuff_val_1_ce0");
    sc_trace(mVcdFile, lineBuff_val_1_we0, "lineBuff_val_1_we0");
    sc_trace(mVcdFile, lineBuff_val_1_address1, "lineBuff_val_1_address1");
    sc_trace(mVcdFile, lineBuff_val_1_ce1, "lineBuff_val_1_ce1");
    sc_trace(mVcdFile, lineBuff_val_2_address0, "lineBuff_val_2_address0");
    sc_trace(mVcdFile, lineBuff_val_2_ce0, "lineBuff_val_2_ce0");
    sc_trace(mVcdFile, lineBuff_val_2_we0, "lineBuff_val_2_we0");
    sc_trace(mVcdFile, lineBuff_val_2_address1, "lineBuff_val_2_address1");
    sc_trace(mVcdFile, lineBuff_val_2_ce1, "lineBuff_val_2_ce1");
    sc_trace(mVcdFile, grp_otsu_fu_488_ap_start, "grp_otsu_fu_488_ap_start");
    sc_trace(mVcdFile, grp_otsu_fu_488_histData_address0, "grp_otsu_fu_488_histData_address0");
    sc_trace(mVcdFile, grp_otsu_fu_488_histData_ce0, "grp_otsu_fu_488_histData_ce0");
    sc_trace(mVcdFile, idxHist_reg_398, "idxHist_reg_398");
    sc_trace(mVcdFile, exitcond1_fu_493_p2, "exitcond1_fu_493_p2");
    sc_trace(mVcdFile, i_reg_409, "i_reg_409");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, i2_reg_421, "i2_reg_421");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_phi_mux_idxRow_phi_fu_436_p4, "ap_phi_mux_idxRow_phi_fu_436_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, ap_phi_mux_col_assign_phi_fu_447_p4, "ap_phi_mux_col_assign_phi_fu_447_p4");
    sc_trace(mVcdFile, ap_phi_mux_pixProcessed_phi_fu_458_p4, "ap_phi_mux_pixProcessed_phi_fu_458_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage2, "ap_block_pp0_stage2");
    sc_trace(mVcdFile, ap_phi_mux_i3_phi_fu_470_p4, "ap_phi_mux_i3_phi_fu_470_p4");
    sc_trace(mVcdFile, grp_otsu_fu_488_ap_start_reg, "grp_otsu_fu_488_ap_start_reg");
    sc_trace(mVcdFile, exitcond2_fu_510_p2, "exitcond2_fu_510_p2");
    sc_trace(mVcdFile, tmp_fu_505_p1, "tmp_fu_505_p1");
    sc_trace(mVcdFile, tmp_s_fu_527_p1, "tmp_s_fu_527_p1");
    sc_trace(mVcdFile, tmp_15_fu_532_p1, "tmp_15_fu_532_p1");
    sc_trace(mVcdFile, tmp_16_fu_555_p1, "tmp_16_fu_555_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage1, "ap_block_pp0_stage1");
    sc_trace(mVcdFile, tmp_21_fu_664_p1, "tmp_21_fu_664_p1");
    sc_trace(mVcdFile, tmp_47_0_1_fu_677_p1, "tmp_47_0_1_fu_677_p1");
    sc_trace(mVcdFile, tmp_47_0_2_fu_690_p1, "tmp_47_0_2_fu_690_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage3, "ap_block_pp0_stage3");
    sc_trace(mVcdFile, valInWindow_0_minVal_1_fu_710_p1, "valInWindow_0_minVal_1_fu_710_p1");
    sc_trace(mVcdFile, valInWindow_0_maxVal_1_fu_747_p1, "valInWindow_0_maxVal_1_fu_747_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage4, "ap_block_pp0_stage4");
    sc_trace(mVcdFile, valInWindow_0_minVal_3_fu_761_p1, "valInWindow_0_minVal_3_fu_761_p1");
    sc_trace(mVcdFile, valInWindow_0_maxVal_3_fu_777_p1, "valInWindow_0_maxVal_3_fu_777_p1");
    sc_trace(mVcdFile, ap_block_pp1_stage0_01001, "ap_block_pp1_stage0_01001");
    sc_trace(mVcdFile, tmp_14_fu_537_p2, "tmp_14_fu_537_p2");
    sc_trace(mVcdFile, storemerge_fu_569_p3, "storemerge_fu_569_p3");
    sc_trace(mVcdFile, valOutputFg1_fu_932_p3, "valOutputFg1_fu_932_p3");
    sc_trace(mVcdFile, tmp_17_fu_560_p1, "tmp_17_fu_560_p1");
    sc_trace(mVcdFile, tmp_22_fu_600_p4, "tmp_22_fu_600_p4");
    sc_trace(mVcdFile, tmp_23_fu_616_p4, "tmp_23_fu_616_p4");
    sc_trace(mVcdFile, icmp_fu_610_p2, "icmp_fu_610_p2");
    sc_trace(mVcdFile, icmp3_fu_626_p2, "icmp3_fu_626_p2");
    sc_trace(mVcdFile, idxRow_2_fu_650_p2, "idxRow_2_fu_650_p2");
    sc_trace(mVcdFile, tmp_19_0_1_i_fu_697_p2, "tmp_19_0_1_i_fu_697_p2");
    sc_trace(mVcdFile, tmp_24_0_1_i_fu_715_p2, "tmp_24_0_1_i_fu_715_p2");
    sc_trace(mVcdFile, pixProcessed_1_fu_728_p3, "pixProcessed_1_fu_728_p3");
    sc_trace(mVcdFile, tmp_19_0_2_i_fu_751_p2, "tmp_19_0_2_i_fu_751_p2");
    sc_trace(mVcdFile, valInWindow_0_minVal_2_fu_755_p3, "valInWindow_0_minVal_2_fu_755_p3");
    sc_trace(mVcdFile, tmp_24_0_2_i_fu_766_p2, "tmp_24_0_2_i_fu_766_p2");
    sc_trace(mVcdFile, valInWindow_0_maxVal_2_fu_771_p3, "valInWindow_0_maxVal_2_fu_771_p3");
    sc_trace(mVcdFile, tmp_19_1_i_fu_782_p2, "tmp_19_1_i_fu_782_p2");
    sc_trace(mVcdFile, valInWindow_0_minVal_4_fu_787_p3, "valInWindow_0_minVal_4_fu_787_p3");
    sc_trace(mVcdFile, tmp_19_1_1_i_fu_794_p2, "tmp_19_1_1_i_fu_794_p2");
    sc_trace(mVcdFile, tmp_24_1_i_fu_806_p2, "tmp_24_1_i_fu_806_p2");
    sc_trace(mVcdFile, valInWindow_0_maxVal_4_fu_811_p3, "valInWindow_0_maxVal_4_fu_811_p3");
    sc_trace(mVcdFile, tmp_24_1_1_i_fu_818_p2, "tmp_24_1_1_i_fu_818_p2");
    sc_trace(mVcdFile, tmp_19_1_2_i_fu_830_p2, "tmp_19_1_2_i_fu_830_p2");
    sc_trace(mVcdFile, valInWindow_0_minVal_6_fu_834_p3, "valInWindow_0_minVal_6_fu_834_p3");
    sc_trace(mVcdFile, tmp_19_2_i_fu_840_p2, "tmp_19_2_i_fu_840_p2");
    sc_trace(mVcdFile, valInWindow_0_minVal_7_fu_845_p3, "valInWindow_0_minVal_7_fu_845_p3");
    sc_trace(mVcdFile, tmp_19_2_1_i_fu_852_p2, "tmp_19_2_1_i_fu_852_p2");
    sc_trace(mVcdFile, tmp_24_1_2_i_fu_864_p2, "tmp_24_1_2_i_fu_864_p2");
    sc_trace(mVcdFile, valInWindow_0_maxVal_6_fu_868_p3, "valInWindow_0_maxVal_6_fu_868_p3");
    sc_trace(mVcdFile, tmp_24_2_i_fu_874_p2, "tmp_24_2_i_fu_874_p2");
    sc_trace(mVcdFile, valInWindow_0_maxVal_7_fu_879_p3, "valInWindow_0_maxVal_7_fu_879_p3");
    sc_trace(mVcdFile, tmp_24_2_1_i_fu_886_p2, "tmp_24_2_1_i_fu_886_p2");
    sc_trace(mVcdFile, tmp_19_2_2_i_fu_898_p2, "tmp_19_2_2_i_fu_898_p2");
    sc_trace(mVcdFile, tmp_24_2_2_i_fu_908_p2, "tmp_24_2_2_i_fu_908_p2");
    sc_trace(mVcdFile, valOutputBg_fu_912_p3, "valOutputBg_fu_912_p3");
    sc_trace(mVcdFile, phitmp_fu_918_p2, "phitmp_fu_918_p2");
    sc_trace(mVcdFile, valOutputFg_fu_902_p3, "valOutputFg_fu_902_p3");
    sc_trace(mVcdFile, phitmp1_fu_924_p3, "phitmp1_fu_924_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, ap_block_state25, "ap_block_state25");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_block_pp0_stage1_subdone, "ap_block_pp0_stage1_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage2_subdone, "ap_block_pp0_stage2_subdone");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_idle_pp1, "ap_idle_pp1");
    sc_trace(mVcdFile, ap_enable_pp1, "ap_enable_pp1");
#endif

    }
    mHdltvinHandle.open("make_marker.hdltvin.dat");
    mHdltvoutHandle.open("make_marker.hdltvout.dat");
}

make_marker::~make_marker() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete make_marker_ctrl_bus_s_axi_U;
    delete histogram_U;
    delete img_fifo_U;
    delete backimg_U;
    delete lineBuff_val_0_U;
    delete lineBuff_val_1_U;
    delete lineBuff_val_2_U;
    delete grp_otsu_fu_488;
}

void make_marker::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void make_marker::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state11.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(exitcond3_fu_543_p2.read(), ap_const_lv1_1) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state11.read()) && 
             ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
               esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage4_subdone.read())) || 
              (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
               esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage3_subdone.read()))))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state11.read() ^ ap_const_logic_1);
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
                     esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage4_subdone.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
                     esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage3_subdone.read())))) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(exitcond3_fu_543_p2.read(), ap_const_lv1_1) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state21.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read()))) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read())) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state21.read())) {
                ap_enable_reg_pp1_iter1 = (ap_condition_pp1_exit_iter0_state21.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp1_iter1 = ap_enable_reg_pp1_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read())) {
            ap_enable_reg_pp1_iter2 = ap_enable_reg_pp1_iter1.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read())) {
            ap_enable_reg_pp1_iter3 = ap_enable_reg_pp1_iter2.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
            ap_enable_reg_pp1_iter3 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(exitcond3_fu_543_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        col_assign_reg_443 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_reg_1021.read()) && 
                esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1))) {
        col_assign_reg_443 = idxCol_1_reg_1184.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_otsu_fu_488_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(exitcond2_fu_510_p2.read(), ap_const_lv1_1) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
            grp_otsu_fu_488_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_otsu_fu_488_ap_ready.read())) {
            grp_otsu_fu_488_ap_start_reg = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        i2_reg_421 = i_2_reg_1006.read();
    } else if ((esl_seteq<1,1,1>(grp_otsu_fu_488_ap_done.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        i2_reg_421 = ap_const_lv16_0;
    }
    if ((esl_seteq<1,1,1>(exitcond3_fu_543_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        i3_reg_466 = ap_const_lv16_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_reg_1021.read()) && 
                esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1))) {
        i3_reg_466 = i_4_reg_1025.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        i4_reg_477 = ap_const_lv16_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_948_p2.read()))) {
        i4_reg_477 = i_3_fu_954_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond1_fu_493_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        i_reg_409 = ap_const_lv16_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        i_reg_409 = i_1_reg_982.read();
    }
    if ((esl_seteq<1,1,1>(exitcond1_fu_493_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        idxHist_reg_398 = idxHist_1_fu_499_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        idxHist_reg_398 = ap_const_lv9_0;
    }
    if ((esl_seteq<1,1,1>(exitcond3_fu_543_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        idxRow_reg_432 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_reg_1021.read()) && 
                esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1))) {
        idxRow_reg_432 = idxRow_1_reg_1073.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inputStream_V_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inputStream_V_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inputStream_V_data_V_0_vld_out.read()))) {
            inputStream_V_data_V_0_sel_rd =  (sc_logic) (~inputStream_V_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inputStream_V_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inputStream_V_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inputStream_V_data_V_0_ack_in.read()))) {
            inputStream_V_data_V_0_sel_wr =  (sc_logic) (~inputStream_V_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inputStream_V_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, inputStream_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, inputStream_V_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(inputStream_V_data_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, inputStream_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(inputStream_V_data_V_0_state.read(), ap_const_lv2_2)))) {
            inputStream_V_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inputStream_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, inputStream_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(inputStream_V_data_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, inputStream_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(inputStream_V_data_V_0_state.read(), ap_const_lv2_1)))) {
            inputStream_V_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inputStream_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(inputStream_V_data_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, inputStream_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(inputStream_V_data_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(inputStream_V_data_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, inputStream_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inputStream_V_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, inputStream_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, inputStream_V_data_V_0_ack_out.read()))))) {
            inputStream_V_data_V_0_state = ap_const_lv2_3;
        } else {
            inputStream_V_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inputStream_V_dest_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, inputStream_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, inputStream_V_dest_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, inputStream_V_dest_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, inputStream_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, inputStream_V_dest_V_0_state.read())))) {
            inputStream_V_dest_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inputStream_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, inputStream_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, inputStream_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, inputStream_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, inputStream_V_dest_V_0_state.read())))) {
            inputStream_V_dest_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inputStream_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, inputStream_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, inputStream_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, inputStream_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, inputStream_V_dest_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, inputStream_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inputStream_V_dest_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, inputStream_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, inputStream_V_dest_V_0_ack_out.read()))))) {
            inputStream_V_dest_V_0_state = ap_const_lv2_3;
        } else {
            inputStream_V_dest_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outputStream_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_data_V_1_vld_out.read()))) {
            outputStream_V_data_V_1_sel_rd =  (sc_logic) (~outputStream_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outputStream_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_data_V_1_ack_in.read()))) {
            outputStream_V_data_V_1_sel_wr =  (sc_logic) (~outputStream_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outputStream_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, outputStream_V_data_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, outputStream_V_data_V_1_state.read())))) {
            outputStream_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outputStream_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outputStream_V_data_V_1_state.read())))) {
            outputStream_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, outputStream_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outputStream_V_data_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outputStream_V_data_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_data_V_1_ack_out.read()))))) {
            outputStream_V_data_V_1_state = ap_const_lv2_3;
        } else {
            outputStream_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outputStream_V_dest_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_dest_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_dest_V_1_vld_out.read()))) {
            outputStream_V_dest_V_1_sel_rd =  (sc_logic) (~outputStream_V_dest_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outputStream_V_dest_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_dest_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, outputStream_V_dest_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, outputStream_V_dest_V_1_state.read())))) {
            outputStream_V_dest_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outputStream_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outputStream_V_dest_V_1_state.read())))) {
            outputStream_V_dest_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, outputStream_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outputStream_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outputStream_V_dest_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_dest_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_dest_V_1_ack_out.read()))))) {
            outputStream_V_dest_V_1_state = ap_const_lv2_3;
        } else {
            outputStream_V_dest_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outputStream_V_id_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_id_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_id_V_1_vld_out.read()))) {
            outputStream_V_id_V_1_sel_rd =  (sc_logic) (~outputStream_V_id_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outputStream_V_id_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_id_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, outputStream_V_id_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, outputStream_V_id_V_1_state.read())))) {
            outputStream_V_id_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outputStream_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outputStream_V_id_V_1_state.read())))) {
            outputStream_V_id_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, outputStream_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outputStream_V_id_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outputStream_V_id_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_id_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_id_V_1_ack_out.read()))))) {
            outputStream_V_id_V_1_state = ap_const_lv2_3;
        } else {
            outputStream_V_id_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outputStream_V_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_keep_V_1_vld_out.read()))) {
            outputStream_V_keep_V_1_sel_rd =  (sc_logic) (~outputStream_V_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outputStream_V_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, outputStream_V_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, outputStream_V_keep_V_1_state.read())))) {
            outputStream_V_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outputStream_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outputStream_V_keep_V_1_state.read())))) {
            outputStream_V_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, outputStream_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outputStream_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outputStream_V_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_keep_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_keep_V_1_ack_out.read()))))) {
            outputStream_V_keep_V_1_state = ap_const_lv2_3;
        } else {
            outputStream_V_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outputStream_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_last_V_1_vld_out.read()))) {
            outputStream_V_last_V_1_sel_rd =  (sc_logic) (~outputStream_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outputStream_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, outputStream_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, outputStream_V_last_V_1_state.read())))) {
            outputStream_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outputStream_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outputStream_V_last_V_1_state.read())))) {
            outputStream_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, outputStream_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outputStream_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outputStream_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_last_V_1_ack_out.read()))))) {
            outputStream_V_last_V_1_state = ap_const_lv2_3;
        } else {
            outputStream_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outputStream_V_strb_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_strb_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_strb_V_1_vld_out.read()))) {
            outputStream_V_strb_V_1_sel_rd =  (sc_logic) (~outputStream_V_strb_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outputStream_V_strb_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_strb_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, outputStream_V_strb_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, outputStream_V_strb_V_1_state.read())))) {
            outputStream_V_strb_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outputStream_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outputStream_V_strb_V_1_state.read())))) {
            outputStream_V_strb_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, outputStream_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outputStream_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outputStream_V_strb_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_strb_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_strb_V_1_ack_out.read()))))) {
            outputStream_V_strb_V_1_state = ap_const_lv2_3;
        } else {
            outputStream_V_strb_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outputStream_V_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_user_V_1_vld_out.read()))) {
            outputStream_V_user_V_1_sel_rd =  (sc_logic) (~outputStream_V_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outputStream_V_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, outputStream_V_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, outputStream_V_user_V_1_state.read())))) {
            outputStream_V_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outputStream_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outputStream_V_user_V_1_state.read())))) {
            outputStream_V_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, outputStream_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outputStream_V_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outputStream_V_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_user_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_user_V_1_ack_out.read()))))) {
            outputStream_V_user_V_1_state = ap_const_lv2_3;
        } else {
            outputStream_V_user_V_1_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(exitcond3_fu_543_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        pixProcessed_reg_454 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_reg_1021_pp0_iter1_reg.read()) && 
                esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1))) {
        pixProcessed_reg_454 = pixProcessed_2_reg_1189.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_reg_1021.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0))) {
        col_assign_1_0_2_reg_1115 = col_assign_1_0_2_fu_684_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond4_reg_1021 = exitcond4_fu_577_p2.read();
        exitcond4_reg_1021_pp0_iter1_reg = exitcond4_reg_1021.read();
        img_fifo_addr_2_reg_1035_pp0_iter1_reg = img_fifo_addr_2_reg_1035.read();
        or_cond_reg_1055_pp0_iter1_reg = or_cond_reg_1055.read();
        tmp_19_reg_1030_pp0_iter1_reg = tmp_19_reg_1030.read();
    }
    if ((esl_seteq<1,1,1>(inputStream_V_data_V_0_vld_out.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        histogram_addr_1_reg_987 =  (sc_lv<8>) (tmp_s_fu_527_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        histogram_load_reg_992 = histogram_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_1_reg_982 = i_1_fu_516_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        i_2_reg_1006 = i_2_fu_549_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1))) {
        i_4_reg_1025 = i_4_fu_583_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_reg_1021.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0))) {
        idxCol_1_reg_1184 = idxCol_1_fu_734_p3.read();
        lineBuff_val_1_load_1_reg_1126 = lineBuff_val_1_q0.read();
        lineBuff_val_1_load_2_reg_1134 = lineBuff_val_1_q1.read();
        lineBuff_val_2_load_1_reg_1147 = lineBuff_val_2_q0.read();
        lineBuff_val_2_load_2_reg_1155 = lineBuff_val_2_q1.read();
        pixProcessed_2_reg_1189 = pixProcessed_2_fu_740_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_577_p2.read()))) {
        idxCol_reg_1068 = idxCol_fu_644_p2.read();
        img_fifo_addr_2_reg_1035 =  (sc_lv<16>) (tmp_19_fu_589_p1.read());
        lineBuff_val_1_addr_reg_1045 =  (sc_lv<9>) (tmp_20_fu_594_p1.read());
        lineBuff_val_2_addr_reg_1050 =  (sc_lv<9>) (tmp_20_fu_594_p1.read());
        or_cond_reg_1055 = or_cond_fu_632_p2.read();
        tmp_19_reg_1030 = tmp_19_fu_589_p1.read();
        tmp_20_reg_1040 = tmp_20_fu_594_p1.read();
        tmp_26_reg_1062 = tmp_26_fu_638_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_577_p2.read()))) {
        idxRow_1_reg_1073 = idxRow_1_fu_656_p3.read();
    }
    if ((esl_seteq<1,1,1>(exitcond3_fu_543_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        img_fifo_addr_1_reg_1011 =  (sc_lv<16>) (tmp_16_fu_555_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inputStream_V_data_V_0_load_A.read())) {
        inputStream_V_data_V_0_payload_A = inputStream_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inputStream_V_data_V_0_load_B.read())) {
        inputStream_V_data_V_0_payload_B = inputStream_TDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_reg_1021.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0))) {
        lineBuff_val_0_load_2_reg_1194 = lineBuff_val_0_q1.read();
        lineBuff_val_1_load_3_reg_1200 = lineBuff_val_1_q1.read();
        lineBuff_val_2_load_3_reg_1208 = lineBuff_val_2_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_reg_1021.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_1055.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0))) {
        lineBuff_val_0_load_3_reg_1216 = lineBuff_val_0_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_data_V_1_load_A.read())) {
        outputStream_V_data_V_1_payload_A = outputStream_V_data_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_data_V_1_load_B.read())) {
        outputStream_V_data_V_1_payload_B = outputStream_V_data_V_1_data_in.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_reg_1021.read()))) {
        pixProcessed_3_reg_1083 = pixProcessed_3_fu_671_p2.read();
    }
    if ((esl_seteq<1,1,1>(grp_otsu_fu_488_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        t_reg_997 = grp_otsu_fu_488_ap_return.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        tmp_18_reg_1016 = tmp_18_fu_564_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_948_p2.read()))) {
        tmp_24_reg_1269 = tmp_24_fu_960_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_25_reg_1279 = tmp_25_fu_965_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)) {
        tmp_25_reg_1279_pp1_iter2_reg = tmp_25_reg_1279.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_reg_1021_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_1055_pp0_iter1_reg.read()))) {
        valInWindow_0_maxVal_5_reg_1242 = valInWindow_0_maxVal_5_fu_823_p3.read();
        valInWindow_0_minVal_5_reg_1236 = valInWindow_0_minVal_5_fu_799_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_reg_1021_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_1055_pp0_iter1_reg.read()))) {
        valInWindow_0_maxVal_8_reg_1254 = valInWindow_0_maxVal_8_fu_891_p3.read();
        valInWindow_0_minVal_8_reg_1248 = valInWindow_0_minVal_8_fu_857_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_reg_1021.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_1055.read()))) {
        valInWindow_0_maxVal_reg_1178 = valInWindow_0_maxVal_fu_721_p3.read();
        valInWindow_0_minVal_reg_1168 = valInWindow_0_minVal_fu_703_p3.read();
    }
}

void make_marker::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[10];
}

void make_marker::thread_ap_CS_fsm_pp0_stage1() {
    ap_CS_fsm_pp0_stage1 = ap_CS_fsm.read()[11];
}

void make_marker::thread_ap_CS_fsm_pp0_stage2() {
    ap_CS_fsm_pp0_stage2 = ap_CS_fsm.read()[12];
}

void make_marker::thread_ap_CS_fsm_pp0_stage3() {
    ap_CS_fsm_pp0_stage3 = ap_CS_fsm.read()[13];
}

void make_marker::thread_ap_CS_fsm_pp0_stage4() {
    ap_CS_fsm_pp0_stage4 = ap_CS_fsm.read()[14];
}

void make_marker::thread_ap_CS_fsm_pp1_stage0() {
    ap_CS_fsm_pp1_stage0 = ap_CS_fsm.read()[16];
}

void make_marker::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void make_marker::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void make_marker::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void make_marker::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[15];
}

void make_marker::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[17];
}

void make_marker::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void make_marker::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void make_marker::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void make_marker::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void make_marker::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void make_marker::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void make_marker::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void make_marker::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void make_marker::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void make_marker::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void make_marker::thread_ap_block_pp0_stage1() {
    ap_block_pp0_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void make_marker::thread_ap_block_pp0_stage1_11001() {
    ap_block_pp0_stage1_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void make_marker::thread_ap_block_pp0_stage1_subdone() {
    ap_block_pp0_stage1_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void make_marker::thread_ap_block_pp0_stage2() {
    ap_block_pp0_stage2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void make_marker::thread_ap_block_pp0_stage2_11001() {
    ap_block_pp0_stage2_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void make_marker::thread_ap_block_pp0_stage2_subdone() {
    ap_block_pp0_stage2_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void make_marker::thread_ap_block_pp0_stage3() {
    ap_block_pp0_stage3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void make_marker::thread_ap_block_pp0_stage3_11001() {
    ap_block_pp0_stage3_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void make_marker::thread_ap_block_pp0_stage3_subdone() {
    ap_block_pp0_stage3_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void make_marker::thread_ap_block_pp0_stage4() {
    ap_block_pp0_stage4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void make_marker::thread_ap_block_pp0_stage4_11001() {
    ap_block_pp0_stage4_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void make_marker::thread_ap_block_pp0_stage4_subdone() {
    ap_block_pp0_stage4_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void make_marker::thread_ap_block_pp1_stage0() {
    ap_block_pp1_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void make_marker::thread_ap_block_pp1_stage0_01001() {
    ap_block_pp1_stage0_01001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void make_marker::thread_ap_block_pp1_stage0_11001() {
    ap_block_pp1_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state23_io.read())) || (esl_seteq<1,1,1>(ap_enable_reg_pp1_iter3.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state24_io.read())));
}

void make_marker::thread_ap_block_pp1_stage0_subdone() {
    ap_block_pp1_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state23_io.read())) || (esl_seteq<1,1,1>(ap_enable_reg_pp1_iter3.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state24_io.read())));
}

void make_marker::thread_ap_block_state11_pp0_stage0_iter0() {
    ap_block_state11_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void make_marker::thread_ap_block_state12_pp0_stage1_iter0() {
    ap_block_state12_pp0_stage1_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void make_marker::thread_ap_block_state13_pp0_stage2_iter0() {
    ap_block_state13_pp0_stage2_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void make_marker::thread_ap_block_state14_pp0_stage3_iter0() {
    ap_block_state14_pp0_stage3_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void make_marker::thread_ap_block_state15_pp0_stage4_iter0() {
    ap_block_state15_pp0_stage4_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void make_marker::thread_ap_block_state16_pp0_stage0_iter1() {
    ap_block_state16_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void make_marker::thread_ap_block_state17_pp0_stage1_iter1() {
    ap_block_state17_pp0_stage1_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void make_marker::thread_ap_block_state18_pp0_stage2_iter1() {
    ap_block_state18_pp0_stage2_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void make_marker::thread_ap_block_state19_pp0_stage3_iter1() {
    ap_block_state19_pp0_stage3_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void make_marker::thread_ap_block_state21_pp1_stage0_iter0() {
    ap_block_state21_pp1_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void make_marker::thread_ap_block_state22_pp1_stage0_iter1() {
    ap_block_state22_pp1_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void make_marker::thread_ap_block_state23_io() {
    ap_block_state23_io = ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_25_reg_1279.read()) && 
  esl_seteq<1,1,1>(outputStream_V_data_V_1_ack_in.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_25_reg_1279.read()) && 
  esl_seteq<1,1,1>(outputStream_V_data_V_1_ack_in.read(), ap_const_logic_0)));
}

void make_marker::thread_ap_block_state23_pp1_stage0_iter2() {
    ap_block_state23_pp1_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void make_marker::thread_ap_block_state24_io() {
    ap_block_state24_io = ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_25_reg_1279_pp1_iter2_reg.read()) && 
  esl_seteq<1,1,1>(outputStream_V_data_V_1_ack_in.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_25_reg_1279_pp1_iter2_reg.read()) && 
  esl_seteq<1,1,1>(outputStream_V_data_V_1_ack_in.read(), ap_const_logic_0)));
}

void make_marker::thread_ap_block_state24_pp1_stage0_iter3() {
    ap_block_state24_pp1_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void make_marker::thread_ap_block_state25() {
    ap_block_state25 = (esl_seteq<1,1,1>(outputStream_V_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outputStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outputStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outputStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outputStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outputStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outputStream_V_data_V_1_ack_in.read(), ap_const_logic_0));
}

void make_marker::thread_ap_condition_pp0_exit_iter0_state11() {
    if (esl_seteq<1,1,1>(exitcond4_fu_577_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state11 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state11 = ap_const_logic_0;
    }
}

void make_marker::thread_ap_condition_pp1_exit_iter0_state21() {
    if (esl_seteq<1,1,1>(exitcond_fu_948_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp1_exit_iter0_state21 = ap_const_logic_1;
    } else {
        ap_condition_pp1_exit_iter0_state21 = ap_const_logic_0;
    }
}

void make_marker::thread_ap_done() {
    if ((!(esl_seteq<1,1,1>(outputStream_V_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outputStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outputStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outputStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outputStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outputStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outputStream_V_data_V_1_ack_in.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void make_marker::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void make_marker::thread_ap_enable_pp1() {
    ap_enable_pp1 = (ap_idle_pp1.read() ^ ap_const_logic_1);
}

void make_marker::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void make_marker::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void make_marker::thread_ap_idle_pp1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter3.read()))) {
        ap_idle_pp1 = ap_const_logic_1;
    } else {
        ap_idle_pp1 = ap_const_logic_0;
    }
}

void make_marker::thread_ap_phi_mux_col_assign_phi_fu_447_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_reg_1021.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_col_assign_phi_fu_447_p4 = idxCol_1_reg_1184.read();
    } else {
        ap_phi_mux_col_assign_phi_fu_447_p4 = col_assign_reg_443.read();
    }
}

void make_marker::thread_ap_phi_mux_i3_phi_fu_470_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_reg_1021.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_i3_phi_fu_470_p4 = i_4_reg_1025.read();
    } else {
        ap_phi_mux_i3_phi_fu_470_p4 = i3_reg_466.read();
    }
}

void make_marker::thread_ap_phi_mux_idxRow_phi_fu_436_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_reg_1021.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_idxRow_phi_fu_436_p4 = idxRow_1_reg_1073.read();
    } else {
        ap_phi_mux_idxRow_phi_fu_436_p4 = idxRow_reg_432.read();
    }
}

void make_marker::thread_ap_phi_mux_pixProcessed_phi_fu_458_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_reg_1021_pp0_iter1_reg.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
        ap_phi_mux_pixProcessed_phi_fu_458_p4 = pixProcessed_2_reg_1189.read();
    } else {
        ap_phi_mux_pixProcessed_phi_fu_458_p4 = pixProcessed_reg_454.read();
    }
}

void make_marker::thread_ap_ready() {
    if ((!(esl_seteq<1,1,1>(outputStream_V_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outputStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outputStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outputStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outputStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outputStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outputStream_V_data_V_1_ack_in.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void make_marker::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void make_marker::thread_backimg_address0() {
    if ((esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()))) {
        backimg_address0 =  (sc_lv<16>) (tmp_24_reg_1269.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
                esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0))) {
        backimg_address0 =  (sc_lv<16>) (tmp_19_reg_1030_pp0_iter1_reg.read());
    } else {
        backimg_address0 = "XXXXXXXXXXXXXXXX";
    }
}

void make_marker::thread_backimg_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read())))) {
        backimg_ce0 = ap_const_logic_1;
    } else {
        backimg_ce0 = ap_const_logic_0;
    }
}

void make_marker::thread_backimg_d0() {
    backimg_d0 = (!or_cond_reg_1055_pp0_iter1_reg.read()[0].is_01())? sc_lv<8>(): ((or_cond_reg_1055_pp0_iter1_reg.read()[0].to_bool())? phitmp1_fu_924_p3.read(): ap_const_lv8_80);
}

void make_marker::thread_backimg_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_reg_1021_pp0_iter1_reg.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1))) {
        backimg_we0 = ap_const_logic_1;
    } else {
        backimg_we0 = ap_const_logic_0;
    }
}

void make_marker::thread_col_assign_1_0_2_fu_684_p2() {
    col_assign_1_0_2_fu_684_p2 = (!pixProcessed_reg_454.read().is_01() || !ap_const_lv32_2.is_01())? sc_lv<32>(): (sc_biguint<32>(pixProcessed_reg_454.read()) + sc_biguint<32>(ap_const_lv32_2));
}

void make_marker::thread_exitcond1_fu_493_p2() {
    exitcond1_fu_493_p2 = (!idxHist_reg_398.read().is_01() || !ap_const_lv9_100.is_01())? sc_lv<1>(): sc_lv<1>(idxHist_reg_398.read() == ap_const_lv9_100);
}

void make_marker::thread_exitcond2_fu_510_p2() {
    exitcond2_fu_510_p2 = (!i_reg_409.read().is_01() || !ap_const_lv16_FAAA.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_409.read() == ap_const_lv16_FAAA);
}

void make_marker::thread_exitcond3_fu_543_p2() {
    exitcond3_fu_543_p2 = (!i2_reg_421.read().is_01() || !ap_const_lv16_FAAA.is_01())? sc_lv<1>(): sc_lv<1>(i2_reg_421.read() == ap_const_lv16_FAAA);
}

void make_marker::thread_exitcond4_fu_577_p2() {
    exitcond4_fu_577_p2 = (!ap_phi_mux_i3_phi_fu_470_p4.read().is_01() || !ap_const_lv16_FAAA.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_i3_phi_fu_470_p4.read() == ap_const_lv16_FAAA);
}

void make_marker::thread_exitcond_fu_948_p2() {
    exitcond_fu_948_p2 = (!i4_reg_477.read().is_01() || !ap_const_lv16_FAAA.is_01())? sc_lv<1>(): sc_lv<1>(i4_reg_477.read() == ap_const_lv16_FAAA);
}

void make_marker::thread_grp_otsu_fu_488_ap_start() {
    grp_otsu_fu_488_ap_start = grp_otsu_fu_488_ap_start_reg.read();
}

void make_marker::thread_histogram_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        histogram_address0 = histogram_addr_1_reg_987.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        histogram_address0 =  (sc_lv<8>) (tmp_s_fu_527_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        histogram_address0 =  (sc_lv<8>) (tmp_fu_505_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        histogram_address0 = grp_otsu_fu_488_histData_address0.read();
    } else {
        histogram_address0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void make_marker::thread_histogram_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(inputStream_V_data_V_0_vld_out.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        histogram_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        histogram_ce0 = grp_otsu_fu_488_histData_ce0.read();
    } else {
        histogram_ce0 = ap_const_logic_0;
    }
}

void make_marker::thread_histogram_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        histogram_d0 = tmp_14_fu_537_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        histogram_d0 = ap_const_lv32_0;
    } else {
        histogram_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void make_marker::thread_histogram_we0() {
    if (((esl_seteq<1,1,1>(exitcond1_fu_493_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        histogram_we0 = ap_const_logic_1;
    } else {
        histogram_we0 = ap_const_logic_0;
    }
}

void make_marker::thread_i_1_fu_516_p2() {
    i_1_fu_516_p2 = (!i_reg_409.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_biguint<16>(i_reg_409.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void make_marker::thread_i_2_fu_549_p2() {
    i_2_fu_549_p2 = (!i2_reg_421.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_biguint<16>(i2_reg_421.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void make_marker::thread_i_3_fu_954_p2() {
    i_3_fu_954_p2 = (!i4_reg_477.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_biguint<16>(i4_reg_477.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void make_marker::thread_i_4_fu_583_p2() {
    i_4_fu_583_p2 = (!ap_phi_mux_i3_phi_fu_470_p4.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_biguint<16>(ap_phi_mux_i3_phi_fu_470_p4.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void make_marker::thread_icmp3_fu_626_p2() {
    icmp3_fu_626_p2 = (!tmp_23_fu_616_p4.read().is_01() || !ap_const_lv31_0.is_01())? sc_lv<1>(): (sc_bigint<31>(tmp_23_fu_616_p4.read()) > sc_bigint<31>(ap_const_lv31_0));
}

void make_marker::thread_icmp_fu_610_p2() {
    icmp_fu_610_p2 = (!tmp_22_fu_600_p4.read().is_01() || !ap_const_lv31_0.is_01())? sc_lv<1>(): (sc_bigint<31>(tmp_22_fu_600_p4.read()) > sc_bigint<31>(ap_const_lv31_0));
}

void make_marker::thread_idxCol_1_fu_734_p3() {
    idxCol_1_fu_734_p3 = (!tmp_26_reg_1062.read()[0].is_01())? sc_lv<32>(): ((tmp_26_reg_1062.read()[0].to_bool())? idxCol_reg_1068.read(): ap_const_lv32_0);
}

void make_marker::thread_idxCol_fu_644_p2() {
    idxCol_fu_644_p2 = (!ap_phi_mux_col_assign_phi_fu_447_p4.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(ap_phi_mux_col_assign_phi_fu_447_p4.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void make_marker::thread_idxHist_1_fu_499_p2() {
    idxHist_1_fu_499_p2 = (!idxHist_reg_398.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(idxHist_reg_398.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void make_marker::thread_idxRow_1_fu_656_p3() {
    idxRow_1_fu_656_p3 = (!tmp_26_fu_638_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_26_fu_638_p2.read()[0].to_bool())? ap_phi_mux_idxRow_phi_fu_436_p4.read(): idxRow_2_fu_650_p2.read());
}

void make_marker::thread_idxRow_2_fu_650_p2() {
    idxRow_2_fu_650_p2 = (!ap_phi_mux_idxRow_phi_fu_436_p4.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(ap_phi_mux_idxRow_phi_fu_436_p4.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void make_marker::thread_img_fifo_address0() {
    if ((esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1))) {
        img_fifo_address0 =  (sc_lv<16>) (tmp_24_fu_960_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
                esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0))) {
        img_fifo_address0 = img_fifo_addr_2_reg_1035_pp0_iter1_reg.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        img_fifo_address0 =  (sc_lv<16>) (tmp_19_fu_589_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        img_fifo_address0 = img_fifo_addr_1_reg_1011.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        img_fifo_address0 =  (sc_lv<16>) (tmp_16_fu_555_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        img_fifo_address0 =  (sc_lv<16>) (tmp_15_fu_532_p1.read());
    } else {
        img_fifo_address0 = "XXXXXXXXXXXXXXXX";
    }
}

void make_marker::thread_img_fifo_ce0() {
    if (((esl_seteq<1,1,1>(inputStream_V_data_V_0_vld_out.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1)))) {
        img_fifo_ce0 = ap_const_logic_1;
    } else {
        img_fifo_ce0 = ap_const_logic_0;
    }
}

void make_marker::thread_img_fifo_d0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0))) {
        img_fifo_d0 = valOutputFg1_fu_932_p3.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        img_fifo_d0 = storemerge_fu_569_p3.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        img_fifo_d0 = inputStream_V_data_V_0_data_out.read();
    } else {
        img_fifo_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void make_marker::thread_img_fifo_we0() {
    if (((esl_seteq<1,1,1>(inputStream_V_data_V_0_vld_out.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_reg_1021_pp0_iter1_reg.read()) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1)))) {
        img_fifo_we0 = ap_const_logic_1;
    } else {
        img_fifo_we0 = ap_const_logic_0;
    }
}

void make_marker::thread_inputStream_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        inputStream_TDATA_blk_n = inputStream_V_data_V_0_state.read()[0];
    } else {
        inputStream_TDATA_blk_n = ap_const_logic_1;
    }
}

void make_marker::thread_inputStream_TREADY() {
    inputStream_TREADY = inputStream_V_dest_V_0_state.read()[1];
}

void make_marker::thread_inputStream_V_data_V_0_ack_in() {
    inputStream_V_data_V_0_ack_in = inputStream_V_data_V_0_state.read()[1];
}

void make_marker::thread_inputStream_V_data_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(inputStream_V_data_V_0_vld_out.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        inputStream_V_data_V_0_ack_out = ap_const_logic_1;
    } else {
        inputStream_V_data_V_0_ack_out = ap_const_logic_0;
    }
}

void make_marker::thread_inputStream_V_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, inputStream_V_data_V_0_sel.read())) {
        inputStream_V_data_V_0_data_out = inputStream_V_data_V_0_payload_B.read();
    } else {
        inputStream_V_data_V_0_data_out = inputStream_V_data_V_0_payload_A.read();
    }
}

void make_marker::thread_inputStream_V_data_V_0_load_A() {
    inputStream_V_data_V_0_load_A = (inputStream_V_data_V_0_state_cmp_full.read() & ~inputStream_V_data_V_0_sel_wr.read());
}

void make_marker::thread_inputStream_V_data_V_0_load_B() {
    inputStream_V_data_V_0_load_B = (inputStream_V_data_V_0_sel_wr.read() & inputStream_V_data_V_0_state_cmp_full.read());
}

void make_marker::thread_inputStream_V_data_V_0_sel() {
    inputStream_V_data_V_0_sel = inputStream_V_data_V_0_sel_rd.read();
}

void make_marker::thread_inputStream_V_data_V_0_state_cmp_full() {
    inputStream_V_data_V_0_state_cmp_full =  (sc_logic) ((!inputStream_V_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(inputStream_V_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void make_marker::thread_inputStream_V_data_V_0_vld_in() {
    inputStream_V_data_V_0_vld_in = inputStream_TVALID.read();
}

void make_marker::thread_inputStream_V_data_V_0_vld_out() {
    inputStream_V_data_V_0_vld_out = inputStream_V_data_V_0_state.read()[0];
}

void make_marker::thread_inputStream_V_dest_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(inputStream_V_data_V_0_vld_out.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        inputStream_V_dest_V_0_ack_out = ap_const_logic_1;
    } else {
        inputStream_V_dest_V_0_ack_out = ap_const_logic_0;
    }
}

void make_marker::thread_inputStream_V_dest_V_0_vld_in() {
    inputStream_V_dest_V_0_vld_in = inputStream_TVALID.read();
}

void make_marker::thread_lineBuff_val_0_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        lineBuff_val_0_address0 =  (sc_lv<9>) (valInWindow_0_minVal_3_fu_761_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0))) {
        lineBuff_val_0_address0 =  (sc_lv<9>) (valInWindow_0_minVal_1_fu_710_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
        lineBuff_val_0_address0 =  (sc_lv<9>) (tmp_47_0_1_fu_677_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
        lineBuff_val_0_address0 =  (sc_lv<9>) (tmp_20_reg_1040.read());
    } else {
        lineBuff_val_0_address0 =  (sc_lv<9>) ("XXXXXXXXX");
    }
}

void make_marker::thread_lineBuff_val_0_address1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        lineBuff_val_0_address1 =  (sc_lv<9>) (valInWindow_0_maxVal_3_fu_777_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage4.read(), ap_const_boolean_0))) {
        lineBuff_val_0_address1 =  (sc_lv<9>) (valInWindow_0_maxVal_1_fu_747_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0))) {
        lineBuff_val_0_address1 =  (sc_lv<9>) (tmp_47_0_2_fu_690_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
        lineBuff_val_0_address1 =  (sc_lv<9>) (tmp_21_fu_664_p1.read());
    } else {
        lineBuff_val_0_address1 =  (sc_lv<9>) ("XXXXXXXXX");
    }
}

void make_marker::thread_lineBuff_val_0_ce0() {
    if (((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)))) {
        lineBuff_val_0_ce0 = ap_const_logic_1;
    } else {
        lineBuff_val_0_ce0 = ap_const_logic_0;
    }
}

void make_marker::thread_lineBuff_val_0_ce1() {
    if (((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage4_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)))) {
        lineBuff_val_0_ce1 = ap_const_logic_1;
    } else {
        lineBuff_val_0_ce1 = ap_const_logic_0;
    }
}

void make_marker::thread_lineBuff_val_0_we0() {
    if ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_reg_1021.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        lineBuff_val_0_we0 = ap_const_logic_1;
    } else {
        lineBuff_val_0_we0 = ap_const_logic_0;
    }
}

void make_marker::thread_lineBuff_val_1_address0() {
    if (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1)) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
            lineBuff_val_1_address0 =  (sc_lv<9>) (tmp_21_fu_664_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
            lineBuff_val_1_address0 = lineBuff_val_1_addr_reg_1045.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
            lineBuff_val_1_address0 =  (sc_lv<9>) (tmp_20_fu_594_p1.read());
        } else {
            lineBuff_val_1_address0 =  (sc_lv<9>) ("XXXXXXXXX");
        }
    } else {
        lineBuff_val_1_address0 =  (sc_lv<9>) ("XXXXXXXXX");
    }
}

void make_marker::thread_lineBuff_val_1_address1() {
    if (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1)) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0))) {
            lineBuff_val_1_address1 =  (sc_lv<9>) (tmp_47_0_2_fu_690_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
            lineBuff_val_1_address1 =  (sc_lv<9>) (tmp_47_0_1_fu_677_p1.read());
        } else {
            lineBuff_val_1_address1 =  (sc_lv<9>) ("XXXXXXXXX");
        }
    } else {
        lineBuff_val_1_address1 =  (sc_lv<9>) ("XXXXXXXXX");
    }
}

void make_marker::thread_lineBuff_val_1_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)))) {
        lineBuff_val_1_ce0 = ap_const_logic_1;
    } else {
        lineBuff_val_1_ce0 = ap_const_logic_0;
    }
}

void make_marker::thread_lineBuff_val_1_ce1() {
    if (((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)))) {
        lineBuff_val_1_ce1 = ap_const_logic_1;
    } else {
        lineBuff_val_1_ce1 = ap_const_logic_0;
    }
}

void make_marker::thread_lineBuff_val_1_we0() {
    if ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_reg_1021.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        lineBuff_val_1_we0 = ap_const_logic_1;
    } else {
        lineBuff_val_1_we0 = ap_const_logic_0;
    }
}

void make_marker::thread_lineBuff_val_2_address0() {
    if (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1)) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
            lineBuff_val_2_address0 =  (sc_lv<9>) (tmp_21_fu_664_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
            lineBuff_val_2_address0 = lineBuff_val_2_addr_reg_1050.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
            lineBuff_val_2_address0 =  (sc_lv<9>) (tmp_20_fu_594_p1.read());
        } else {
            lineBuff_val_2_address0 =  (sc_lv<9>) ("XXXXXXXXX");
        }
    } else {
        lineBuff_val_2_address0 =  (sc_lv<9>) ("XXXXXXXXX");
    }
}

void make_marker::thread_lineBuff_val_2_address1() {
    if (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1)) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0))) {
            lineBuff_val_2_address1 =  (sc_lv<9>) (tmp_47_0_2_fu_690_p1.read());
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
            lineBuff_val_2_address1 =  (sc_lv<9>) (tmp_47_0_1_fu_677_p1.read());
        } else {
            lineBuff_val_2_address1 =  (sc_lv<9>) ("XXXXXXXXX");
        }
    } else {
        lineBuff_val_2_address1 =  (sc_lv<9>) ("XXXXXXXXX");
    }
}

void make_marker::thread_lineBuff_val_2_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)))) {
        lineBuff_val_2_ce0 = ap_const_logic_1;
    } else {
        lineBuff_val_2_ce0 = ap_const_logic_0;
    }
}

void make_marker::thread_lineBuff_val_2_ce1() {
    if (((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)))) {
        lineBuff_val_2_ce1 = ap_const_logic_1;
    } else {
        lineBuff_val_2_ce1 = ap_const_logic_0;
    }
}

void make_marker::thread_lineBuff_val_2_we0() {
    if ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_reg_1021.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        lineBuff_val_2_we0 = ap_const_logic_1;
    } else {
        lineBuff_val_2_we0 = ap_const_logic_0;
    }
}

void make_marker::thread_or_cond_fu_632_p2() {
    or_cond_fu_632_p2 = (icmp_fu_610_p2.read() & icmp3_fu_626_p2.read());
}

void make_marker::thread_outputStream_TDATA() {
    outputStream_TDATA = outputStream_V_data_V_1_data_out.read();
}

void make_marker::thread_outputStream_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_25_reg_1279.read())) || 
         (esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp1_iter3.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_25_reg_1279_pp1_iter2_reg.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_25_reg_1279.read())) || 
         (esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp1_iter3.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_25_reg_1279_pp1_iter2_reg.read())))) {
        outputStream_TDATA_blk_n = outputStream_V_data_V_1_state.read()[1];
    } else {
        outputStream_TDATA_blk_n = ap_const_logic_1;
    }
}

void make_marker::thread_outputStream_TDEST() {
    outputStream_TDEST = outputStream_V_dest_V_1_data_out.read();
}

void make_marker::thread_outputStream_TID() {
    outputStream_TID = outputStream_V_id_V_1_data_out.read();
}

void make_marker::thread_outputStream_TKEEP() {
    outputStream_TKEEP = outputStream_V_keep_V_1_data_out.read();
}

void make_marker::thread_outputStream_TLAST() {
    outputStream_TLAST = outputStream_V_last_V_1_data_out.read();
}

void make_marker::thread_outputStream_TSTRB() {
    outputStream_TSTRB = outputStream_V_strb_V_1_data_out.read();
}

void make_marker::thread_outputStream_TUSER() {
    outputStream_TUSER = outputStream_V_user_V_1_data_out.read();
}

void make_marker::thread_outputStream_TVALID() {
    outputStream_TVALID = outputStream_V_dest_V_1_state.read()[0];
}

void make_marker::thread_outputStream_V_data_V_1_ack_in() {
    outputStream_V_data_V_1_ack_in = outputStream_V_data_V_1_state.read()[1];
}

void make_marker::thread_outputStream_V_data_V_1_ack_out() {
    outputStream_V_data_V_1_ack_out = outputStream_TREADY.read();
}

void make_marker::thread_outputStream_V_data_V_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_01001.read(), ap_const_boolean_0))) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_25_reg_1279.read())) {
            outputStream_V_data_V_1_data_in = ap_const_lv8_FF;
        } else if (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_25_reg_1279.read())) {
            outputStream_V_data_V_1_data_in = backimg_q0.read();
        } else {
            outputStream_V_data_V_1_data_in =  (sc_lv<8>) ("XXXXXXXX");
        }
    } else {
        outputStream_V_data_V_1_data_in =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void make_marker::thread_outputStream_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_data_V_1_sel.read())) {
        outputStream_V_data_V_1_data_out = outputStream_V_data_V_1_payload_B.read();
    } else {
        outputStream_V_data_V_1_data_out = outputStream_V_data_V_1_payload_A.read();
    }
}

void make_marker::thread_outputStream_V_data_V_1_load_A() {
    outputStream_V_data_V_1_load_A = (outputStream_V_data_V_1_state_cmp_full.read() & ~outputStream_V_data_V_1_sel_wr.read());
}

void make_marker::thread_outputStream_V_data_V_1_load_B() {
    outputStream_V_data_V_1_load_B = (outputStream_V_data_V_1_sel_wr.read() & outputStream_V_data_V_1_state_cmp_full.read());
}

void make_marker::thread_outputStream_V_data_V_1_sel() {
    outputStream_V_data_V_1_sel = outputStream_V_data_V_1_sel_rd.read();
}

void make_marker::thread_outputStream_V_data_V_1_state_cmp_full() {
    outputStream_V_data_V_1_state_cmp_full =  (sc_logic) ((!outputStream_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(outputStream_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void make_marker::thread_outputStream_V_data_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_25_reg_1279.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_25_reg_1279.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)))) {
        outputStream_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        outputStream_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void make_marker::thread_outputStream_V_data_V_1_vld_out() {
    outputStream_V_data_V_1_vld_out = outputStream_V_data_V_1_state.read()[0];
}

void make_marker::thread_outputStream_V_dest_V_1_ack_in() {
    outputStream_V_dest_V_1_ack_in = outputStream_V_dest_V_1_state.read()[1];
}

void make_marker::thread_outputStream_V_dest_V_1_ack_out() {
    outputStream_V_dest_V_1_ack_out = outputStream_TREADY.read();
}

void make_marker::thread_outputStream_V_dest_V_1_data_out() {
    outputStream_V_dest_V_1_data_out = ap_const_lv6_0;
}

void make_marker::thread_outputStream_V_dest_V_1_sel() {
    outputStream_V_dest_V_1_sel = outputStream_V_dest_V_1_sel_rd.read();
}

void make_marker::thread_outputStream_V_dest_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_25_reg_1279.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_25_reg_1279.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)))) {
        outputStream_V_dest_V_1_vld_in = ap_const_logic_1;
    } else {
        outputStream_V_dest_V_1_vld_in = ap_const_logic_0;
    }
}

void make_marker::thread_outputStream_V_dest_V_1_vld_out() {
    outputStream_V_dest_V_1_vld_out = outputStream_V_dest_V_1_state.read()[0];
}

void make_marker::thread_outputStream_V_id_V_1_ack_in() {
    outputStream_V_id_V_1_ack_in = outputStream_V_id_V_1_state.read()[1];
}

void make_marker::thread_outputStream_V_id_V_1_ack_out() {
    outputStream_V_id_V_1_ack_out = outputStream_TREADY.read();
}

void make_marker::thread_outputStream_V_id_V_1_data_out() {
    outputStream_V_id_V_1_data_out = ap_const_lv2_0;
}

void make_marker::thread_outputStream_V_id_V_1_sel() {
    outputStream_V_id_V_1_sel = outputStream_V_id_V_1_sel_rd.read();
}

void make_marker::thread_outputStream_V_id_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_25_reg_1279.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_25_reg_1279.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)))) {
        outputStream_V_id_V_1_vld_in = ap_const_logic_1;
    } else {
        outputStream_V_id_V_1_vld_in = ap_const_logic_0;
    }
}

void make_marker::thread_outputStream_V_id_V_1_vld_out() {
    outputStream_V_id_V_1_vld_out = outputStream_V_id_V_1_state.read()[0];
}

void make_marker::thread_outputStream_V_keep_V_1_ack_in() {
    outputStream_V_keep_V_1_ack_in = outputStream_V_keep_V_1_state.read()[1];
}

void make_marker::thread_outputStream_V_keep_V_1_ack_out() {
    outputStream_V_keep_V_1_ack_out = outputStream_TREADY.read();
}

void make_marker::thread_outputStream_V_keep_V_1_data_out() {
    outputStream_V_keep_V_1_data_out = ap_const_lv1_1;
}

void make_marker::thread_outputStream_V_keep_V_1_sel() {
    outputStream_V_keep_V_1_sel = outputStream_V_keep_V_1_sel_rd.read();
}

void make_marker::thread_outputStream_V_keep_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_25_reg_1279.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_25_reg_1279.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)))) {
        outputStream_V_keep_V_1_vld_in = ap_const_logic_1;
    } else {
        outputStream_V_keep_V_1_vld_in = ap_const_logic_0;
    }
}

void make_marker::thread_outputStream_V_keep_V_1_vld_out() {
    outputStream_V_keep_V_1_vld_out = outputStream_V_keep_V_1_state.read()[0];
}

void make_marker::thread_outputStream_V_last_V_1_ack_in() {
    outputStream_V_last_V_1_ack_in = outputStream_V_last_V_1_state.read()[1];
}

void make_marker::thread_outputStream_V_last_V_1_ack_out() {
    outputStream_V_last_V_1_ack_out = outputStream_TREADY.read();
}

void make_marker::thread_outputStream_V_last_V_1_data_out() {
    outputStream_V_last_V_1_data_out = ap_const_lv1_0;
}

void make_marker::thread_outputStream_V_last_V_1_sel() {
    outputStream_V_last_V_1_sel = outputStream_V_last_V_1_sel_rd.read();
}

void make_marker::thread_outputStream_V_last_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_25_reg_1279.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_25_reg_1279.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)))) {
        outputStream_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        outputStream_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void make_marker::thread_outputStream_V_last_V_1_vld_out() {
    outputStream_V_last_V_1_vld_out = outputStream_V_last_V_1_state.read()[0];
}

void make_marker::thread_outputStream_V_strb_V_1_ack_in() {
    outputStream_V_strb_V_1_ack_in = outputStream_V_strb_V_1_state.read()[1];
}

void make_marker::thread_outputStream_V_strb_V_1_ack_out() {
    outputStream_V_strb_V_1_ack_out = outputStream_TREADY.read();
}

void make_marker::thread_outputStream_V_strb_V_1_data_out() {
    outputStream_V_strb_V_1_data_out = ap_const_lv1_1;
}

void make_marker::thread_outputStream_V_strb_V_1_sel() {
    outputStream_V_strb_V_1_sel = outputStream_V_strb_V_1_sel_rd.read();
}

void make_marker::thread_outputStream_V_strb_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_25_reg_1279.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_25_reg_1279.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)))) {
        outputStream_V_strb_V_1_vld_in = ap_const_logic_1;
    } else {
        outputStream_V_strb_V_1_vld_in = ap_const_logic_0;
    }
}

void make_marker::thread_outputStream_V_strb_V_1_vld_out() {
    outputStream_V_strb_V_1_vld_out = outputStream_V_strb_V_1_state.read()[0];
}

void make_marker::thread_outputStream_V_user_V_1_ack_in() {
    outputStream_V_user_V_1_ack_in = outputStream_V_user_V_1_state.read()[1];
}

void make_marker::thread_outputStream_V_user_V_1_ack_out() {
    outputStream_V_user_V_1_ack_out = outputStream_TREADY.read();
}

void make_marker::thread_outputStream_V_user_V_1_data_out() {
    outputStream_V_user_V_1_data_out = ap_const_lv5_1;
}

void make_marker::thread_outputStream_V_user_V_1_sel() {
    outputStream_V_user_V_1_sel = outputStream_V_user_V_1_sel_rd.read();
}

void make_marker::thread_outputStream_V_user_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_25_reg_1279.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_25_reg_1279.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)))) {
        outputStream_V_user_V_1_vld_in = ap_const_logic_1;
    } else {
        outputStream_V_user_V_1_vld_in = ap_const_logic_0;
    }
}

void make_marker::thread_outputStream_V_user_V_1_vld_out() {
    outputStream_V_user_V_1_vld_out = outputStream_V_user_V_1_state.read()[0];
}

void make_marker::thread_phitmp1_fu_924_p3() {
    phitmp1_fu_924_p3 = (!phitmp_fu_918_p2.read()[0].is_01())? sc_lv<8>(): ((phitmp_fu_918_p2.read()[0].to_bool())? ap_const_lv8_80: ap_const_lv8_0);
}

void make_marker::thread_phitmp_fu_918_p2() {
    phitmp_fu_918_p2 = (!valOutputBg_fu_912_p3.read().is_01() || !ap_const_lv8_0.is_01())? sc_lv<1>(): sc_lv<1>(valOutputBg_fu_912_p3.read() == ap_const_lv8_0);
}

void make_marker::thread_pixProcessed_1_fu_728_p3() {
    pixProcessed_1_fu_728_p3 = (!or_cond_reg_1055.read()[0].is_01())? sc_lv<32>(): ((or_cond_reg_1055.read()[0].to_bool())? pixProcessed_3_reg_1083.read(): pixProcessed_reg_454.read());
}

void make_marker::thread_pixProcessed_2_fu_740_p3() {
    pixProcessed_2_fu_740_p3 = (!tmp_26_reg_1062.read()[0].is_01())? sc_lv<32>(): ((tmp_26_reg_1062.read()[0].to_bool())? pixProcessed_1_fu_728_p3.read(): ap_const_lv32_0);
}

void make_marker::thread_pixProcessed_3_fu_671_p2() {
    pixProcessed_3_fu_671_p2 = (!ap_phi_mux_pixProcessed_phi_fu_458_p4.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(ap_phi_mux_pixProcessed_phi_fu_458_p4.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void make_marker::thread_storemerge_fu_569_p3() {
    storemerge_fu_569_p3 = (!tmp_18_reg_1016.read()[0].is_01())? sc_lv<8>(): ((tmp_18_reg_1016.read()[0].to_bool())? ap_const_lv8_FF: ap_const_lv8_0);
}

void make_marker::thread_tmp_14_fu_537_p2() {
    tmp_14_fu_537_p2 = (!histogram_load_reg_992.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(histogram_load_reg_992.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void make_marker::thread_tmp_15_fu_532_p1() {
    tmp_15_fu_532_p1 = esl_zext<64,16>(i_reg_409.read());
}

void make_marker::thread_tmp_16_fu_555_p1() {
    tmp_16_fu_555_p1 = esl_zext<64,16>(i2_reg_421.read());
}

void make_marker::thread_tmp_17_fu_560_p1() {
    tmp_17_fu_560_p1 = esl_zext<32,8>(img_fifo_q0.read());
}

void make_marker::thread_tmp_18_fu_564_p2() {
    tmp_18_fu_564_p2 = (!tmp_17_fu_560_p1.read().is_01() || !t_reg_997.read().is_01())? sc_lv<1>(): (sc_bigint<32>(tmp_17_fu_560_p1.read()) > sc_bigint<32>(t_reg_997.read()));
}

void make_marker::thread_tmp_19_0_1_i_fu_697_p2() {
    tmp_19_0_1_i_fu_697_p2 = (!lineBuff_val_0_q0.read().is_01() || !lineBuff_val_0_q1.read().is_01())? sc_lv<1>(): (sc_biguint<8>(lineBuff_val_0_q0.read()) < sc_biguint<8>(lineBuff_val_0_q1.read()));
}

void make_marker::thread_tmp_19_0_2_i_fu_751_p2() {
    tmp_19_0_2_i_fu_751_p2 = (!lineBuff_val_0_load_2_reg_1194.read().is_01() || !lineBuff_val_0_load_3_reg_1216.read().is_01())? sc_lv<1>(): (sc_biguint<8>(lineBuff_val_0_load_2_reg_1194.read()) < sc_biguint<8>(lineBuff_val_0_load_3_reg_1216.read()));
}

void make_marker::thread_tmp_19_1_1_i_fu_794_p2() {
    tmp_19_1_1_i_fu_794_p2 = (!lineBuff_val_1_load_2_reg_1134.read().is_01() || !valInWindow_0_minVal_4_fu_787_p3.read().is_01())? sc_lv<1>(): (sc_biguint<8>(lineBuff_val_1_load_2_reg_1134.read()) < sc_biguint<8>(valInWindow_0_minVal_4_fu_787_p3.read()));
}

void make_marker::thread_tmp_19_1_2_i_fu_830_p2() {
    tmp_19_1_2_i_fu_830_p2 = (!lineBuff_val_1_load_3_reg_1200.read().is_01() || !valInWindow_0_minVal_5_reg_1236.read().is_01())? sc_lv<1>(): (sc_biguint<8>(lineBuff_val_1_load_3_reg_1200.read()) < sc_biguint<8>(valInWindow_0_minVal_5_reg_1236.read()));
}

void make_marker::thread_tmp_19_1_i_fu_782_p2() {
    tmp_19_1_i_fu_782_p2 = (!lineBuff_val_1_load_1_reg_1126.read().is_01() || !lineBuff_val_0_q0.read().is_01())? sc_lv<1>(): (sc_biguint<8>(lineBuff_val_1_load_1_reg_1126.read()) < sc_biguint<8>(lineBuff_val_0_q0.read()));
}

void make_marker::thread_tmp_19_2_1_i_fu_852_p2() {
    tmp_19_2_1_i_fu_852_p2 = (!lineBuff_val_2_load_2_reg_1155.read().is_01() || !valInWindow_0_minVal_7_fu_845_p3.read().is_01())? sc_lv<1>(): (sc_biguint<8>(lineBuff_val_2_load_2_reg_1155.read()) < sc_biguint<8>(valInWindow_0_minVal_7_fu_845_p3.read()));
}

void make_marker::thread_tmp_19_2_2_i_fu_898_p2() {
    tmp_19_2_2_i_fu_898_p2 = (!lineBuff_val_2_load_3_reg_1208.read().is_01() || !valInWindow_0_minVal_8_reg_1248.read().is_01())? sc_lv<1>(): (sc_biguint<8>(lineBuff_val_2_load_3_reg_1208.read()) < sc_biguint<8>(valInWindow_0_minVal_8_reg_1248.read()));
}

void make_marker::thread_tmp_19_2_i_fu_840_p2() {
    tmp_19_2_i_fu_840_p2 = (!lineBuff_val_2_load_1_reg_1147.read().is_01() || !valInWindow_0_minVal_6_fu_834_p3.read().is_01())? sc_lv<1>(): (sc_biguint<8>(lineBuff_val_2_load_1_reg_1147.read()) < sc_biguint<8>(valInWindow_0_minVal_6_fu_834_p3.read()));
}

void make_marker::thread_tmp_19_fu_589_p1() {
    tmp_19_fu_589_p1 = esl_zext<64,16>(ap_phi_mux_i3_phi_fu_470_p4.read());
}

void make_marker::thread_tmp_20_fu_594_p1() {
    tmp_20_fu_594_p1 = esl_zext<64,32>(ap_phi_mux_col_assign_phi_fu_447_p4.read());
}

void make_marker::thread_tmp_21_fu_664_p1() {
    tmp_21_fu_664_p1 = esl_zext<64,32>(ap_phi_mux_pixProcessed_phi_fu_458_p4.read());
}

void make_marker::thread_tmp_22_fu_600_p4() {
    tmp_22_fu_600_p4 = ap_phi_mux_idxRow_phi_fu_436_p4.read().range(31, 1);
}

void make_marker::thread_tmp_23_fu_616_p4() {
    tmp_23_fu_616_p4 = ap_phi_mux_col_assign_phi_fu_447_p4.read().range(31, 1);
}

void make_marker::thread_tmp_24_0_1_i_fu_715_p2() {
    tmp_24_0_1_i_fu_715_p2 = (!lineBuff_val_0_q0.read().is_01() || !lineBuff_val_0_q1.read().is_01())? sc_lv<1>(): (sc_biguint<8>(lineBuff_val_0_q0.read()) > sc_biguint<8>(lineBuff_val_0_q1.read()));
}

void make_marker::thread_tmp_24_0_2_i_fu_766_p2() {
    tmp_24_0_2_i_fu_766_p2 = (!lineBuff_val_0_load_2_reg_1194.read().is_01() || !lineBuff_val_0_q1.read().is_01())? sc_lv<1>(): (sc_biguint<8>(lineBuff_val_0_load_2_reg_1194.read()) > sc_biguint<8>(lineBuff_val_0_q1.read()));
}

void make_marker::thread_tmp_24_1_1_i_fu_818_p2() {
    tmp_24_1_1_i_fu_818_p2 = (!lineBuff_val_1_load_2_reg_1134.read().is_01() || !valInWindow_0_maxVal_4_fu_811_p3.read().is_01())? sc_lv<1>(): (sc_biguint<8>(lineBuff_val_1_load_2_reg_1134.read()) > sc_biguint<8>(valInWindow_0_maxVal_4_fu_811_p3.read()));
}

void make_marker::thread_tmp_24_1_2_i_fu_864_p2() {
    tmp_24_1_2_i_fu_864_p2 = (!lineBuff_val_1_load_3_reg_1200.read().is_01() || !valInWindow_0_maxVal_5_reg_1242.read().is_01())? sc_lv<1>(): (sc_biguint<8>(lineBuff_val_1_load_3_reg_1200.read()) > sc_biguint<8>(valInWindow_0_maxVal_5_reg_1242.read()));
}

void make_marker::thread_tmp_24_1_i_fu_806_p2() {
    tmp_24_1_i_fu_806_p2 = (!lineBuff_val_1_load_1_reg_1126.read().is_01() || !lineBuff_val_0_q1.read().is_01())? sc_lv<1>(): (sc_biguint<8>(lineBuff_val_1_load_1_reg_1126.read()) > sc_biguint<8>(lineBuff_val_0_q1.read()));
}

void make_marker::thread_tmp_24_2_1_i_fu_886_p2() {
    tmp_24_2_1_i_fu_886_p2 = (!lineBuff_val_2_load_2_reg_1155.read().is_01() || !valInWindow_0_maxVal_7_fu_879_p3.read().is_01())? sc_lv<1>(): (sc_biguint<8>(lineBuff_val_2_load_2_reg_1155.read()) > sc_biguint<8>(valInWindow_0_maxVal_7_fu_879_p3.read()));
}

void make_marker::thread_tmp_24_2_2_i_fu_908_p2() {
    tmp_24_2_2_i_fu_908_p2 = (!lineBuff_val_2_load_3_reg_1208.read().is_01() || !valInWindow_0_maxVal_8_reg_1254.read().is_01())? sc_lv<1>(): (sc_biguint<8>(lineBuff_val_2_load_3_reg_1208.read()) > sc_biguint<8>(valInWindow_0_maxVal_8_reg_1254.read()));
}

void make_marker::thread_tmp_24_2_i_fu_874_p2() {
    tmp_24_2_i_fu_874_p2 = (!lineBuff_val_2_load_1_reg_1147.read().is_01() || !valInWindow_0_maxVal_6_fu_868_p3.read().is_01())? sc_lv<1>(): (sc_biguint<8>(lineBuff_val_2_load_1_reg_1147.read()) > sc_biguint<8>(valInWindow_0_maxVal_6_fu_868_p3.read()));
}

void make_marker::thread_tmp_24_fu_960_p1() {
    tmp_24_fu_960_p1 = esl_zext<64,16>(i4_reg_477.read());
}

void make_marker::thread_tmp_25_fu_965_p2() {
    tmp_25_fu_965_p2 = (!img_fifo_q0.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(img_fifo_q0.read() == ap_const_lv8_FF);
}

void make_marker::thread_tmp_26_fu_638_p2() {
    tmp_26_fu_638_p2 = (!ap_phi_mux_col_assign_phi_fu_447_p4.read().is_01() || !ap_const_lv32_135.is_01())? sc_lv<1>(): (sc_bigint<32>(ap_phi_mux_col_assign_phi_fu_447_p4.read()) < sc_bigint<32>(ap_const_lv32_135));
}

void make_marker::thread_tmp_47_0_1_fu_677_p1() {
    tmp_47_0_1_fu_677_p1 = esl_zext<64,32>(pixProcessed_3_fu_671_p2.read());
}

void make_marker::thread_tmp_47_0_2_fu_690_p1() {
    tmp_47_0_2_fu_690_p1 = esl_zext<64,32>(col_assign_1_0_2_fu_684_p2.read());
}

void make_marker::thread_tmp_fu_505_p1() {
    tmp_fu_505_p1 = esl_zext<64,9>(idxHist_reg_398.read());
}

void make_marker::thread_tmp_s_fu_527_p1() {
    tmp_s_fu_527_p1 = esl_zext<64,8>(inputStream_V_data_V_0_data_out.read());
}

void make_marker::thread_valInWindow_0_maxVal_1_fu_747_p1() {
    valInWindow_0_maxVal_1_fu_747_p1 = esl_zext<64,32>(valInWindow_0_maxVal_reg_1178.read());
}

void make_marker::thread_valInWindow_0_maxVal_2_fu_771_p3() {
    valInWindow_0_maxVal_2_fu_771_p3 = (!tmp_24_0_2_i_fu_766_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_24_0_2_i_fu_766_p2.read()[0].to_bool())? col_assign_1_0_2_reg_1115.read(): valInWindow_0_maxVal_reg_1178.read());
}

void make_marker::thread_valInWindow_0_maxVal_3_fu_777_p1() {
    valInWindow_0_maxVal_3_fu_777_p1 = esl_zext<64,32>(valInWindow_0_maxVal_2_fu_771_p3.read());
}

void make_marker::thread_valInWindow_0_maxVal_4_fu_811_p3() {
    valInWindow_0_maxVal_4_fu_811_p3 = (!tmp_24_1_i_fu_806_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_24_1_i_fu_806_p2.read()[0].to_bool())? lineBuff_val_1_load_1_reg_1126.read(): lineBuff_val_0_q1.read());
}

void make_marker::thread_valInWindow_0_maxVal_5_fu_823_p3() {
    valInWindow_0_maxVal_5_fu_823_p3 = (!tmp_24_1_1_i_fu_818_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_24_1_1_i_fu_818_p2.read()[0].to_bool())? lineBuff_val_1_load_2_reg_1134.read(): valInWindow_0_maxVal_4_fu_811_p3.read());
}

void make_marker::thread_valInWindow_0_maxVal_6_fu_868_p3() {
    valInWindow_0_maxVal_6_fu_868_p3 = (!tmp_24_1_2_i_fu_864_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_24_1_2_i_fu_864_p2.read()[0].to_bool())? lineBuff_val_1_load_3_reg_1200.read(): valInWindow_0_maxVal_5_reg_1242.read());
}

void make_marker::thread_valInWindow_0_maxVal_7_fu_879_p3() {
    valInWindow_0_maxVal_7_fu_879_p3 = (!tmp_24_2_i_fu_874_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_24_2_i_fu_874_p2.read()[0].to_bool())? lineBuff_val_2_load_1_reg_1147.read(): valInWindow_0_maxVal_6_fu_868_p3.read());
}

void make_marker::thread_valInWindow_0_maxVal_8_fu_891_p3() {
    valInWindow_0_maxVal_8_fu_891_p3 = (!tmp_24_2_1_i_fu_886_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_24_2_1_i_fu_886_p2.read()[0].to_bool())? lineBuff_val_2_load_2_reg_1155.read(): valInWindow_0_maxVal_7_fu_879_p3.read());
}

void make_marker::thread_valInWindow_0_maxVal_fu_721_p3() {
    valInWindow_0_maxVal_fu_721_p3 = (!tmp_24_0_1_i_fu_715_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_24_0_1_i_fu_715_p2.read()[0].to_bool())? pixProcessed_3_reg_1083.read(): pixProcessed_reg_454.read());
}

void make_marker::thread_valInWindow_0_minVal_1_fu_710_p1() {
    valInWindow_0_minVal_1_fu_710_p1 = esl_zext<64,32>(valInWindow_0_minVal_fu_703_p3.read());
}

void make_marker::thread_valInWindow_0_minVal_2_fu_755_p3() {
    valInWindow_0_minVal_2_fu_755_p3 = (!tmp_19_0_2_i_fu_751_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_19_0_2_i_fu_751_p2.read()[0].to_bool())? col_assign_1_0_2_reg_1115.read(): valInWindow_0_minVal_reg_1168.read());
}

void make_marker::thread_valInWindow_0_minVal_3_fu_761_p1() {
    valInWindow_0_minVal_3_fu_761_p1 = esl_zext<64,32>(valInWindow_0_minVal_2_fu_755_p3.read());
}

void make_marker::thread_valInWindow_0_minVal_4_fu_787_p3() {
    valInWindow_0_minVal_4_fu_787_p3 = (!tmp_19_1_i_fu_782_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_19_1_i_fu_782_p2.read()[0].to_bool())? lineBuff_val_1_load_1_reg_1126.read(): lineBuff_val_0_q0.read());
}

void make_marker::thread_valInWindow_0_minVal_5_fu_799_p3() {
    valInWindow_0_minVal_5_fu_799_p3 = (!tmp_19_1_1_i_fu_794_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_19_1_1_i_fu_794_p2.read()[0].to_bool())? lineBuff_val_1_load_2_reg_1134.read(): valInWindow_0_minVal_4_fu_787_p3.read());
}

void make_marker::thread_valInWindow_0_minVal_6_fu_834_p3() {
    valInWindow_0_minVal_6_fu_834_p3 = (!tmp_19_1_2_i_fu_830_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_19_1_2_i_fu_830_p2.read()[0].to_bool())? lineBuff_val_1_load_3_reg_1200.read(): valInWindow_0_minVal_5_reg_1236.read());
}

void make_marker::thread_valInWindow_0_minVal_7_fu_845_p3() {
    valInWindow_0_minVal_7_fu_845_p3 = (!tmp_19_2_i_fu_840_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_19_2_i_fu_840_p2.read()[0].to_bool())? lineBuff_val_2_load_1_reg_1147.read(): valInWindow_0_minVal_6_fu_834_p3.read());
}

void make_marker::thread_valInWindow_0_minVal_8_fu_857_p3() {
    valInWindow_0_minVal_8_fu_857_p3 = (!tmp_19_2_1_i_fu_852_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_19_2_1_i_fu_852_p2.read()[0].to_bool())? lineBuff_val_2_load_2_reg_1155.read(): valInWindow_0_minVal_7_fu_845_p3.read());
}

void make_marker::thread_valInWindow_0_minVal_fu_703_p3() {
    valInWindow_0_minVal_fu_703_p3 = (!tmp_19_0_1_i_fu_697_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_19_0_1_i_fu_697_p2.read()[0].to_bool())? pixProcessed_3_reg_1083.read(): pixProcessed_reg_454.read());
}

void make_marker::thread_valOutputBg_fu_912_p3() {
    valOutputBg_fu_912_p3 = (!tmp_24_2_2_i_fu_908_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_24_2_2_i_fu_908_p2.read()[0].to_bool())? lineBuff_val_2_load_3_reg_1208.read(): valInWindow_0_maxVal_8_reg_1254.read());
}

void make_marker::thread_valOutputFg1_fu_932_p3() {
    valOutputFg1_fu_932_p3 = (!or_cond_reg_1055_pp0_iter1_reg.read()[0].is_01())? sc_lv<8>(): ((or_cond_reg_1055_pp0_iter1_reg.read()[0].to_bool())? valOutputFg_fu_902_p3.read(): ap_const_lv8_0);
}

void make_marker::thread_valOutputFg_fu_902_p3() {
    valOutputFg_fu_902_p3 = (!tmp_19_2_2_i_fu_898_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_19_2_2_i_fu_898_p2.read()[0].to_bool())? lineBuff_val_2_load_3_reg_1208.read(): valInWindow_0_minVal_8_reg_1248.read());
}

void make_marker::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(exitcond1_fu_493_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(exitcond2_fu_510_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(inputStream_V_data_V_0_vld_out.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(grp_otsu_fu_488_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(exitcond3_fu_543_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 1024 : 
            if ((!(esl_seteq<1,1,1>(exitcond4_fu_577_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            } else if ((esl_seteq<1,1,1>(exitcond4_fu_577_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()))) {
                ap_NS_fsm = ap_ST_fsm_state20;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 2048 : 
            if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage1_subdone.read())) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            }
            break;
        case 4096 : 
            if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage2_subdone.read())) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            }
            break;
        case 8192 : 
            if ((!(esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage3_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage3_subdone.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            } else if ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage3_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state20;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            }
            break;
        case 16384 : 
            if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage4_subdone.read())) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            }
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            break;
        case 65536 : 
            if ((!(esl_seteq<1,1,1>(exitcond_fu_948_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read())) && !(esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter3.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            } else if (((esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter3.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read())) || (esl_seteq<1,1,1>(exitcond_fu_948_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read())))) {
                ap_NS_fsm = ap_ST_fsm_state25;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            }
            break;
        case 131072 : 
            if ((!(esl_seteq<1,1,1>(outputStream_V_dest_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outputStream_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outputStream_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outputStream_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outputStream_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outputStream_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outputStream_V_data_V_1_ack_in.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state25;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<18>) ("XXXXXXXXXXXXXXXXXX");
            break;
    }
}

void make_marker::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inputStream_TDATA\" :  \"" << inputStream_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inputStream_TVALID\" :  \"" << inputStream_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"inputStream_TREADY\" :  \"" << inputStream_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inputStream_TKEEP\" :  \"" << inputStream_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inputStream_TSTRB\" :  \"" << inputStream_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inputStream_TUSER\" :  \"" << inputStream_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inputStream_TLAST\" :  \"" << inputStream_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inputStream_TID\" :  \"" << inputStream_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inputStream_TDEST\" :  \"" << inputStream_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outputStream_TDATA\" :  \"" << outputStream_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outputStream_TVALID\" :  \"" << outputStream_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"outputStream_TREADY\" :  \"" << outputStream_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outputStream_TKEEP\" :  \"" << outputStream_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outputStream_TSTRB\" :  \"" << outputStream_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outputStream_TUSER\" :  \"" << outputStream_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outputStream_TLAST\" :  \"" << outputStream_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outputStream_TID\" :  \"" << outputStream_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outputStream_TDEST\" :  \"" << outputStream_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_bus_AWVALID\" :  \"" << s_axi_ctrl_bus_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_bus_AWREADY\" :  \"" << s_axi_ctrl_bus_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_bus_AWADDR\" :  \"" << s_axi_ctrl_bus_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_bus_WVALID\" :  \"" << s_axi_ctrl_bus_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_bus_WREADY\" :  \"" << s_axi_ctrl_bus_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_bus_WDATA\" :  \"" << s_axi_ctrl_bus_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_bus_WSTRB\" :  \"" << s_axi_ctrl_bus_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_bus_ARVALID\" :  \"" << s_axi_ctrl_bus_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_bus_ARREADY\" :  \"" << s_axi_ctrl_bus_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_bus_ARADDR\" :  \"" << s_axi_ctrl_bus_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_bus_RVALID\" :  \"" << s_axi_ctrl_bus_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_bus_RREADY\" :  \"" << s_axi_ctrl_bus_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_bus_RDATA\" :  \"" << s_axi_ctrl_bus_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_bus_RRESP\" :  \"" << s_axi_ctrl_bus_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_bus_BVALID\" :  \"" << s_axi_ctrl_bus_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_bus_BREADY\" :  \"" << s_axi_ctrl_bus_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_bus_BRESP\" :  \"" << s_axi_ctrl_bus_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

